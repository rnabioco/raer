% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sc-utils.R
\name{build_tag_index}
\alias{build_tag_index}
\alias{show_tag_index}
\alias{get_tag_bam}
\title{Build index for tag sorted bam file}
\usage{
build_tag_index(
  bamfile,
  tag = "CB",
  n_records_to_check = 1e+06,
  overwrite = TRUE
)

show_tag_index(bamfile)

get_tag_bam(bamfile, barcodes, outbam = NULL, pos_sort_output = TRUE, ...)
}
\arguments{
\item{bamfile}{input tag indexed bam file}

\item{tag}{name of tag in bamfile used for sorting. The tag must be of type
"Z".}

\item{n_records_to_check}{The number of bam records to query to validate that
the tag is present and of the correct type. Set to 0 to disable checks.}

\item{overwrite}{if TRUE, regenerate index if it already exists}

\item{barcodes}{character vector of tag values to extract}

\item{outbam}{optional output bam file name, if not supplied a temporary file
will be used}

\item{pos_sort_output}{if TRUE, sort output bamfile by position and generate
a samtools style index}

\item{...}{Additional arguments passed to \code{\link[Rsamtools:scanBam]{Rsamtools::sortBam()}}}
}
\value{
name of index generated, which is the bam file + ".bri"

Character vector of tags

Returns name of output bam file. the output bam file will be
positionally sorted and positionally indexed using Rsamtools.
}
\description{
Build index for tag sorted bam file

Show tags stored in tag index

Subset a bam file to contain only certain tags (e.g. cell barcodes)
}
\examples{
bam_fn <- raer_example("5k_neuron_mouse_xf25_1pct_cbsort.bam")
build_tag_index(bam_fn)

bam_fn <- raer_example("5k_neuron_mouse_xf25_1pct_ubsort.bam")
build_tag_index(bam_fn, tag = "UB")

bam_fn <- raer_example("5k_neuron_mouse_xf25_1pct_cbsort.bam")
build_tag_index(bam_fn)
show_tag_index(bam_fn)

library(GenomicAlignments)

bam_fn <- raer_example("5k_neuron_mouse_xf25_1pct_cbsort.bam")
build_tag_index(bam_fn)

cbs <- c("AGGATAATCTCAGAAC-1", "TTCGATTTCCCGAGGT-1")
bam_out <- get_tag_bam(bam_fn, barcodes = cbs)
readGAlignments(bam_out, param = ScanBamParam(tag = "CB"))

}
