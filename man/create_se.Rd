% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_se.R
\name{create_se}
\alias{create_se}
\title{Create RangedSummarizedExperiment}
\usage{
create_se(
  plps,
  assay_cols = c("Var", "nRef", "nVar", "nA", "nT", "nC", "nG"),
  sample_names = NULL,
  sparse = FALSE,
  fill_na = NULL,
  verbose = FALSE
)
}
\arguments{
\item{plps}{results from running \code{\link[=get_pileup]{get_pileup()}}, can be one result, a list of
results, or a named list of results. If a named list is given, the colData
will be named using the names in the list.}

\item{assay_cols}{character vector of columns to store as assays}

\item{sample_names}{A list of names to be added to the SE object. If no
sample names are given and plps is not a named list, then default names (ie
sample_1, sample_2, ..., sample_n) will be given and a warning will be
printed.}

\item{sparse}{If TRUE, numeric matrices will be stored as sparseMatrices. All
missing values will be coerced to 0 in the sparseMatrices.}

\item{fill_na}{Numeric value to replace NAs in numeric matrices Should only
be used when plps were computed independently with a min_nucleotide_count =
1, otherwise sites may be set to 0, although they may have coverage > 0 but
less than the min_nucleotide_count parameter. Not applied when sparse =
TRUE, which coerces missing values to 0.}

\item{verbose}{print information on progress}
}
\value{
\code{RangedSummarizedExperiment} object populated with assays for each of
the listed \code{assay_cols}.
}
\description{
This function will take either a single result from running get_pileup() or a
list of results (ie for different samples) from running pileup_res and will
return a summarized experiment object that contains assays for specified
columns in the \code{get_pileup()} output.
}
\examples{
library(SummarizedExperiment)

bamfn <- raer_example("SRR5564269_Aligned.sortedByCoord.out.md.bam")
bam2fn <- raer_example("SRR5564277_Aligned.sortedByCoord.out.md.bam")
fafn <- raer_example("human.fasta")

bams <- rep(c(bamfn, bam2fn), each = 3)
sample_ids <- paste0(rep(c("KO", "WT"), each = 3), 1:3)
fp <- FilterParam(only_keep_variants = TRUE)
plps <- get_pileup(bams, fafn, filterParam = fp)
names(plps) <- sample_ids
se <- create_se(plps)
se$condition <- substr(se$sample, 1, 2)
assays(se)

colData(se)

rowRanges(se)

}
