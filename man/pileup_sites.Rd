% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pileup.R
\name{pileup_sites}
\alias{pileup_sites}
\alias{FilterParam}
\title{Generate base counts using pileup}
\usage{
pileup_sites(
  bamfiles,
  fafile,
  bedfile = NULL,
  region = NULL,
  chroms = NULL,
  param = FilterParam(),
  outfile_prefix = NULL,
  reads = NULL,
  return_data = TRUE,
  BPPARAM = SerialParam(),
  use_index = FALSE,
  bad_reads = NULL,
  umi_tag = NULL,
  verbose = FALSE
)

FilterParam(
  max_depth = 10000,
  min_depth = 1L,
  min_base_quality = 20L,
  min_mapq = 0L,
  library_type = "fr-first-strand",
  bam_flags = NULL,
  only_keep_variants = FALSE,
  trim_5p = 0L,
  trim_3p = 0L,
  ftrim_5p = 0,
  ftrim_3p = 0,
  indel_dist = 0L,
  splice_dist = 0L,
  min_splice_overhang = 0L,
  homopolymer_len = 0L,
  max_mismatch_type = c(0L, 0L),
  read_bqual = c(0, 0),
  min_variant_reads = 0L,
  min_allelic_freq = 0,
  report_multiallelic = TRUE,
  ignore_query_Ns = FALSE
)
}
\arguments{
\item{bamfiles}{character vector of paths to 1 or more bam files. If named,
the names will be included in the colData of the RangedSummarizedExperiment, otherwise
the colData will be populated with the basename of the bamfile.}

\item{fafile}{path to fasta file}

\item{bedfile}{path to bed file with sites or regions to query}

\item{region}{samtools region query string (i.e. chr1:100-1000)}

\item{chroms}{chromosomes to process, not to be used with region}

\item{param}{object of class \code{\link[=FilterParam]{FilterParam()}} which specify various
filters to apply to reads and sites during pileup.}

\item{outfile_prefix}{Output prefix for tabix indexed files. If \code{NULL}, no
files will be produced.}

\item{reads}{if supplied a fasta file will be written with reads that pass
filters and contain variants}

\item{return_data}{if \code{TRUE}, data is returned as a RangedSummarizedExperiment,
if \code{FALSE} a character vector of tabix-index files, specified by
\code{outfile_prefix}, will be returned.}

\item{BPPARAM}{A \link{BiocParallel} class to control parallel execution. Parallel
processing occurs per chromosome, so is disabled when run on a single
region.}

\item{use_index}{if TRUE regions supplied in the \code{bedfile} will be queried
using the bam file index. By default (FALSE) all alignments are queried via
streaming and regions in the bedfile are used to select the sites to keep.
Using the index can be much faster when querying a small number of sites in
large bamfiles. With many sites in the bedfile , or with small bamfiles,
this option may be slower than streaming.}

\item{bad_reads}{a textfile containing read names to exclude from pileup.
Readnames should be formated as readid_1 or readid_2 or readid for paired
end first read paired-end second read or single end data.}

\item{umi_tag}{The bam tag containing a UMI sequence. If supplied, multiple
reads with the same UMI sequence will only be counted once per position.}

\item{verbose}{if TRUE, then report progress and warnings.}

\item{max_depth}{maximum read depth considered at each site}

\item{min_depth}{min read depth needed to report site}

\item{min_base_quality}{min base quality score to consider read for pileup}

\item{min_mapq}{minimum required MAPQ score, can be a vector of values
for each bam file}

\item{library_type}{read orientation, one of fr-first-strand,
fr-second-strand, unstranded, and genomic-unstranded. Can supply as a vector to specify for each
input bam. Unstranded library type will be reported based on read alignment.
genomic-unstranded will report all variants w.r.t the + strand.}

\item{bam_flags}{bam flags to filter or keep, use \code{\link[Rsamtools:ScanBamParam-class]{Rsamtools::scanBamFlag()}}
to generate.}

\item{only_keep_variants}{if TRUE, then only variant sites will be reported
(FALSE by default), can be a vector for each input bamfile}

\item{trim_5p}{Bases to trim from 5' end of read alignments}

\item{trim_3p}{Bases to trim from 3' end of read alignments}

\item{ftrim_5p}{Fraction of bases to trim from 5' end of read alignments}

\item{ftrim_3p}{Fraction of bases to trim from 3' end of read alignments}

\item{indel_dist}{Exclude read if site occurs within given
distance from indel event in the read}

\item{splice_dist}{Exclude read if site occurs within given
distance from splicing event in the read}

\item{min_splice_overhang}{Exclude read if site is located adjacent to splice
site with an overhang of less than given length.}

\item{homopolymer_len}{Exclude site if occurs within homopolymer of given
length}

\item{max_mismatch_type}{Exclude read if it has X different mismatch types
(e.g A-to-G, G-to-C, C-to-G, is 3 mismatch types) or Y # of mismatches,
must be supplied as a integer vector of length 2. e.g.
c(X, Y).}

\item{read_bqual}{Exclude read if more than X percent of the bases have
base qualities less than Y. Numeric vector of length 2. e.g. c(0.25, 20)}

\item{min_variant_reads}{Required number of reads containing a variant for a site
to be reported. Calculated per bam file, such that if 1 bam file has >= min_variant_reads,
then the site will be reported.}

\item{min_allelic_freq}{minimum allelic frequency required for a variant to be
reported in Var assays.}

\item{report_multiallelic}{if TRUE, report sites with multiple variants passing
filters. If FALSE, site will not be reported.}

\item{ignore_query_Ns}{ignored for now}
}
\value{
A RangedSummarizedExperiment or a
vector of the output tabixed file names if \code{return_data} is FALSE.
}
\description{
Generate base counts using pileup
}
\details{
Multiple bam files can be processed together, with files being
written for each bam file. In this mode the output regions will be
consistent across all files. The min_mapq, only_keep_variants, and
library_type parameters can be specified for each input files.
}
\examples{
library(SummarizedExperiment)
bamfn <- raer_example("SRR5564269_Aligned.sortedByCoord.out.md.bam")
bam2fn <- raer_example("SRR5564277_Aligned.sortedByCoord.out.md.bam")
fafn <- raer_example("human.fasta")

rse <- pileup_sites(bamfn, fafn)

fp <- FilterParam(only_keep_variants = TRUE, min_depth = 55)
pileup_sites(bamfn, fafn, param = fp)


# using multiple bam files

bamfn <- raer_example("SRR5564269_Aligned.sortedByCoord.out.md.bam")
bam2fn <- raer_example("SRR5564277_Aligned.sortedByCoord.out.md.bam")
fafn <- raer_example("human.fasta")

bams <- rep(c(bamfn, bam2fn), each = 3)
sample_ids <- paste0(rep(c("KO", "WT"), each = 3), 1:3)
names(bams) <- sample_ids

fp <- FilterParam(only_keep_variants = TRUE)
rse <- pileup_sites(bams, fafn, param = fp)
rse

rse$condition <- substr(rse$sample, 1, 2)
assays(rse)

colData(rse)

rowRanges(rse)

}
\seealso{
Other pileup: 
\code{\link{pileup_cells}()}
}
\concept{pileup}
