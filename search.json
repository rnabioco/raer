[{"path":"https://rnabioco.github.io/raer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 raer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/raer/articles/novel-sites.html","id":"novel-rna-editing-site-detection-tutorial","dir":"Articles","previous_headings":"","what":"Novel RNA editing site detection tutorial","title":"Identifying RNA editing sites using RNA and DNA sequencing data","text":"vignette demonstrate identify novel RNA editing sites using raer package. vignette public RNA-seq Whole-Genome sequencing dataset analyzed. High coverage whole-genome sequencing conducted ERR262997 along paired-end RNA-seq SRR1258218. Aligned BAM files genome fasta file preprocessed vignette. files occupy ~100 Mb space contain alignments first 1MB chromosome 4. default files stored temporary directory. Change data_dir variable valid file path keep files reuse. Additionally use following additional annotation resources: database known SNPs, example SNPlocs.Hsapiens.dbSNP155.GRCh38 package. Due space memory constraints , vignette use BED file containing SNPs first 1Mb region chr4. TxDb.Hsapiens.UCSC.hg38.knownGene, database transcript models. Alternatively can generated .gtf file using makeTxDbFromGRanges() GenomicFeatures package. RepeatMasker annotations, can obtained AnnotationHub() hg38. space reasons annotations chr4 included text file. get_pileup() function can accept multiple bam files, supply one RNA-seq, one whole genome sequencing. Filtering parameters get_pileup() function can accept multiple arguments matched input bam files. Next filter keep sites variant RNA-seq, variant DNA-seq, minimum 5 reads DNA-seq. DNA-seq data reported “+” strand, RNA-seq data reported either strand. therefore use subsetByOverlaps(..., ignore.strand = TRUE) retain sites passing DNA-seq based filters independent strand. Next filter remove multi-allelic sites. sites stored comma-separated strings Var assay (e.g. AG,AC). Non-variant sites stored -. filter_multiallelic() remove sites multiple variants samples present summarizedExperiment object. add new column rowData() indicate variant site, calculate allele_freq assay variant allele frequencies sample. Next ’ll remove sites simple repeat regions. add repeat information rowData() using annot_from_gr() function. Next ’ll remove sites adjacent sites different variant types. example ->G variant located proximal C->T variant variants removed. Next, sites 4bp known splicing events excluded. variants low-confidence due possibility mis-alignments. Next, ’ll annotate site known SNP remove known SNPs. using SNPlocs package can use annot_snp() function. However use annot_from_gr() function annotate using prebuilt chr4snps object. Lastly, ’ll filter edit sites require editing frequency > 0.05 least 2 reads support editing site.","code":"data_dir <- tempdir() fns <- download_NA12878(data_dir) fns ## $bams ##                              ERR262996_dedup_chr4_sub.bam  ##            \"/tmp/Rtmpw8StBC/ERR262996_dedup_chr4_sub.bam\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam  ## \"/tmp/Rtmpw8StBC/SRR1258218_Aligned.sorted.dedup_sub.bam\"  ##  ## $bai ##                              ERR262996_dedup_chr4_sub.bam.bai  ##            \"/tmp/Rtmpw8StBC/ERR262996_dedup_chr4_sub.bam.bai\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam.bai  ## \"/tmp/Rtmpw8StBC/SRR1258218_Aligned.sorted.dedup_sub.bam.bai\"  ##  ## $fasta ##                   hg38_chr4.fa.bgz  ## \"/tmp/Rtmpw8StBC/hg38_chr4.fa.bgz\"  ##  ## $snps ##                   chr4snps.bed.gz  ## \"/tmp/Rtmpw8StBC/chr4snps.bed.gz\"  ##  ## $rmsk ##                   rmsk_hg38.tsv.gz  ## \"/tmp/Rtmpw8StBC/rmsk_hg38.tsv.gz\" txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene  chr4snps <- import(fns$snps)  rmskhg38 <- read.table(fns$rmsk) rmskhg38 <- makeGRangesFromDataFrame(rmskhg38,   keep.extra.columns = TRUE,   starts.in.df.are.0based = TRUE ) wgs_bam <- fns$bams[1] rna_bam <- fns$bams[2] fafn <- fns$fasta fp <- FilterParam(   min_nucleotide_depth = 1,   min_base_quality = 30,   min_mapq = c(255, 30),   library_type = c(\"fr-first-strand\", \"genomic-unstranded\"),   trim_5p = 5,   trim_3p = 5,   indel_dist = 4,   homopolymer_len = 6,   max_mismatch_type = c(3, 3),   min_read_bqual = c(0.25, 20),   only_keep_variants = c(TRUE, FALSE) )  plps <- get_pileup(c(rna_bam, wgs_bam),   fafile = fafn,   chrom = \"chr4\",   filterParam = fp ) names(plps) <- c(\"rna\", \"dna\") plps ## $rna ## GRanges object with 547 ranges and 10 metadata columns: ##         seqnames    ranges strand |         Ref         Var      nRef ##            <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##     [1]     chr4     44338      - |           T          TA         0 ##     [2]     chr4    124820      + |           C          CA         3 ##     [3]     chr4    125213      + |           G          GC         3 ##     [4]     chr4    126106      + |           C          CT         0 ##     [5]     chr4    126885      + |           A          AG         9 ##     ...      ...       ...    ... .         ...         ...       ... ##   [543]     chr4    986676      - |           T          TC         0 ##   [544]     chr4    989824      + |           C          CT         1 ##   [545]     chr4    990589      + |           A          AC         1 ##   [546]     chr4    990981      + |           C          CT         0 ##   [547]     chr4    993342      + |           A          AG         0 ##              nVar        nA        nT        nC        nG        nN ##         <integer> <integer> <integer> <integer> <integer> <integer> ##     [1]         1         1         0         0         0         0 ##     [2]         1         1         0         3         0         0 ##     [3]         1         0         0         1         3         0 ##     [4]         1         0         1         0         0         0 ##     [5]         1         9         0         0         1         0 ##     ...       ...       ...       ...       ...       ...       ... ##   [543]         1         0         0         1         0         0 ##   [544]         1         0         1         1         0         0 ##   [545]         1         1         0         1         0         0 ##   [546]         1         0         1         0         0         0 ##   [547]         1         0         0         0         1         0 ##                nX ##         <integer> ##     [1]         0 ##     [2]         0 ##     [3]         0 ##     [4]         0 ##     [5]         1 ##     ...       ... ##   [543]         0 ##   [544]         0 ##   [545]         0 ##   [546]         0 ##   [547]         0 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome ##  ## $dna ## GRanges object with 547 ranges and 10 metadata columns: ##         seqnames    ranges strand |         Ref         Var      nRef ##            <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##     [1]     chr4     44338      - |           T           -         0 ##     [2]     chr4    124820      + |           C           -        20 ##     [3]     chr4    125213      + |           G           -         7 ##     [4]     chr4    126106      + |           C          CT        11 ##     [5]     chr4    126885      + |           A           -        13 ##     ...      ...       ...    ... .         ...         ...       ... ##   [543]     chr4    986676      - |           T           -         0 ##   [544]     chr4    989824      + |           C           -        10 ##   [545]     chr4    990589      + |           A           -        16 ##   [546]     chr4    990981      + |           C           -        15 ##   [547]     chr4    993342      + |           A           -        21 ##              nVar        nA        nT        nC        nG        nN ##         <integer> <integer> <integer> <integer> <integer> <integer> ##     [1]         0         0         0         0         0         0 ##     [2]         0         0         0        20         0         0 ##     [3]         0         0         0         0         7         0 ##     [4]         5         0         5        11         0         0 ##     [5]         0        13         0         0         0         0 ##     ...       ...       ...       ...       ...       ...       ... ##   [543]         0         0         0         0         0         0 ##   [544]         0         0         0        10         0         0 ##   [545]         0        16         0         0         0         0 ##   [546]         0         0         0        15         0         0 ##   [547]         0        21         0         0         0         0 ##                nX ##         <integer> ##     [1]         0 ##     [2]         2 ##     [3]         1 ##     [4]         2 ##     [5]         0 ##     ...       ... ##   [543]         0 ##   [544]         2 ##   [545]         6 ##   [546]         4 ##   [547]         4 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome se <- create_se(plps) se ## class: RangedSummarizedExperiment  ## dim: 547 2  ## metadata(0): ## assays(7): Var nRef ... nC nG ## rownames(547): chr4_44338_- chr4_124820_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(1): Ref ## colnames(2): rna dna ## colData names(1): sample to_keep <- (assay(se, \"nRef\")[, \"dna\"] >= 5 & assay(se, \"Var\")[, \"dna\"] == \"-\") se <- subsetByOverlaps(se, se[to_keep, ], ignore.strand = TRUE) nrow(se) ## [1] 197 se <- filter_multiallelic(se) se <- calc_edit_frequency(se) rowData(se) ## DataFrame with 197 rows and 2 columns ##                       Ref         Var ##               <character> <character> ## chr4_124820_+           C          CA ## chr4_125213_+           G          GC ## chr4_126885_+           A          AG ## chr4_126885_-           T          TC ## chr4_126955_+           A          AG ## ...                   ...         ... ## chr4_958447_+           C          CA ## chr4_989824_+           C          CT ## chr4_990589_+           A          AC ## chr4_990981_+           C          CT ## chr4_993342_+           A          AG se <- annot_from_gr(se, rmskhg38, cols_to_map = c(c(\"repName\", \"repClass\", \"repFamily\")))  rowData(se)[c(\"repName\", \"repFamily\")] ## DataFrame with 197 rows and 2 columns ##                   repName   repFamily ##               <character> <character> ## chr4_124820_+          NA          NA ## chr4_125213_+      MER21C        ERVL ## chr4_126885_+          NA          NA ## chr4_126885_-      AluSc5         Alu ## chr4_126955_+          NA          NA ## ...                   ...         ... ## chr4_958447_+          NA          NA ## chr4_989824_+          NA          NA ## chr4_990589_+          NA          NA ## chr4_990981_+          NA          NA ## chr4_993342_+          NA          NA se <- se[!rowData(se)$repFamily %in% c(\"Simple_repeat\", \"Low Complexity\")] se <- filter_clustered_variants(se, txdb, variant_dist = 100) ## Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 se ## class: RangedSummarizedExperiment  ## dim: 153 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(153): chr4_124820_+ chr4_125213_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(5): Ref Var repName repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx se <- filter_splice_variants(se, txdb) ## Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 se ## class: RangedSummarizedExperiment  ## dim: 146 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(146): chr4_124820_+ chr4_125213_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(5): Ref Var repName repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx se <- annot_from_gr(se, chr4snps, \"name\") rowData(se)[c(\"name\")] ## DataFrame with 146 rows and 1 column ##                       name ##                <character> ## chr4_124820_+ rs1553807640 ## chr4_125213_+ rs1286128437 ## chr4_126885_+           NA ## chr4_126885_-           NA ## chr4_126955_+           NA ## ...                    ... ## chr4_958447_+ rs1052651854 ## chr4_989824_+   rs73219719 ## chr4_990589_+           NA ## chr4_990981_+  rs116514520 ## chr4_993342_+           NA se <- se[is.na(rowData(se)$name), ] se ## class: RangedSummarizedExperiment  ## dim: 86 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(86): chr4_126885_+ chr4_126885_- ... chr4_990589_+ ##   chr4_993342_+ ## rowData names(6): Ref Var ... repFamily name ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx to_keep <- assay(se, \"edit_freq\")[, 1] > 0.05 se <- se[to_keep, ]  se <- se[assay(se, \"nVar\")[, 1] >= 2] stopifnot(all(rowData(se)$Var == \"AG\")) rowRanges(se) ## GRanges object with 10 ranges and 6 metadata columns: ##                 seqnames    ranges strand |         Ref         Var ##                    <Rle> <IRanges>  <Rle> | <character> <character> ##   chr4_134353_+     chr4    134353      + |           A          AG ##   chr4_378011_+     chr4    378011      + |           A          AG ##   chr4_378018_+     chr4    378018      + |           A          AG ##   chr4_378090_+     chr4    378090      + |           A          AG ##   chr4_378362_+     chr4    378362      + |           A          AG ##   chr4_378368_+     chr4    378368      + |           A          AG ##   chr4_378409_+     chr4    378409      + |           A          AG ##   chr4_380392_+     chr4    380392      + |           A          AG ##   chr4_778739_-     chr4    778739      - |           A          AG ##   chr4_778780_-     chr4    778780      - |           A          AG ##                     repName    repClass   repFamily        name ##                 <character> <character> <character> <character> ##   chr4_134353_+        <NA>        <NA>        <NA>        <NA> ##   chr4_378011_+       AluSc        SINE         Alu        <NA> ##   chr4_378018_+       AluSc        SINE         Alu        <NA> ##   chr4_378090_+       AluSc        SINE         Alu        <NA> ##   chr4_378362_+        <NA>        <NA>        <NA>        <NA> ##   chr4_378368_+        <NA>        <NA>        <NA>        <NA> ##   chr4_378409_+        <NA>        <NA>        <NA>        <NA> ##   chr4_380392_+      AluSq2        SINE         Alu        <NA> ##   chr4_778739_-       AluSg        SINE         Alu        <NA> ##   chr4_778780_-       AluSg        SINE         Alu        <NA> ##   ------- ##   seqinfo: 194 sequences from an unspecified genome unlink(data_dir) sessionInfo() ## R Under development (unstable) (2023-01-18 r83635) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] TxDb.Hsapiens.UCSC.hg38.knownGene_3.16.0 ##  [2] rtracklayer_1.59.1                       ##  [3] SummarizedExperiment_1.29.1              ##  [4] MatrixGenerics_1.11.0                    ##  [5] matrixStats_0.63.0                       ##  [6] GenomicFeatures_1.51.2                   ##  [7] AnnotationDbi_1.61.0                     ##  [8] Biobase_2.59.0                           ##  [9] GenomicRanges_1.51.4                     ## [10] GenomeInfoDb_1.35.13                     ## [11] IRanges_2.33.0                           ## [12] S4Vectors_0.37.3                         ## [13] BiocGenerics_0.45.0                      ## [14] raer_0.99.0                              ## [15] BiocStyle_2.27.1                         ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.0         dplyr_1.0.10             ##  [3] blob_1.2.3               R.utils_2.12.2           ##  [5] filelock_1.0.2           Biostrings_2.67.0        ##  [7] bitops_1.0-7             fastmap_1.1.0            ##  [9] RCurl_1.98-1.9           BiocFileCache_2.7.1      ## [11] GenomicAlignments_1.35.0 XML_3.99-0.13            ## [13] digest_0.6.31            lifecycle_1.0.3          ## [15] ellipsis_0.3.2           KEGGREST_1.39.0          ## [17] RSQLite_2.2.20           magrittr_2.0.3           ## [19] compiler_4.3.0           rlang_1.0.6              ## [21] sass_0.4.5               progress_1.2.2           ## [23] tools_4.3.0              utf8_1.2.2               ## [25] yaml_2.3.7               data.table_1.14.6        ## [27] knitr_1.42               prettyunits_1.1.1        ## [29] curl_5.0.0               bit_4.0.5                ## [31] DelayedArray_0.25.0      xml2_1.3.3               ## [33] BiocParallel_1.33.9      purrr_1.0.1              ## [35] R.oo_1.25.0              desc_1.4.2               ## [37] grid_4.3.0               fansi_1.0.4              ## [39] biomaRt_2.55.0           cli_3.6.0                ## [41] rmarkdown_2.20           crayon_1.5.2             ## [43] ragg_1.2.5               generics_0.1.3           ## [45] httr_1.4.4               rjson_0.2.21             ## [47] DBI_1.1.3                cachem_1.0.6             ## [49] stringr_1.5.0            zlibbioc_1.45.0          ## [51] assertthat_0.2.1         parallel_4.3.0           ## [53] BiocManager_1.30.19      XVector_0.39.0           ## [55] restfulr_0.0.15          vctrs_0.5.2              ## [57] Matrix_1.5-3             jsonlite_1.8.4           ## [59] bookdown_0.32            hms_1.1.2                ## [61] bit64_4.0.5              systemfonts_1.0.4        ## [63] jquerylib_0.1.4          glue_1.6.2               ## [65] pkgdown_2.0.7            codetools_0.2-18         ## [67] stringi_1.7.12           BiocIO_1.9.2             ## [69] tibble_3.1.8             pillar_1.8.1             ## [71] rappdirs_0.3.3           htmltools_0.5.4          ## [73] GenomeInfoDbData_1.2.9   BSgenome_1.67.3          ## [75] R6_2.5.1                 dbplyr_2.3.0             ## [77] textshaping_0.3.6        rprojroot_2.0.3          ## [79] evaluate_0.20            lattice_0.20-45          ## [81] R.methodsS3_1.8.2        png_0.1-8                ## [83] Rsamtools_2.15.1         memoise_2.0.1            ## [85] bslib_0.4.2              Rcpp_1.0.10              ## [87] xfun_0.36                fs_1.6.0                 ## [89] pkgconfig_2.0.3"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"differential-editing-tutorial","dir":"Articles","previous_headings":"","what":"Differential Editing tutorial","title":"Introducing the raer package","text":"vignette demonstrate identify RNA editing sites condition-specific editing frequencies using raer package.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"set-up","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Set up","title":"Introducing the raer package","text":"vignette public RNA-seq dataset analyzed, GSE99249, consists ADAR1 mutants control human cell lines, conditionally treated Interferon-Beta. simplicity examine ADAR1 WT KO samples treated IFN-B, triplicate samples. Aligned BAM files necessary files preprocessed vignette. files occupy ~250 Mb space default stored temporary directory. Change data_dir variable valid file path keep files reuse. Next ’ll collect vector containing paths BAM file BAM files subset full BAM files, containing alignments chromosome 18. Next ’ll need FASTA file quantify editing sites. ’ll use FASTA file containing chromosome 18 demo. fasta can compressed. Lastly, ’ll use BED file containing coordinates known human editing sites REDIPortal database. file can also optionally compressed.","code":"library(raer) library(SummarizedExperiment) library(DESeq2) library(ComplexHeatmap) library(viridis) library(stringr) data_dir <- tempdir() fns <- download_GSE99249(data_dir) bam_files <- fns$bams bam_files[1:2] ##                   SRR5564260_dedup_sorted.bam  ## \"/tmp/RtmpRXlsko/SRR5564260_dedup_sorted.bam\"  ##                   SRR5564261_dedup_sorted.bam  ## \"/tmp/RtmpRXlsko/SRR5564261_dedup_sorted.bam\" fafn <- fns$fasta fafn ##                   chr18.fasta.bgz  ## \"/tmp/RtmpRXlsko/chr18.fasta.bgz\" bedfn <- fns$bed bedfn ##                   rediportal_hg38_chr18.bed.gz  ## \"/tmp/RtmpRXlsko/rediportal_hg38_chr18.bed.gz\""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"generate-editing-site-read-counts","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Generate editing site read counts","title":"Introducing the raer package","text":"get_pileup() function calculate base counts across multiple BAM files. base counts returned list GRanges objects bam file. FilterParam() function provides numerous filters exclude reads bases based commonly used filters detecting RNA-editing events. Specific regions can queried using region argument, specific positions can queried providing bedfile path BED-file. Internally, get_pileup() generate pileups memory. However, files can also stored tabix-indexed format, later retrieval, querying specific regions. base counts returned stand specific fashion depending library-type parameter. Ref Var bases reference strand. Pileups multiple BAM files can stored summarizedExperiment object, permits comparisons across sample. rowData() rowRanges() slots can populated information related editing site, similarly colData() slot can used store sample metadata. summarizedExperiment objectcan also interface derivative classes, singleCellExperiment(). column pileup can stored assay, can specified assay_cols parameter Next add sample metadata summarizedExperiment, used conduct differential editing analysis.","code":"fp <- FilterParam(   only_keep_variants = TRUE,   trim_5p = 5,   trim_3p = 5,   min_base_quality = 30L,   min_mapq = 255L,   library_type = \"fr-first-strand\",   min_splice_overhang = 10,   indel_dist = 4,    max_mismatch_type = c(3, 3),  )  plps <- get_pileup(bam_files,   fafile = fafn,   bedfile = bedfn,   region = \"chr18\",   filterParam = fp )  plps[[1]] ## GRanges object with 4817 ranges and 10 metadata columns: ##          seqnames    ranges strand |         Ref         Var      nRef ##             <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##      [1]    chr18    171983      + |           A           -         0 ##      [2]    chr18    171986      + |           A           -         0 ##      [3]    chr18    178188      + |           A           -         1 ##      [4]    chr18    184747      + |           A           -         0 ##      [5]    chr18    185191      + |           A           -         1 ##      ...      ...       ...    ... .         ...         ...       ... ##   [4813]    chr18  80159225      - |           A           -         1 ##   [4814]    chr18  80159230      + |           A           -         2 ##   [4815]    chr18  80159249      + |           A           -         2 ##   [4816]    chr18  80159250      + |           A           -         3 ##   [4817]    chr18  80159262      + |           A           -         2 ##               nVar        nA        nT        nC        nG        nN ##          <integer> <integer> <integer> <integer> <integer> <integer> ##      [1]         0         0         0         0         0         0 ##      [2]         0         0         0         0         0         0 ##      [3]         0         1         0         0         0         0 ##      [4]         0         0         0         0         0         0 ##      [5]         0         1         0         0         0         0 ##      ...       ...       ...       ...       ...       ...       ... ##   [4813]         0         1         0         0         0         0 ##   [4814]         0         2         0         0         0         0 ##   [4815]         0         2         0         0         0         0 ##   [4816]         0         3         0         0         0         0 ##   [4817]         0         2         0         0         0         0 ##                 nX ##          <integer> ##      [1]         0 ##      [2]         0 ##      [3]         0 ##      [4]         1 ##      [5]         0 ##      ...       ... ##   [4813]         1 ##   [4814]         0 ##   [4815]         1 ##   [4816]         0 ##   [4817]         1 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome names(plps) <- names(bam_files) se <- create_se(plps) se ## class: RangedSummarizedExperiment  ## dim: 4817 6  ## metadata(0): ## assays(7): Var nRef ... nC nG ## rownames(4817): chr18_171983_+ chr18_171986_+ ... ##   chr18_80159250_+ chr18_80159262_+ ## rowData names(1): Ref ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(1): sample colData(se)$genotype_treatment <- rep(   c(     \"ADAR1KO Interferon beta\",     \"Wildtype Interferon beta\"   ),   each = 3 )  colData(se)$genotype <- rep(   c(     \"ADAR1KO\",     \"Wildtype\"   ),   each = 3 ) colData(se) ## DataFrame with 6 rows and 3 columns ##                                             sample     genotype_treatment ##                                        <character>            <character> ## SRR5564260_dedup_sorted.bam SRR5564260_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564261_dedup_sorted.bam SRR5564261_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564269_dedup_sorted.bam SRR5564269_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564270_dedup_sorted.bam SRR5564270_dedup_sor.. Wildtype Interferon .. ## SRR5564271_dedup_sorted.bam SRR5564271_dedup_sor.. Wildtype Interferon .. ## SRR5564277_dedup_sorted.bam SRR5564277_dedup_sor.. Wildtype Interferon .. ##                                genotype ##                             <character> ## SRR5564260_dedup_sorted.bam     ADAR1KO ## SRR5564261_dedup_sorted.bam     ADAR1KO ## SRR5564269_dedup_sorted.bam     ADAR1KO ## SRR5564270_dedup_sorted.bam    Wildtype ## SRR5564271_dedup_sorted.bam    Wildtype ## SRR5564277_dedup_sorted.bam    Wildtype"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"prepare-for-differential-editing","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Prepare for differential editing","title":"Introducing the raer package","text":"next use calc_edit_frequency function identify percent edits position sample. drop = TRUE argument also exclude sites without adenosine. editing frequencies used differential editing analysis, conducted using raw counts, however useful filtering visualization. can next subset summarizedExperiment object exclude low frequency editing events. analysis require editing site shows editing least 1 sample, least 5 counts sample. object filtered, can prepare DE. means making new object contains assay read counts alt ref alleles single matrix.","code":"se_filtered <- calc_edit_frequency(se,   edit_from = \"A\",   edit_to = \"G\",   drop = TRUE ) has_editing <- rowSums(assay(se_filtered, \"edit_freq\") > 0) >= 1 has_depth <- rowSums(((assay(se_filtered, \"nRef\") +   assay(se_filtered, \"nVar\")) >= 5)) == ncol(se_filtered)  se_filtered <- se_filtered[has_editing & has_depth, ] se_filtered ## class: RangedSummarizedExperiment  ## dim: 462 6  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(462): chr18_204625_+ chr18_204626_+ ... chr18_79984359_- ##   chr18_80039299_+ ## rowData names(1): Ref ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(5): sample genotype_treatment genotype n_sites ##   edit_idx deobj <- prep_for_de(se_filtered,   min_prop = 0.1,   max_prop = 0.9,   min_samples = 3 )  assay(deobj, \"counts\")[1:3, ] ##                  SRR5564260_dedup_sorted.bam_ref ## chr18_692390_-                                 5 ## chr18_21631169_+                               8 ## chr18_21631204_+                              14 ##                  SRR5564261_dedup_sorted.bam_ref ## chr18_692390_-                                11 ## chr18_21631169_+                              10 ## chr18_21631204_+                              12 ##                  SRR5564269_dedup_sorted.bam_ref ## chr18_692390_-                                11 ## chr18_21631169_+                              15 ## chr18_21631204_+                              17 ##                  SRR5564270_dedup_sorted.bam_ref ## chr18_692390_-                                16 ## chr18_21631169_+                              10 ## chr18_21631204_+                               6 ##                  SRR5564271_dedup_sorted.bam_ref ## chr18_692390_-                                 9 ## chr18_21631169_+                               3 ## chr18_21631204_+                               6 ##                  SRR5564277_dedup_sorted.bam_ref ## chr18_692390_-                                 6 ## chr18_21631169_+                               4 ## chr18_21631204_+                              11 ##                  SRR5564260_dedup_sorted.bam_alt ## chr18_692390_-                                 0 ## chr18_21631169_+                               0 ## chr18_21631204_+                               0 ##                  SRR5564261_dedup_sorted.bam_alt ## chr18_692390_-                                 0 ## chr18_21631169_+                               0 ## chr18_21631204_+                               0 ##                  SRR5564269_dedup_sorted.bam_alt ## chr18_692390_-                                 0 ## chr18_21631169_+                               0 ## chr18_21631204_+                               0 ##                  SRR5564270_dedup_sorted.bam_alt ## chr18_692390_-                                 4 ## chr18_21631169_+                               4 ## chr18_21631204_+                               8 ##                  SRR5564271_dedup_sorted.bam_alt ## chr18_692390_-                                 1 ## chr18_21631169_+                               3 ## chr18_21631204_+                               3 ##                  SRR5564277_dedup_sorted.bam_alt ## chr18_692390_-                                 1 ## chr18_21631169_+                               4 ## chr18_21631204_+                               3"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing-deseq2","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Run differential editing (DESeq2)","title":"Introducing the raer package","text":"stage, can use object perform DE can continue pre built functions differential editing, use design design <- ~0 + condition:sample + condition:count. samples, can leave combine sample name shows treatment control. results identical close. hands, genes come , p values log fold change values slightly different. probably best update levels object, don’t, still work. run using DESeq2, set type = DESeq2 de_results function. function requires specify control treatment condition column deobj. edgeR also supported. returns list containing dds object, full results, significant results, model matrix.","code":"de_results <- perform_de(deobj,   type = \"DESeq2\",   sample_col = \"sample\",   condition_col = \"genotype\",   condition_control = \"Wildtype\",   condition_treatment = \"ADAR1KO\" ) de_results$sig_results[1:5, ] ##                   baseMean log2FoldChange     lfcSE      stat ## chr18_35247800_+  7.750000      -2.833822 1.2164628 -2.329559 ## chr18_23296417_- 12.500000      -2.987656 0.8909907 -3.353185 ## chr18_35263158_-  8.583333      -3.020011 1.2542482 -2.407825 ## chr18_692390_-    5.333333      -3.127496 1.4533676 -2.151896 ## chr18_23296402_- 11.666667      -3.183141 1.3364582 -2.381774 ##                        pvalue        padj ## chr18_35247800_+ 0.0198294511 0.023434806 ## chr18_23296417_- 0.0007988734 0.001730892 ## chr18_35263158_- 0.0160478565 0.020862213 ## chr18_692390_-   0.0314055488 0.034994754 ## chr18_23296402_- 0.0172294773 0.020998425 top_sites <- rownames(de_results$sig_results)[1:20]  Heatmap(assay(se_filtered, \"edit_freq\")[top_sites, ],   col = viridis(100),   column_labels = se_filtered$genotype_treatment ) unlink(data_dir) sessionInfo() ## R Under development (unstable) (2023-01-18 r83635) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] stringr_1.5.0               viridis_0.6.2               ##  [3] viridisLite_0.4.1           ComplexHeatmap_2.15.0       ##  [5] DESeq2_1.39.4               SummarizedExperiment_1.29.1 ##  [7] Biobase_2.59.0              GenomicRanges_1.51.4        ##  [9] GenomeInfoDb_1.35.13        IRanges_2.33.0              ## [11] S4Vectors_0.37.3            BiocGenerics_0.45.0         ## [13] MatrixGenerics_1.11.0       matrixStats_0.63.0          ## [15] raer_0.99.0                 BiocStyle_2.27.1            ##  ## loaded via a namespace (and not attached): ##   [1] DBI_1.1.3                bitops_1.0-7             ##   [3] gridExtra_2.3            biomaRt_2.55.0           ##   [5] rlang_1.0.6              magrittr_2.0.3           ##   [7] clue_0.3-63              GetoptLong_1.0.5         ##   [9] compiler_4.3.0           RSQLite_2.2.20           ##  [11] GenomicFeatures_1.51.2   png_0.1-8                ##  [13] systemfonts_1.0.4        vctrs_0.5.2              ##  [15] shape_1.4.6              pkgconfig_2.0.3          ##  [17] crayon_1.5.2             fastmap_1.1.0            ##  [19] dbplyr_2.3.0             XVector_0.39.0           ##  [21] ellipsis_0.3.2           utf8_1.2.2               ##  [23] Rsamtools_2.15.1         rmarkdown_2.20           ##  [25] ragg_1.2.5               purrr_1.0.1              ##  [27] bit_4.0.5                xfun_0.36                ##  [29] zlibbioc_1.45.0          cachem_1.0.6             ##  [31] jsonlite_1.8.4           progress_1.2.2           ##  [33] blob_1.2.3               highr_0.10               ##  [35] DelayedArray_0.25.0      BiocParallel_1.33.9      ##  [37] cluster_2.1.4            parallel_4.3.0           ##  [39] prettyunits_1.1.1        R6_2.5.1                 ##  [41] RColorBrewer_1.1-3       bslib_0.4.2              ##  [43] stringi_1.7.12           rtracklayer_1.59.1       ##  [45] jquerylib_0.1.4          iterators_1.0.14         ##  [47] Rcpp_1.0.10              bookdown_0.32            ##  [49] assertthat_0.2.1         knitr_1.42               ##  [51] R.utils_2.12.2           Matrix_1.5-3             ##  [53] tidyselect_1.2.0         yaml_2.3.7               ##  [55] doParallel_1.0.17        codetools_0.2-18         ##  [57] curl_5.0.0               lattice_0.20-45          ##  [59] tibble_3.1.8             KEGGREST_1.39.0          ##  [61] evaluate_0.20            desc_1.4.2               ##  [63] BiocFileCache_2.7.1      xml2_1.3.3               ##  [65] circlize_0.4.15          Biostrings_2.67.0        ##  [67] pillar_1.8.1             BiocManager_1.30.19      ##  [69] filelock_1.0.2           foreach_1.5.2            ##  [71] generics_0.1.3           rprojroot_2.0.3          ##  [73] RCurl_1.98-1.9           hms_1.1.2                ##  [75] ggplot2_3.4.0            munsell_0.5.0            ##  [77] scales_1.2.1             glue_1.6.2               ##  [79] tools_4.3.0              BiocIO_1.9.2             ##  [81] data.table_1.14.6        locfit_1.5-9.7           ##  [83] BSgenome_1.67.3          GenomicAlignments_1.35.0 ##  [85] fs_1.6.0                 XML_3.99-0.13            ##  [87] Cairo_1.6-0              AnnotationDbi_1.61.0     ##  [89] colorspace_2.1-0         GenomeInfoDbData_1.2.9   ##  [91] restfulr_0.0.15          cli_3.6.0                ##  [93] rappdirs_0.3.3           textshaping_0.3.6        ##  [95] fansi_1.0.4              dplyr_1.0.10             ##  [97] gtable_0.3.1             R.methodsS3_1.8.2        ##  [99] sass_0.4.5               digest_0.6.31            ## [101] rjson_0.2.21             memoise_2.0.1            ## [103] htmltools_0.5.4          pkgdown_2.0.7            ## [105] R.oo_1.25.0              lifecycle_1.0.3          ## [107] httr_1.4.4               GlobalOptions_0.1.2      ## [109] bit64_4.0.5"},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"characterizing-rna-editing-sites-in-single-cell-data","dir":"Articles","previous_headings":"","what":"Characterizing RNA editing sites in single cell data","title":"Identifying RNA editing sites in droplet single cell datasets","text":"vignette demonstrate use raer package examine RNA editing droplet-based single cell RNA-seq data.","code":""},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"preprocessing","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Preprocessing","title":"Identifying RNA editing sites in droplet single cell datasets","text":"example analysis use single cell dataset containing human PBMC cells 10x Genomics. single cell data processed using cellranger pipeline. BAM file contains tag (CB) indicates cell-barcode associated alignment, well tag containing inferred UMI sequence (UB).","code":""},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"single-cell-editing-analysis","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Single cell editing analysis","title":"Identifying RNA editing sites in droplet single cell datasets","text":"subset human PBMC scRNA-seq dataset 10x Genomics, along needed files can downloaded using download_human_pbmc(). Next ’ll load SingleCellExperiment cell-type annotations.  Next ’ll select editing sites query. analysis use sites Rediportal database. editing sites interest known, one option perform two pass operation. First, identify editing sites treating data bulk-RNA-seq experiment, using example get_pileup(). filter sites establish set high confidence sites query single cell mode. raer provides function, pileup_cells(), quantify edited non-edited UMI counts per cell barcode, collect site counts SingleCellExperiment. sites quantified specified using custom formatted GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named ref alt containing reference alternate base query. case interested ->editing, set ref alt G. Note ref alt bases reference strand. - strand interval bases complement + strand bases. cell_barcodes argument specifies cell-barcodes quantified. typically set filtered set barcodes corresponding cell-containing droplets. pileup_cells() accepts FilterParam() class specifying performing read site filtering. Note pileup_cells() strand sensitive default, important ensure strand input sites correctly annotated, library type correct type data interest. 10x Genomics data, library type set fr-second-strand, indicating strand alignments matches strand RNA. Note bam_flags set include duplicate reads default. bamfile tag UMI sequence, can supplied umi_tag argument count 1 read UMI position. strategy allows reads UMI counted multiple independent sites enabling recovery sequence variants counting 1 read per UMI. Processing time can reduced operating parallel across chromosomes, supplying BiocParallel backend BPPARAM argument (e.g. MultiCoreParam()). Next ’ll filter pileups find sites least 5 cells editing event, add editing information SingleCellExperiment altExp(). editing sites added gene expression SingleCellExperiment can use plotting methods previously developed single cell analysis. ’ll visualize editing sites highest edited read counts.      Alternatively can view top edited sites Heatmap, showing average number edited reads per site cell type.  Various tools Bioconductor can used provide additional annotation information RNA editing site. VariantAnnotation package provides powerful functionality annotate location editing site, provide information alterations codons splice sites.","code":"data_dir <- tempdir()  fns <- download_human_pbmc(data_dir) fns ## $bam ##                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam  ## \"/tmp/RtmpR4BR0c/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam\"  ##  ## $bai ##                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai  ## \"/tmp/RtmpR4BR0c/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai\"  ##  ## $edit_sites ##                   rediportal_chr16.bed.gz  ## \"/tmp/RtmpR4BR0c/rediportal_chr16.bed.gz\"  ##  ## $sce ##                   sce.rds  ## \"/tmp/RtmpR4BR0c/sce.rds\" bam_fn <- fns$bam bed_fn <- fns$edit_sites sce <- readRDS(fns$sce) sce ## class: SingleCellExperiment  ## dim: 36601 500  ## metadata(2): Samples mkrs ## assays(2): counts logcounts ## rownames(36601): MIR1302-2HG FAM138A ... AC007325.4 AC007325.2 ## rowData names(3): ID Symbol Type ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(8): Sample Barcode ... r celltype ## reducedDimNames(2): PCA UMAP ## mainExpName: NULL ## altExpNames(0): plotUMAP(sce, colour_by = \"celltype\") gr <- import(bed_fn) gr$name <- NULL gr$score <- NULL gr$ref <- \"A\" gr$alt <- \"G\" gr ## GRanges object with 785208 ranges and 2 metadata columns: ##            seqnames    ranges strand |         ref         alt ##               <Rle> <IRanges>  <Rle> | <character> <character> ##        [1]    chr16     22083      - |           A           G ##        [2]    chr16     22101      - |           A           G ##        [3]    chr16     22107      - |           A           G ##        [4]    chr16     22113      - |           A           G ##        [5]    chr16     22114      - |           A           G ##        ...      ...       ...    ... .         ...         ... ##   [785204]    chr16  90219996      + |           A           G ##   [785205]    chr16  90220035      + |           A           G ##   [785206]    chr16  90220081      + |           A           G ##   [785207]    chr16  90220095      + |           A           G ##   [785208]    chr16  90220135      + |           A           G ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths outdir <- file.path(tempdir(), \"sc_edits\") cbs <- colnames(sce) e_sce <- pileup_cells(   bamfile = bam_fn,   sites = gr,   cell_barcodes = cbs,   output_directory = outdir,   cb_tag = \"CB\",   umi_tag = \"UB\",   fp = FilterParam(     min_base_quality = 30L,     library_type = \"fr-second-strand\",     min_variant_reads = 1L,     trim_5p = 5L,     trim_3p = 5L),   verbose = FALSE) e_sce ## class: SingleCellExperiment  ## dim: 4451 500  ## metadata(0): ## assays(2): nRef nVar ## rownames(4451): chr16_83540_1_A_G chr16_83621_1_A_G ... ##   chr16_31453268_2_A_G chr16_31454303_2_A_G ## rowData names(2): ref alt ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(1): id ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): dir(outdir) ## [1] \"barcodes.txt.gz\" \"counts.mtx.gz\"   \"sites.txt.gz\" e_sce <- e_sce[rowSums(assays(e_sce)$nVar > 0) >= 5, ] e_sce <- calc_edit_frequency(e_sce, replace_na = FALSE) altExp(sce) <- e_sce[, colnames(sce)] to_plot <- rownames(altExp(sce))[order(rowSums(assay(altExp(sce), \"nVar\")), decreasing = TRUE)]  lapply(to_plot[1:5], function(x) {   plotUMAP(sce, colour_by = x, by_exprs_values = \"nVar\") }) ## [[1]] ##  ## [[2]] ##  ## [[3]] ##  ## [[4]] ##  ## [[5]] altExp(sce)$cell_type <- sce$celltype  plotGroupedHeatmap(altExp(sce),   features = to_plot[1:25],   group = \"cell_type\",   exprs_values = \"nVar\" ) sessionInfo() ## R Under development (unstable) (2023-01-18 r83635) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] rtracklayer_1.59.1          Rsamtools_2.15.1            ##  [3] Biostrings_2.67.0           XVector_0.39.0              ##  [5] scater_1.27.2               ggplot2_3.4.0               ##  [7] scuttle_1.9.4               SingleCellExperiment_1.21.0 ##  [9] SummarizedExperiment_1.29.1 Biobase_2.59.0              ## [11] GenomicRanges_1.51.4        GenomeInfoDb_1.35.13        ## [13] IRanges_2.33.0              S4Vectors_0.37.3            ## [15] BiocGenerics_0.45.0         MatrixGenerics_1.11.0       ## [17] matrixStats_0.63.0          raer_0.99.0                 ## [19] BiocStyle_2.27.1            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3        jsonlite_1.8.4            ##   [3] magrittr_2.0.3            ggbeeswarm_0.7.1          ##   [5] GenomicFeatures_1.51.2    farver_2.1.1              ##   [7] rmarkdown_2.20            fs_1.6.0                  ##   [9] BiocIO_1.9.2              zlibbioc_1.45.0           ##  [11] ragg_1.2.5                vctrs_0.5.2               ##  [13] memoise_2.0.1             DelayedMatrixStats_1.21.0 ##  [15] RCurl_1.98-1.9            htmltools_0.5.4           ##  [17] progress_1.2.2            curl_5.0.0                ##  [19] BiocNeighbors_1.17.1      sass_0.4.5                ##  [21] bslib_0.4.2               desc_1.4.2                ##  [23] cachem_1.0.6              GenomicAlignments_1.35.0  ##  [25] lifecycle_1.0.3           pkgconfig_2.0.3           ##  [27] rsvd_1.0.5                Matrix_1.5-3              ##  [29] R6_2.5.1                  fastmap_1.1.0             ##  [31] GenomeInfoDbData_1.2.9    digest_0.6.31             ##  [33] colorspace_2.1-0          AnnotationDbi_1.61.0      ##  [35] rprojroot_2.0.3           irlba_2.3.5.1             ##  [37] textshaping_0.3.6         RSQLite_2.2.20            ##  [39] beachmat_2.15.0           filelock_1.0.2            ##  [41] labeling_0.4.2            fansi_1.0.4               ##  [43] httr_1.4.4                compiler_4.3.0            ##  [45] bit64_4.0.5               withr_2.5.0               ##  [47] BiocParallel_1.33.9       viridis_0.6.2             ##  [49] DBI_1.1.3                 highr_0.10                ##  [51] R.utils_2.12.2            biomaRt_2.55.0            ##  [53] rappdirs_0.3.3            DelayedArray_0.25.0       ##  [55] rjson_0.2.21              tools_4.3.0               ##  [57] vipor_0.4.5               beeswarm_0.4.0            ##  [59] R.oo_1.25.0               glue_1.6.2                ##  [61] restfulr_0.0.15           grid_4.3.0                ##  [63] generics_0.1.3            gtable_0.3.1              ##  [65] BSgenome_1.67.3           R.methodsS3_1.8.2         ##  [67] data.table_1.14.6         hms_1.1.2                 ##  [69] BiocSingular_1.15.0       ScaledMatrix_1.7.0        ##  [71] xml2_1.3.3                utf8_1.2.2                ##  [73] ggrepel_0.9.2             pillar_1.8.1              ##  [75] stringr_1.5.0             dplyr_1.0.10              ##  [77] BiocFileCache_2.7.1       lattice_0.20-45           ##  [79] bit_4.0.5                 tidyselect_1.2.0          ##  [81] knitr_1.42                gridExtra_2.3             ##  [83] bookdown_0.32             xfun_0.36                 ##  [85] pheatmap_1.0.12           stringi_1.7.12            ##  [87] yaml_2.3.7                evaluate_0.20             ##  [89] codetools_0.2-18          tibble_3.1.8              ##  [91] BiocManager_1.30.19       cli_3.6.0                 ##  [93] systemfonts_1.0.4         munsell_0.5.0             ##  [95] jquerylib_0.1.4           Rcpp_1.0.10               ##  [97] dbplyr_2.3.0              png_0.1-8                 ##  [99] XML_3.99-0.13             parallel_4.3.0            ## [101] ellipsis_0.3.2            pkgdown_2.0.7             ## [103] assertthat_0.2.1          blob_1.2.3                ## [105] prettyunits_1.1.1         sparseMatrixStats_1.11.1  ## [107] bitops_1.0-7              viridisLite_0.4.1         ## [109] scales_1.2.1              purrr_1.0.1               ## [111] crayon_1.5.2              rlang_1.0.6               ## [113] KEGGREST_1.39.0"},{"path":"https://rnabioco.github.io/raer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Riemondy. Author, maintainer. Kristen Wells-Wrasman. Author. Ryan Sheridan. Contributor. Jay Hesselberth. Contributor. . Copyright holder, funder.","code":""},{"path":"https://rnabioco.github.io/raer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemondy K, Wells-Wrasman K (2023). raer: RNA editing tools R. https://rnabioco.github.io/raer, https://github.com/rnabioco/raer.","code":"@Manual{,   title = {raer: RNA editing tools in R},   author = {Kent Riemondy and Kristen Wells-Wrasman},   year = {2023},   note = {https://rnabioco.github.io/raer, https://github.com/rnabioco/raer}, }"},{"path":"https://rnabioco.github.io/raer/index.html","id":"raer-","dir":"","previous_headings":"","what":"RNA editing tools in R","title":"RNA editing tools in R","text":"raer R package facilitates rapid interactive analysis RNA editing R bioconductor ecosystem. raer active development functionality may change","code":""},{"path":"https://rnabioco.github.io/raer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RNA editing tools in R","text":"can install development version raer GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rnabioco/raer\")"},{"path":"https://rnabioco.github.io/raer/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"RNA editing tools in R","text":"raer package provides methods compute per site read count summaries bam files, either known sites, detected sites. FilterParam() class holds multiple options customizing output get_pileup(). Multiple bam files can processed, enables rapid comparisons RNA-Seq vs. WGS WXS data, RNA-Seq vs RNA-seq (ADAR WT VS ADAR KO). facilitate comparisons across groups, pileups can stored RangedSummarizedExperiment.","code":"library(raer) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") bedfn <- raer_example(\"regions.bed\")  res <- get_pileup(bamfn, fafn, bedfile = bedfn) res[1:5, ] #> GRanges object with 5 ranges and 10 metadata columns: #>       seqnames    ranges strand |         Ref         Var      nRef      nVar #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>   [1]     SSR3       201      - |           A           -        14         0 #>   [2]     SSR3       202      - |           T           -        14         0 #>   [3]     SSR3       203      - |           T           -        14         0 #>   [4]     SSR3       204      - |           T           -        15         0 #>   [5]     SSR3       205      - |           T           -        16         0 #>              nA        nT        nC        nG        nN        nX #>       <integer> <integer> <integer> <integer> <integer> <integer> #>   [1]        14         0         0         0         0         2 #>   [2]         0        14         0         0         0         2 #>   [3]         0        14         0         0         0         2 #>   [4]         0        15         0         0         0         1 #>   [5]         0        16         0         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome fp <- FilterParam(only_keep_variants = TRUE) res <- get_pileup(bamfn, fafn, filterParam = fp) res #> GRanges object with 31 ranges and 10 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       228      - |           A          AG        13         1 #>    [3]     SSR3       244      - |           A          AG        18         1 #>    [4]     SSR3       254      - |           A          AG        18         1 #>    [5]     SSR3       258      - |           G          GA         8        10 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [27]     DHFR       300      - |           A          AG        56         1 #>   [28]     DHFR       332      - |           A          AG        55         1 #>   [29]     DHFR       336      - |           G          GT        51         1 #>   [30]     DHFR       430      - |           A          AT        37         1 #>   [31]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN        nX #>        <integer> <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0         6 #>    [2]        13         0         0         1         0         4 #>    [3]        18         0         0         1         0         1 #>    [4]        18         0         0         1         0         1 #>    [5]        10         0         0         8         0         2 #>    ...       ...       ...       ...       ...       ...       ... #>   [27]        56         0         0         1         0         4 #>   [28]        55         0         0         1         0         2 #>   [29]         0         1         0        51         0         5 #>   [30]        37         1         0         0         0         5 #>   [31]         0        35         1         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome fp <- FilterParam(   only_keep_variants = TRUE,   library_type = \"fr-first-strand\",   min_nucleotide_depth = 2 )  plps <- get_pileup(c(bam2fn, bamfn),   fafn,   filterParam = fp ) plps #> [[1]] #> GRanges object with 74 ranges and 10 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T           -        15         0 #>    [2]     SSR3       125      - |           C          CG        21         1 #>    [3]     SSR3       156      - |           C          CA        25         1 #>    [4]     SSR3       176      - |           A          AG         8        16 #>    [5]     SSR3       198      - |           A          AG        24         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A          AT        31         1 #>   [71]     DHFR       399      - |           G          GA        28         1 #>   [72]     DHFR       423      - |           T          TC        31         1 #>   [73]     DHFR       430      - |           A           -        33         0 #>   [74]     DHFR       513      - |           T           -        21         0 #>               nA        nT        nC        nG        nN        nX #>        <integer> <integer> <integer> <integer> <integer> <integer> #>    [1]         0        15         0         0         0         7 #>    [2]         0         0        21         1         0         0 #>    [3]         1         0        25         0         0         0 #>    [4]         8         0         0        16         0         0 #>    [5]        24         0         0         1         0         1 #>    ...       ...       ...       ...       ...       ...       ... #>   [70]        31         1         0         0         0         2 #>   [71]         1         0         0        28         0         6 #>   [72]         0        31         1         0         0         2 #>   [73]        33         0         0         0         0         2 #>   [74]         0        21         0         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome #>  #> [[2]] #> GRanges object with 74 ranges and 10 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       125      - |           C           -        17         0 #>    [3]     SSR3       156      - |           C           -        16         0 #>    [4]     SSR3       176      - |           A           -        16         0 #>    [5]     SSR3       198      - |           A           -        15         0 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A           -        43         0 #>   [71]     DHFR       399      - |           G           -        43         0 #>   [72]     DHFR       423      - |           T           -        42         0 #>   [73]     DHFR       430      - |           A          AT        37         1 #>   [74]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN        nX #>        <integer> <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0         6 #>    [2]         0         0        17         0         0         1 #>    [3]         0         0        16         0         0         1 #>    [4]        16         0         0         0         0         0 #>    [5]        15         0         0         0         0         2 #>    ...       ...       ...       ...       ...       ...       ... #>   [70]        43         0         0         0         0         2 #>   [71]         0         0         0        43         0         3 #>   [72]         0        42         0         0         0         1 #>   [73]        37         1         0         0         0         5 #>   [74]         0        35         1         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome create_se(plps) #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): Var nRef ... nC nG #> rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(1): Ref #> colnames(2): sample_1 sample_2 #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"RNA editing tools in R","text":"functionality raer builds previously published methods software: Python package: REDItools Picardi E, Pesole G Java tool: JACUSA2 Piechotta M et al Python-based pipeline: deNovo-Detect Gabey O et al Java-based tool: RNAEditingIndexer Roth SH et al","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Utility function map annotations GRanges rowData SummarizedExperiment GRanges object. multiple features overlap concatenated comma separated values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"annot_from_gr(obj, gr, cols_to_map, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"obj RangedSummarizedExperiment GRanges object gr GRanges annotations map obj cols_to_map character vector columns gr map obj. vector names, names column names output obj ... additional arguments pass GenomicRanges::findOverlaps()","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Either SummarizedExperiment GRanges object additional annotations provided supplied GRanges object.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"example(create_se, echo = FALSE) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, #>     append, as.data.frame, basename, cbind, colnames, dirname, #>     do.call, duplicated, eval, evalq, get, grep, grepl, #>     intersect, is.unsorted, lapply, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rownames, #>     sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians  library(SummarizedExperiment)  gr <- GRanges(rep(c(\"SSR3\", \"SPCS3\"), c(5, 15)),   IRanges(seq(1, 500, by = 25), width = 50),   strand = \"+\" )  gr$feature <- sample(1:100, size = 20) gr$id <- sample(LETTERS, size = 20)  se <- annot_from_gr(se, gr, c(feature_set = \"feature\", \"id\")) rowData(se) #> DataFrame with 74 rows and 3 columns #>                    Ref feature_set          id #>            <character> <character> <character> #> SSR3_102_-           T          NA          NA #> SSR3_125_-           C          NA          NA #> SSR3_156_-           C          NA          NA #> SSR3_176_-           A          NA          NA #> SSR3_198_-           A          NA          NA #> ...                ...         ...         ... #> DHFR_397_-           A          NA          NA #> DHFR_399_-           G          NA          NA #> DHFR_423_-           T          NA          NA #> DHFR_430_-           A          NA          NA #> DHFR_513_-           T          NA          NA"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate known SNP positions — annot_snps","title":"Annotate known SNP positions — annot_snps","text":"function annotate GRanges rowRanges SummarizedExperiment SNP positions SNP package","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate known SNP positions — annot_snps","text":"","code":"annot_snps(obj, ...)  # S3 method for GRanges annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )  # S3 method for SummarizedExperiment annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate known SNP positions — annot_snps","text":"obj GRanges SummarizedExperiment  object ... generic, arguments pass specific methods. Unused now. dbsnp SNPlocs package, see available packages BSgenome::available.SNPs() chrom operate specified chromosome col_to_aggr column SNPlocs package add input. multiple SNPs overlap values concatenated comma separated values. drop TRUE, remove sites overlap SNPs","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate known SNP positions — annot_snps","text":"Either GRanges SummarizedExperiment object new column \"snp\" added information \"col_to_aggr\"","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate known SNP positions — annot_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {   gr <- GRanges(rep(\"22\", 10),     IRanges(       seq(10510077,         10610077,         by = 1000       )[1:10],       width = 250     ),     strand = \"+\"   )   annot_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> Loading required package: SNPlocs.Hsapiens.dbSNP144.GRCh38 #> Loading required package: BSgenome #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Loading required package: rtracklayer #> Warning: more than one seqlevels style supplied, using the 1st one only #> GRanges object with 10 ranges and 1 metadata column: #>        seqnames            ranges strand |   RefSNP_id #>           <Rle>         <IRanges>  <Rle> | <character> #>    [1]       22 10510077-10510326      + |             #>    [2]       22 10511077-10511326      + |   rs4022986 #>    [3]       22 10512077-10512326      + |             #>    [4]       22 10513077-10513326      + |             #>    [5]       22 10514077-10514326      + |             #>    [6]       22 10515077-10515326      + |             #>    [7]       22 10516077-10516326      + |             #>    [8]       22 10517077-10517326      + |             #>    [9]       22 10518077-10518326      + |             #>   [10]       22 10519077-10519326      + |             #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function perform pileup specified repeat regions return summary AEI metric.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"calc_AEI(   bam_fn,   fasta_fn,   alu_ranges = NULL,   txdb = NULL,   snp_db = NULL,   filterParam = FilterParam(),   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"bam_fn bam file fasta_fn fasta alu_ranges GRanges name BEDfile regions query calculating AEI, typically ALU repeats. BED file supplied filtered txdb option. txdb txdb object, supplied, used subset alu_ranges found overlapping genes. Alternatively GRanges object gene coordinates. snp_db either SNPlocs package, GPos, GRanges object. supplied, used exclude polymorphic positions prior calculating AEI. calc_AEI() used many times, one save time first identifying SNPs overlap supplied alu_ranges, passing GRanges snp_db rather supplying known SNPs (see get_overlapping_snps()). Combined using bedfile alu_ranges can also save time. filterParam object class FilterParam() specify various filters apply reads sites pileup. BPPARAM BiocParallelParam object specifying parallel options operating chromosomes. verbose report progress chromosome?","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"named list AEI index computed allelic combinations. correctly computed signal A_G index higher alleles (T_C), likely derived noise polymorphisms.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"suppressPackageStartupMessages(library(Rsamtools)) bamfn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") dummy_alu_ranges <- scanFaIndex(fafn) calc_AEI(bamfn, fafn, dummy_alu_ranges) #> $A_C #> [1] 0 #>  #> $A_G #> [1] 2.298586 #>  #> $A_T #> [1] 0.1292293 #>  #> $C_A #> [1] 0.2142033 #>  #> $C_G #> [1] 0.01650982 #>  #> $C_T #> [1] 0.2635046 #>  #> $G_A #> [1] 0.3170769 #>  #> $G_C #> [1] 0 #>  #> $G_T #> [1] 0 #>  #> $T_A #> [1] 0 #>  #> $T_C #> [1] 0.0116198 #>  #> $T_G #> [1] 0.0116198 #>"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds editing frequencies — calc_edit_frequency","title":"Adds editing frequencies — calc_edit_frequency","text":"Adds editing frequencies existing SummarizedExperiment object (created create_se). SummarizedExperiment new assay editing frequencies site (edit_freq), depth coverage computed using indicatededited nucleotides (depth`) new colData columns number edited sites (n_sites) fraction edits (edit_idx) returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"calc_edit_frequency(   se,   edit_from = NULL,   edit_to = NULL,   drop = FALSE,   replace_na = TRUE,   edit_frequency = 0,   min_count = 1 )"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds editing frequencies — calc_edit_frequency","text":"se SummarizedExperiment object created create_se edit_from nucleotide (, C, G, T) corresponding nucleotide expect reference. Ex. editing events, \"\". NULL, editing frequencies calculated using nVar nRef values. edit_to nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". NULL, editing frequencies calculated using nVar nRef values. drop TRUE, summarizedExperiment returned retain sites matching specified edit_from edit_to bases. replace_na TRUE, NA NaN editing frequencies coerced 0. edit_frequency edit frequency cutoff used calculating number sites. Set 0 require non-zero editing frequency. number sites stored n_sites colData. min_count minimum number reads required enumerating number editing sites detected.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds editing frequencies — calc_edit_frequency","text":"SummarizedExperiment supplemented edit_freq assay.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) assay(se, \"edit_freq\")[1:5, ] #>                   KO1        KO2        KO3        WT1        WT2 #> SSR3_102_- 0.07692308 0.07692308 0.07692308 0.00000000 0.00000000 #> SSR3_125_- 0.00000000 0.00000000 0.00000000 0.04545455 0.04545455 #> SSR3_156_- 0.00000000 0.00000000 0.00000000 0.03846154 0.03846154 #> SSR3_176_- 0.00000000 0.00000000 0.00000000 0.66666667 0.66666667 #> SSR3_198_- 0.00000000 0.00000000 0.00000000 0.04000000 0.04000000 #>                   WT3 #> SSR3_102_- 0.00000000 #> SSR3_125_- 0.04545455 #> SSR3_156_- 0.03846154 #> SSR3_176_- 0.66666667 #> SSR3_198_- 0.04000000"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply strand correction using gene annotations — correct_strand","title":"Apply strand correction using gene annotations — correct_strand","text":"Gene annotations used infer likely strand editing sites. function operate unstranded datasets processed using \"genomic-unstranded\" library type reports variants respect + strand sites. strand editing site assigned strand overlapping features genes_gr object. Sites -overlap, overlapping features conflicting strands (+ -) removed.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"correct_strand(gr, genes_gr)"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply strand correction using gene annotations — correct_strand","text":"gr GRanges object containing editing sites processed \"genomic-unstranded\" setting genes_gr GRanges object containing reference features annotate strand editing sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply strand correction using gene annotations — correct_strand","text":"GenomicRanges onbject containing pileup counts, strand corrected based supplied genomic intervals.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"suppressPackageStartupMessages(library(\"GenomicRanges\"))  bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") fp <- FilterParam(library_type = \"genomic-unstranded\") plp <- get_pileup(bamfn, fafn, filterParam = fp)  genes <- GRanges(c(   \"DHFR:200-400:+\",   \"SPCS3:100-200:-\",   \"SSR3:3-10:-\",   \"SSR3:6-12:+\" ))  correct_strand(plp, genes) #> GRanges object with 307 ranges and 10 metadata columns: #>         seqnames    ranges strand |         Ref         Var      nRef #>            <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>     [1]     SSR3         3      - |           A           -        14 #>     [2]     SSR3         4      - |           A           -        15 #>     [3]     SSR3         5      - |           G           -        15 #>     [4]     SSR3        11      + |           A           -        15 #>     [5]     SSR3        12      + |           T           -        15 #>     ...      ...       ...    ... .         ...         ...       ... #>   [303]     DHFR       396      + |           T           -        40 #>   [304]     DHFR       397      + |           T           -        43 #>   [305]     DHFR       398      + |           T           -        43 #>   [306]     DHFR       399      + |           C           -        43 #>   [307]     DHFR       400      + |           T           -        45 #>              nVar        nA        nT        nC        nG        nN #>         <integer> <integer> <integer> <integer> <integer> <integer> #>     [1]         0        14         0         0         0         0 #>     [2]         0        15         0         0         0         0 #>     [3]         0         0         0         0        15         0 #>     [4]         0        15         0         0         0         0 #>     [5]         0         0        15         0         0         0 #>     ...       ...       ...       ...       ...       ...       ... #>   [303]         0         0        40         0         0         0 #>   [304]         0         0        43         0         0         0 #>   [305]         0         0        43         0         0         0 #>   [306]         0         0         0        43         0         0 #>   [307]         0         0        45         0         0         0 #>                nX #>         <integer> #>     [1]         1 #>     [2]         0 #>     [3]         0 #>     [4]         0 #>     [5]         0 #>     ...       ... #>   [303]         6 #>   [304]         2 #>   [305]         2 #>   [306]         3 #>   [307]         1 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts edits — count_edits","title":"Counts edits — count_edits","text":"Counts edits per sample add new colData columns number edited sites (n_sites)  fraction edits (edit_idx). function called calc_edit_frequency meant used directly.","code":""},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts edits — count_edits","text":"","code":"count_edits(   se,   edit_frequency = 0.01,   min_count = 10,   edit_from = NULL,   edit_to = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts edits — count_edits","text":"se SummarizedExperiment object created create_se processed calc_edit_frequency edit_frequency OPTIONAL edit frequency used determine number sites. Default 0.01. min_count OPTIONAL number reads used determine number edited sites. Default 10. edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RangedSummarizedExperiment — create_se","title":"Create RangedSummarizedExperiment — create_se","text":"function take either single result running get_pileup() list results (ie different samples) running pileup_res return summarized experiment object contains assays specified columns get_pileup() output.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"create_se(   plps,   assay_cols = c(\"Var\", \"nRef\", \"nVar\", \"nA\", \"nT\", \"nC\", \"nG\"),   sample_names = NULL,   sparse = FALSE,   fill_na = NULL,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RangedSummarizedExperiment — create_se","text":"plps results running get_pileup(), can one result, list results, named list results. named list given, colData named using names list. assay_cols character vector columns store assays sample_names list names added SE object. sample names given plps named list, default names (ie sample_1, sample_2, ..., sample_n) given warning printed. sparse TRUE, numeric matrices stored sparseMatrices. missing values coerced 0 sparseMatrices. fill_na Numeric value replace NAs numeric matrices used plps computed independently min_nucleotide_count = 1, otherwise sites may set 0, although may coverage > 0 less min_nucleotide_count parameter. applied sparse = TRUE, coerces missing values 0. verbose print information progress","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create RangedSummarizedExperiment — create_se","text":"RangedSummarizedExperiment object populated assays listed assay_cols.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"library(SummarizedExperiment)  bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) fp <- FilterParam(only_keep_variants = TRUE) plps <- get_pileup(bams, fafn, filterParam = fp) names(plps) <- sample_ids se <- create_se(plps) se$condition <- substr(se$sample, 1, 2) assays(se) #> List of length 7 #> names(7): Var nRef nVar nA nT nC nG  colData(se) #> DataFrame with 6 rows and 2 columns #>          sample   condition #>     <character> <character> #> KO1         KO1          KO #> KO2         KO2          KO #> KO3         KO3          KO #> WT1         WT1          WT #> WT2         WT2          WT #> WT3         WT3          WT  rowRanges(se) #> GRanges object with 74 ranges and 1 metadata column: #>              seqnames    ranges strand |         Ref #>                 <Rle> <IRanges>  <Rle> | <character> #>   SSR3_102_-     SSR3       102      - |           T #>   SSR3_125_-     SSR3       125      - |           C #>   SSR3_156_-     SSR3       156      - |           C #>   SSR3_176_-     SSR3       176      - |           A #>   SSR3_198_-     SSR3       198      - |           A #>          ...      ...       ...    ... .         ... #>   DHFR_397_-     DHFR       397      - |           A #>   DHFR_399_-     DHFR       399      - |           G #>   DHFR_423_-     DHFR       423      - |           T #>   DHFR_430_-     DHFR       430      - |           A #>   DHFR_513_-     DHFR       513      - |           T #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GSE99249 BAM files and related data — download_GSE99249","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"function download ~ 250 MB data. function download ~ 5 GB data. function download < 1 GB data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"download_GSE99249(path)  download_NA12878(path)  download_human_pbmc(path)"},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"path path directory download data","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"named list paths BAM files, FASTA file bed file known editing sites hg38 chromosome 18. named list paths RNA-seq WGS BAM file, FASTA file hg38 chromosome 4. named list paths bam file, fasta file, bed file editing_sites, .rds file SingleCellExperiment","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"if (FALSE) { td <- tempdir() download_GSE99249(td) } if (FALSE) { td <- tempdir() download_NA12878(td) } if (FALSE) { td <- tempdir() download_human_pbmc(td) }"},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter sites by read coverage — filter_by_coverage","title":"Filter sites by read coverage — filter_by_coverage","text":"Compute read coverage sites listed GRanges BED file return sites least min_counts read depth. Computes coverage across alignments positions, ignoring cell barcodes. Generally faster compute coverage across positions filter GRanges object, rather querying supplied sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter sites by read coverage — filter_by_coverage","text":"","code":"filter_by_coverage(bamfile, gr, min_counts, param = NULL, verbose = FALSE, ...)"},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter sites by read coverage — filter_by_coverage","text":"bamfile BAM file name gr GenomicRanges::GRanges BED file name min_counts minimum reads counts require param Rsamtools::ScanBamParam specifying reads filtered. supplied, filter ignore alignments marked secondary, supplementary, QC-fail. verbose Print messages TRUE. ... Additional arguments supply GenomicAlignments::coverage()","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter sites by read coverage — filter_by_coverage","text":"","code":"library(rtracklayer) bam_fn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") sites <- GRanges(   rep(\"SSR3\", 101),   IRanges(100:200, width = 1) )  filter_by_coverage(bam_fn, sites, min_counts = 24) #> GRanges object with 18 ranges and 1 metadata column: #>        seqnames    ranges strand |     score #>           <Rle> <IRanges>  <Rle> | <integer> #>    [1]     SSR3       107      * |        24 #>    [2]     SSR3       108      * |        24 #>    [3]     SSR3       109      * |        24 #>    [4]     SSR3       110      * |        24 #>    [5]     SSR3       111      * |        24 #>    ...      ...       ...    ... .       ... #>   [14]     SSR3       120      * |        25 #>   [15]     SSR3       121      * |        25 #>   [16]     SSR3       122      * |        25 #>   [17]     SSR3       123      * |        25 #>   [18]     SSR3       124      * |        24 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out clustered sequence variants — filter_clustered_variants","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"Sequence variants multiple allele types (e.g., >G, >C) nearby regions can due mis-alignment. Remove variants multiple allele types present within given distance genomic transcriptome coordinate space.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"filter_clustered_variants(   se,   txdb,   regions = c(\"transcript\", \"genome\"),   variant_dist = 100 )"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"se SummarizedExperiment::SummarizedExperiment containing editing sites txdb GenomicFeatures::TxDb regions One transcript genome, specifying coordinate system calculating distances variants. variant_dist distance nucleotides determining clustered variants","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"SummarizedExperiment::SummarizedExperiment sites removed object dependent filtering applied.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {   library(SummarizedExperiment)   nrows <- 5   ncols <- 6   counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)   rowRanges <- GRanges(rep(\"chr1\", 5),     IRanges(c(12055, 12174, 12194, 12719, 12889), width = 1),     strand = rep(\"+\", 5)   )   mcols(rowRanges)$Var <- c(\"AG\", \"AT\", \"AC\", \"TC\", \"GC\")   colData <- DataFrame(     Treatment = rep(c(\"adar_wt\", \"adar_ko\"), 3),     row.names = LETTERS[1:6]   )   rse <- SummarizedExperiment(     assays = SimpleList(counts = counts),     rowRanges = rowRanges, colData = colData   )    se <- filter_clustered_variants(rse, TxDb.Hsapiens.UCSC.hg38.knownGene)   se } #> Loading required package: TxDb.Hsapiens.UCSC.hg38.knownGene #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> class: RangedSummarizedExperiment  #> dim: 0 6  #> metadata(0): #> assays(1): counts #> rownames: NULL #> rowData names(1): Var #> colnames(6): A B ... E F #> colData names(1): Treatment"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out multi-allelic sites — filter_multiallelic","title":"Filter out multi-allelic sites — filter_multiallelic","text":"Remove sites multiple variant bases SummarizedExperiment. rowData() gains new column, Var, contains variant allele detected site.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"filter_multiallelic(se)"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out multi-allelic sites — filter_multiallelic","text":"se SummarizedExperiment::SummarizedExperiment","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"example(create_se, echo = FALSE) filter_multiallelic(se) #> class: RangedSummarizedExperiment  #> dim: 72 6  #> metadata(0): #> assays(7): Var nRef ... nC nG #> rownames(72): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(2): Ref Var #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(2): sample condition"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out sites near splice sites — filter_splice_variants","title":"Filter out sites near splice sites — filter_splice_variants","text":"Remove editing sites found regions proximal annotated splice junctions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"filter_splice_variants(se, txdb, splice_site_dist = 4, ignore.strand = FALSE)"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out sites near splice sites — filter_splice_variants","text":"se SummarizedExperiment::SummarizedExperiment editing sites txdb GenomicFeatures::TxDb splice_site_dist distance splice site ignore.strand TRUE, ignore strand comparing editing sites splice sites","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {   library(SummarizedExperiment)   nrows <- 5   ncols <- 6   counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)   rowRanges <- GRanges(rep(\"chr1\", 5),     IRanges(c(12055, 12174, 12194, 12719, 12889), width = 1),     strand = rep(\"+\", 5)   )   colData <- DataFrame(     Treatment = rep(c(\"adar_wt\", \"adar_ko\"), 3),     row.names = LETTERS[1:6]   )   rse <- SummarizedExperiment(     assays = SimpleList(counts = counts),     rowRanges = rowRanges, colData = colData   )    se <- filter_splice_variants(rse, TxDb.Hsapiens.UCSC.hg38.knownGene)   se } #> class: RangedSummarizedExperiment  #> dim: 2 6  #> metadata(0): #> assays(1): counts #> rownames: NULL #> rowData names(0): #> colnames(6): A B ... E F #> colData names(1): Treatment"},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"Copy VariantTools::extractCoverageForPositions Authors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman","code":""},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"","code":"getCoverageAtPositions(cov, pos)"},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"cov coverage produced GenomicAlignments::coverage() pos GRanges containing editing sites","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SNPs overlapping intervals — get_overlapping_snps","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"function find SNPs overlapping supplied intervals using SNPlocs package. SNPs can returned memory (GPos objects) written disk bed-file (optionally compressed).","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"get_overlapping_snps(gr, snpDb, output_file = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"gr Intervals query snpDb reference ot SNPlocs database output_file path output file. supplied file can optionally compressed including \".gz\" suffix. supplied, SNPS returned GenomicRanges::GPos object","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"GPos object containing SNPs overlapping supplied genomic intervals","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {   gr <- GRanges(rep(\"22\", 10),     IRanges(seq(10510077, 10610077, by = 1000)[1:10], width = 250),     strand = \"+\"   )   get_overlapping_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> UnstitchedGPos object with 1 position and 0 metadata columns: #>       seqnames       pos strand #>          <Rle> <integer>  <Rle> #>   [1]       22  10511116      * #>   ------- #>   seqinfo: 25 sequences (1 circular) from GRCh38.p2 genome"},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate base counts using pileup — get_pileup","title":"Generate base counts using pileup — get_pileup","text":"Generate base counts using pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate base counts using pileup — get_pileup","text":"","code":"get_pileup(   bamfiles,   fafile,   bedfile = NULL,   region = NULL,   chroms = NULL,   filterParam = FilterParam(),   outfile_prefix = NULL,   bedidx = NULL,   bam_flags = NULL,   reads = NULL,   return_data = TRUE,   BPPARAM = SerialParam(),   use_index = FALSE,   bad_reads = NULL,   umi_tag = NULL,   verbose = FALSE )  FilterParam(   max_depth = 10000,   min_base_quality = 20L,   min_mapq = 0L,   min_nucleotide_depth = 1L,   library_type = \"fr-first-strand\",   only_keep_variants = FALSE,   trim_5p = 0L,   trim_3p = 0L,   indel_dist = 0L,   splice_dist = 0L,   homopolymer_len = 0L,   max_mismatch_type = c(0L, 0L),   min_read_bqual = c(0, 0),   min_splice_overhang = 0L,   min_variant_reads = 0L,   ignore_query_Ns = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate base counts using pileup — get_pileup","text":"bamfiles paths 1 bam files fafile path fasta file bedfile path bed file sites regions query region samtools region query string (.e. chr1:100-1000) chroms chromosomes process, used region filterParam object class FilterParam() specify various filters apply reads sites pileup. outfile_prefix Output prefix tabix indexed files. NULL, files produced. bedidx BedFile object, supplied, pileup use index generated indexBed() bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() generate reads supplied fasta file written reads pass filters contain variants return_data TRUE, data returned GRanges, FALSE character vector tabix-index files, specified outfile_prefix, returned. BPPARAM BiocParallel class control parallel execution. Parallel processing occurs per chromosome, disabled run single region. use_index TRUE regions supplied bedfile queried using bam file index. default (FALSE) alignments queried via streaming regions bedfile used select sites keep. Using index can much faster querying small number sites large bamfiles. many sites bedfile , small bamfiles, option may slower streaming. bad_reads textfile containing read names exclude pileup. Readnames formated readid_1 readid_2 readid paired end first read paired-end second read single end data. umi_tag bam tag containing UMI sequence. supplied, multiple reads UMI sequence counted per position. verbose TRUE, report progress warnings. max_depth maximum read depth considered site min_base_quality min base quality score consider read pileup min_mapq minimum required MAPQ score, can vector values bam file min_nucleotide_depth min read depth needed report site library_type read orientation, one fr-first-strand, fr-second-strand, unstranded, genomic-unstranded. Can supply vector specify input bam. Unstranded library type reported based read alignment. genomic-unstranded report variants w.r.t + strand. only_keep_variants TRUE, variant sites reported (FALSE default), can vector input bamfile trim_5p Bases trim 5' ends read alignments trim_3p Bases trim 3' ends read alignments indel_dist Exclude read site occurs within given distance indel event read splice_dist Exclude read site occurs within given distance splicing event read homopolymer_len Exclude site occurs within homopolymer given length max_mismatch_type Exclude read X different mismatch types (e.g --G, G--C, C--G, 3 mismatch types) Y # mismatches, must supplied integer vector length 2. e.g. c(X, Y). min_read_bqual Exclude read X percent bases base qualities less Y. Numeric vector length 2. e.g. c(0.25, 20) min_splice_overhang Exclude read site located adjacent splice site overhang less given length. min_variant_reads Required number reads containing variant site reported. Calculated per bam file, 1 bam file >= min_variant_reads, site reported. ignore_query_Ns ignored now","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate base counts using pileup — get_pileup","text":"list containing GRanges object input bam file, vector output tabixed file names return_data FALSE.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate base counts using pileup — get_pileup","text":"Multiple bam files can processed together, files written bam file. mode output regions consistent across files. min_mapq, only_keep_variants, library_type parameters can specified input files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate base counts using pileup — get_pileup","text":"","code":"bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  plp <- get_pileup(bamfn, fafn) plps <- get_pileup(c(bamfn, bam2fn), fafn) fp <- FilterParam(only_keep_variants = TRUE, min_nucleotide_depth = 55) get_pileup(bamfn, fafn, filterParam = fp) #> GRanges object with 7 ranges and 10 metadata columns: #>       seqnames    ranges strand |         Ref         Var      nRef #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>   [1]     DHFR       207      - |           G          GT        55 #>   [2]     DHFR       208      - |           T          TG        55 #>   [3]     DHFR       223      - |           G          GT        56 #>   [4]     DHFR       225      - |           T          TA        55 #>   [5]     DHFR       291      - |           A          AG        54 #>   [6]     DHFR       300      - |           A          AG        56 #>   [7]     DHFR       332      - |           A          AG        55 #>            nVar        nA        nT        nC        nG        nN #>       <integer> <integer> <integer> <integer> <integer> <integer> #>   [1]         1         0         1         0        55         0 #>   [2]         1         0        55         0         1         0 #>   [3]         1         0         1         0        56         0 #>   [4]         1         1        55         0         0         0 #>   [5]         2        54         0         0         2         0 #>   [6]         1        56         0         0         1         0 #>   [7]         1        55         0         0         1         0 #>              nX #>       <integer> #>   [1]         4 #>   [2]         4 #>   [3]         6 #>   [4]         7 #>   [5]         6 #>   [6]         4 #>   [7]         2 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regions surrounding splice sites — get_splice_sites","title":"Extract regions surrounding splice sites — get_splice_sites","text":"Find intervals containing splice sites adjacent regions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"get_splice_sites(txdb, slop = 4)"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regions surrounding splice sites — get_splice_sites","text":"txdb GenomicFeatures::TxDb slop number bases upstream downstream splice site extract","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regions surrounding splice sites — get_splice_sites","text":"GenomicRanges::GRanges containing positions splice sites, flanking bases.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {   txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene   res <- get_splice_sites(txdb)   res[1:5] } #> GRanges object with 5 ranges and 0 metadata columns: #>       seqnames      ranges strand #>          <Rle>   <IRanges>  <Rle> #>   [1]     chr1 12054-12061      + #>   [2]     chr1 12173-12182      + #>   [3]     chr1 12224-12231      + #>   [4]     chr1 12224-12231      + #>   [5]     chr1 12607-12616      + #>   ------- #>   seqinfo: 640 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"A reference class for generating and storing index of BedFile — BedFile-class","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"Class store information bedfile used indicating regions pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"","code":"indexBed(file, ...)  # S4 method for character indexBed(file)  # S3 method for BedFile close(con, ...)"},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"file path bed file ... present consistency con BedFile class","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"Return object class BedFile contains pointer bed file index.","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":".extptr externalptr c-level samtools bedindex path filepath bed file open logical indicating index open","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"","code":"bed_fn <- system.file(\"extdata\", \"regions.bed\", package = \"raer\") indexBed(bed_fn) #> Reference class object of class \"BedFile\" #> Field \".extptr\": #> Object of class 'externalptr': #>   x address: 0x55ebdf1ba7c8 #>   R_ExternalPtrAddr(x): 0x55ebdb1609f0 #>   R_ExternalPtrTag(x): 0x55ebb10d01e0 #>   typeof(R_ExternalPtrTag(x)): NULL #>   R_ExternalPtrProtected(x): 0x55ec4e81d668 #>   typeof(R_ExternalPtrProtected(x)): character #> Field \"path\": #> [1] \"/__w/_temp/Library/raer/extdata/regions.bed\" #> Field \"open\": #> [1] TRUE bed_fn <- system.file(\"extdata\", \"regions.bed\", package = \"raer\") bed <- indexBed(bed_fn) close(bed)"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing — perform_de","title":"Perform differential editing — perform_de","text":"Uses either edgeR DESeq2 perform differential editing analysis. work simple designs 1 treatment 1 control. complex designs, suggest perform . moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing — perform_de","text":"","code":"perform_de(   deobj,   type = \"edgeR\",   sample_col = \"sample\",   condition_col = \"condition\",   condition_control = NULL,   condition_treatment = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing — perform_de","text":"deobj SummarizedExperiment object prepared de prep_for_de type OPTIONAL edgeR DESeq run. Default edgeR sample_col OPTIONAL name column colData(deobj) contains sample information. Default sample. column named \"sample\", must provide appropriate sample column condition_col OPTIONAL name column colData(deobj) contains treatment information. Default condition, column named \"condition\", must provide appropriate condition column condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential editing — perform_de","text":"named list - de_obj: edgeR deseq object used differential editing analysis - results_full: Unfiltered differenital editing results - sig_results: Filtered differenial editing (FDR < 0.05) - model_matrix: model matrix used generating DE results","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential editing — perform_de","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) dse <- prep_for_de(se) res <- perform_de(dse, condition_control = \"WT\", condition_treatment = \"KO\") #> Using classic mode. res$sig_results[1:5, ] #>                 logFC   logCPM        LR       PValue         FDR #> DHFR_361_- -11.147610 21.96719 13.393676 0.0002524741 0.006816801 #> SSR3_176_-  -8.000087 21.19460 11.166011 0.0008330957 0.011246792 #> SSR3_364_-  -5.600787 19.69710  9.086110 0.0025755817 0.016444635 #> DHFR_260_-  -8.108926 22.26785  8.548454 0.0034581581 0.016444635 #> SSR3_290_-  -4.839287 20.65403  8.454728 0.0036409569 0.016444635"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Pileup sites per cell — pileup_cells","title":"Pileup sites per cell — pileup_cells","text":"function perform pileup operation specified sites, returning counts Reference (e.g. unedited) Alternate (e.g. editing) bases. Current functionality process 10x genomic's style library, aligned bam file containing tag cell-barcode tag UMI. sites parameter specifies sites pileup. must GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named ref alt containing reference alternate base query. See examples example format. site, bases overlapped reads examined, counts ref alt base enumerated cell barcode present. single base counted UMI sequence present cell.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pileup sites per cell — pileup_cells","text":"","code":"pileup_cells(   bamfile,   sites,   cell_barcodes,   output_directory,   bam_flags = NULL,   chroms = NULL,   umi_tag = \"UB\",   cb_tag = \"CB\",   fp = FilterParam(),   BPPARAM = SerialParam(),   return_sce = TRUE,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pileup sites per cell — pileup_cells","text":"bamfile BAM file name sites GRanges object containing sites process. See examples valid formatting. cell_barcodes character vector single cell barcodes process. output_directory Output directory output files. generated exist. bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() generate chroms character vector chromosomes process, supplied, sites present listed chromosomes processed umi_tag tag bam containing UMI sequence cb_tag tag bam containing cell barcode sequence fp object class FilterParam() specify various filters apply reads sites pileup. Note min_variant_reads parameter, set > 0, specifies number variant reads site required order report site. E.g. set 2, least 2 reads (cell) must variant order report site. default 0 reports sites present sites object. BPPARAM BiocParallel instance. Parallel computation occurs across chromosomes. return_sce TRUE, data returned SingleCellExperiment, FALSE character vector output files, specified outfile_prefix, returned. verbose Display messages","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pileup sites per cell — pileup_cells","text":"Returns either SingleCellExperiment, character vector paths files produced.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pileup sites per cell — pileup_cells","text":"","code":"library(Rsamtools) library(GenomicRanges) bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\")  gr <- GRanges(c(\"2:579:-\", \"2:625:-\", \"2:645:-\",\"2:589:-\", \"2:601:-\")) gr$ref <- c(rep(\"A\", 4), \"T\") gr$alt <- c(rep(\"G\", 4), \"C\")  cbs <- unique(scanBam(bam_fn, param = ScanBamParam(tag = \"CB\"))[[1]]$tag$CB) cbs <- na.omit(cbs)  outdir <- tempdir() bai <- indexBam(bam_fn) on.exit(unlink(outdir, bai)) #> Error in unlink(outdir, bai): invalid 'recursive' argument  fp <- FilterParam(library_type = \"fr-second-strand\") sce <- pileup_cells(bam_fn, gr, cbs, outdir, fp = fp) sce #> class: SingleCellExperiment  #> dim: 5 556  #> metadata(0): #> assays(2): nRef nVar #> rownames(5): 2_579_2_A_G 2_625_2_A_G 2_645_2_A_G 2_589_2_A_G #>   2_601_2_T_C #> rowData names(2): ref alt #> colnames(556): TGGAACTCAAGCTGTT-1 TACTTCAGTAACCCTA-1 ... #>   TGTACAGTCTTCGTGC-1 TGTTGAGGTGACTGAG-1 #> colData names(1): id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Make summarized experiment object for DE — prep_for_de","title":"Make summarized experiment object for DE — prep_for_de","text":"Generates SummarizedExperiment object use edgeR DESeq2 generate counts assay matrix formated 2 columns per sample","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"prep_for_de(   se,   type = \"AI\",   edit_from = NULL,   edit_to = NULL,   min_prop = 0.1,   max_prop = 0.9,   min_samples = 3 )"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make summarized experiment object for DE — prep_for_de","text":"se SummarizedExperiment object type OPTIONAL type editing event add. Currently, supported (\"AI\") default, custom can added setting \"none\". edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set. min_prop OPTIONAL min proporation reads edited site. least min_samples need pass keep site. Default 0.1. max_prop OPTIONAL max proporation reads edited site. least min_samples need pass keep site. Default 0.9. min_samples OPTIONAL minimum number samples passing cutoffs keep site. Default 3.","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) dse <- prep_for_de(se) assay(dse, \"counts\") #>             KO1_ref KO2_ref KO3_ref WT1_ref WT2_ref WT3_ref KO1_alt #> SSR3_176_-       16      16      16       8       8       8       0 #> SSR3_201_-       14      14      14      19      19      19       0 #> SSR3_207_-       14      14      14      14      14      14       0 #> SSR3_257_-       19      19      19      11      11      11       0 #> SSR3_258_-       10      10      10       9       9       9       8 #> SSR3_266_-       17      17      17      12      12      12       0 #> SSR3_279_-       17      17      17       6       6       6       0 #> SSR3_290_-       14      14      14       3       3       3       1 #> SSR3_360_-        6       6       6       3       3       3       0 #> SSR3_364_-        3       3       3       2       2       2       0 #> SSR3_367_-        0       0       0       0       0       0       0 #> SSR3_388_-        0       0       0       0       0       0       0 #> SSR3_502_-        5       5       5       4       4       4       0 #> SPCS3_241_+       2       2       2       3       3       3       0 #> SPCS3_330_+       0       0       0       1       1       1       0 #> SPCS3_338_+       0       0       0       2       2       2       0 #> SPCS3_347_+       4       4       4       5       5       5       0 #> SPCS3_348_+       0       0       0       0       0       0       0 #> DHFR_260_-       60      60      60      21      21      21       0 #> DHFR_263_-       58      58      58      27      27      27       0 #> DHFR_291_-       54      54      54      30      30      30       2 #> DHFR_292_-       53      53      53      26      26      26       0 #> DHFR_309_-       56      56      56      29      29      29       0 #> DHFR_328_-       51      51      51      31      31      31       0 #> DHFR_354_-       47      47      47      28      28      28       0 #> DHFR_355_-       51      51      51      28      28      28       0 #> DHFR_361_-       43      43      43       4       4       4       0 #>             KO2_alt KO3_alt WT1_alt WT2_alt WT3_alt #> SSR3_176_-        0       0      16      16      16 #> SSR3_201_-        0       0       3       3       3 #> SSR3_207_-        0       0       4       4       4 #> SSR3_257_-        0       0       4       4       4 #> SSR3_258_-        8       8       6       6       6 #> SSR3_266_-        0       0       5       5       5 #> SSR3_279_-        0       0       4       4       4 #> SSR3_290_-        1       1       7       7       7 #> SSR3_360_-        0       0       3       3       3 #> SSR3_364_-        0       0       4       4       4 #> SSR3_367_-        0       0       1       1       1 #> SSR3_388_-        0       0       0       0       0 #> SSR3_502_-        0       0       0       0       0 #> SPCS3_241_+       0       0       1       1       1 #> SPCS3_330_+       0       0       2       2       2 #> SPCS3_338_+       0       0       1       1       1 #> SPCS3_347_+       0       0       0       0       0 #> SPCS3_348_+       0       0       0       0       0 #> DHFR_260_-        0       0      12      12      12 #> DHFR_263_-        0       0       6       6       6 #> DHFR_291_-        2       2       4       4       4 #> DHFR_292_-        0       0      10      10      10 #> DHFR_309_-        0       0       8       8       8 #> DHFR_328_-        0       0       4       4       4 #> DHFR_354_-        0       0       4       4       4 #> DHFR_355_-        0       0       6       6       6 #> DHFR_361_-        0       0      27      27      27 dse #> class: SummarizedExperiment  #> dim: 27 12  #> metadata(0): #> assays(1): counts #> rownames(27): SSR3_176_- SSR3_201_- ... DHFR_355_- DHFR_361_- #> rowData names(0): #> colnames(12): KO1_ref KO2_ref ... WT2_alt WT3_alt #> colData names(5): sample condition n_sites edit_idx count"},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":null,"dir":"Reference","previous_headings":"","what":"raer: RNA editing tools in R — raer","title":"raer: RNA editing tools in R — raer","text":"Toolkit identification statistical testing RNA editing signals within R. Provides support identifying sites bulk-RNA-seq, single cell RNA-seq datasets, general methods extraction allelic read counts alignment files.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raer: RNA editing tools in R — raer","text":"Maintainer: Kent Riemondy kent.riemondy@gmail.com (ORCID) Authors: Kristen Wells-Wrasman kristen.wells-wrasman@cuanschutz.edu (ORCID) contributors: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) [contributor] Jay Hesselberth jay.hesselberth@gmail.com (ORCID) [contributor] RNA Bioscience Initiative [copyright holder, funder]","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide working directory for raer example files. — raer_example","title":"Provide working directory for raer example files. — raer_example","text":"Provide working directory raer example files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(path)"},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide working directory for raer example files. — raer_example","text":"path path file","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(\"human.fasta\") #> [1] \"/__w/_temp/Library/raer/extdata/human.fasta\""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pileup, indexed by tabix — read_pileup","title":"Read pileup, indexed by tabix — read_pileup","text":"Read pileup, indexed tabix","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"read_pileup(tbx_fn, region = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pileup, indexed by tabix — read_pileup","text":"tbx_fn filename region region read file, samtools style region specifiers supported.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") plp_fn <- tempfile() plp <- get_pileup(bamfn, fafn, return_data = FALSE, outfile_prefix = plp_fn) read_pileup(plp) #> GRanges object with 1666 ranges and 10 metadata columns: #>          seqnames    ranges strand |         Ref         Var      nRef #>             <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>      [1]     SSR3         1      - |           C           -        13 #>      [2]     SSR3         2      - |           A           -        14 #>      [3]     SSR3         3      - |           A           -        14 #>      [4]     SSR3         4      - |           A           -        15 #>      [5]     SSR3         5      - |           G           -        15 #>      ...      ...       ...    ... .         ...         ...       ... #>   [1662]     DHFR       514      - |           T           -        33 #>   [1663]     DHFR       515      - |           A           -        36 #>   [1664]     DHFR       516      - |           A           -        33 #>   [1665]     DHFR       517      - |           A           -        35 #>   [1666]     DHFR       518      - |           G           -        34 #>               nVar        nA        nT        nC        nG        nN #>          <integer> <integer> <integer> <integer> <integer> <integer> #>      [1]         0         0         0        13         0         0 #>      [2]         0        14         0         0         0         0 #>      [3]         0        14         0         0         0         0 #>      [4]         0        15         0         0         0         0 #>      [5]         0         0         0         0        15         0 #>      ...       ...       ...       ...       ...       ...       ... #>   [1662]         0         0        33         0         0         0 #>   [1663]         0        36         0         0         0         0 #>   [1664]         0        33         0         0         0         0 #>   [1665]         0        35         0         0         0         0 #>   [1666]         0         0         0         0        34         0 #>                 nX #>          <integer> #>      [1]         2 #>      [2]         1 #>      [3]         1 #>      [4]         0 #>      [5]         0 #>      ...       ... #>   [1662]         3 #>   [1663]         0 #>   [1664]         2 #>   [1665]         0 #>   [1666]         1 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths unlink(c(plp, plp_fn, paste0(plp, \".tbi\")))"},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":null,"dir":"Reference","previous_headings":"","what":"Read tables produced by pileup_cells() — read_sparray","title":"Read tables produced by pileup_cells() — read_sparray","text":"function willl read tables produced pileup_cells(). tables extension matrixMarket sparse matrix format store values 1 matrix. .mtx.gz files formatted columns: row index (0 based) column index (0 based) values sparseMatrix #1 (nRef) values sparseMatrix #2 (nVar) N) values sparseMatrix ... (...) ununsed now","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read tables produced by pileup_cells() — read_sparray","text":"","code":"read_sparray(mtx_fn, sites_fn, bc_fn)"},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read tables produced by pileup_cells() — read_sparray","text":"mtx_fn .mtx.gz file path sites_fn sites.txt.gz file path bc_fn bcs.txt.gz file path","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read tables produced by pileup_cells() — read_sparray","text":"list sparseMatrices, NULL mtx_fn empty","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in tabix indexed file as a data.frame — read_tabix","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"Read tabix indexed file data.frame List chromosomes tabix index","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"","code":"read_tabix(   filename,   region = \".\",   numeric_cols = c(2, 6:12),   col_names = PILEUP_COLS )  get_tabix_chroms(filename)"},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"filename path indexed tabix file region samtools region query string (.e. chr1:100-1000) numeric_cols columns convert numeric integer vector (one-based index) col_names column names output data.frame","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") plp_fn <- tempfile() plp <- get_pileup(bamfn, fafn, return_data = FALSE, outfile_prefix = plp_fn)  head(read_tabix(plp)) #>   seqnames pos strand Ref Var nRef nVar nA nT nC nG nN nX #> 1     SSR3   1      -   C   -   13    0  0  0 13  0  0  2 #> 2     SSR3   2      -   A   -   14    0 14  0  0  0  0  1 #> 3     SSR3   3      -   A   -   14    0 14  0  0  0  0  1 #> 4     SSR3   4      -   A   -   15    0 15  0  0  0  0  0 #> 5     SSR3   5      -   G   -   15    0  0  0  0 15  0  0 #> 6     SSR3   6      -   T   -   15    0  0 15  0  0  0  0  read_tabix(plp, region = \"SPCS3:498-500\") #>   seqnames pos strand Ref Var nRef nVar nA nT nC nG nN nX #> 1    SPCS3 498      +   A   -    5    0  5  0  0  0  0  0 #> 2    SPCS3 499      +   C   -    4    0  0  0  4  0  0  1 #> 3    SPCS3 500      +   C   -    4    0  0  0  4  0  0  1  get_tabix_chroms(plp) #> [1] \"SSR3\"  \"SPCS3\" \"DHFR\"   unlink(c(plp, plp_fn, paste0(plp, \".tbi\")))"},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate editing frequencies per cell or per cluster — sc_editing","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"Calculate editing frequencies per cell per cluster","code":""},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"","code":"sc_editing(   bamfile,   fafile,   bedfile,   cell_barcodes,   assay_cols = c(\"nA\", \"nG\"),   tag_index_args = list(tag = \"CB\"),   BPPARAM = SerialParam(),   batch_size = 50,   bam_flags = NULL,   umi_tag = \"UB\",   verbose = TRUE,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"bamfile BAM file name fafile FASTA file name bedfile BED file containing editing sites cell_barcodes list character vectors containing cell barcodes query single character vector single cells process. list supplied assumed alignments cell barcodes list element pooled. single character vector, assumed cell barcode processed independently. See examples specification. assay_cols assays store returned se. Set \"\" \"G\". Note storing multiple assays can require large amounts memory. tag_index_args arguments pass build_tag_index() BPPARAM BiocParallel instance. Parallel computation occurs across entry cell_barcodes list, across batches single cells specified batch_size. batch_size processing single cells, batch_size controls many individual cell bams process invocation get_pileup(). Batching cells reduces run time avoiding  loading sequences fasta file cell. Setting values 50 unlikely improve runtime. bam_flags See arguments [get_pileup()] umi_tag See arguments [get_pileup()] verbose Display messages ... additional arguments passed [get_pileup()].","code":""},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"","code":"suppressPackageStartupMessages(library(SummarizedExperiment))  # get vector of cell barcodes in bam file (for use in this example) # usually these would come from the single cell analysis  bamfn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") idxfn <- build_tag_index(bamfn) cbs <- show_tag_index(bamfn)$tag cbs[1:5] #> [1] \"AAACCCAGTCACTTAG-1\" \"AAACGAACAACTGAAA-1\" \"AAACGAAGTGAATATG-1\" #> [4] \"AAACGCTAGACTTGTC-1\" \"AAACGCTGTGGATTTC-1\"  # process each cell individually # will be slow with many sites and cells # bam file will be indexed by build_tag_index() if not already done. fp <- FilterParam(library_type = \"fr-second-strand\") se <- sc_editing(   bamfile = bamfn,   fafile = raer_example(\"mouse_tiny.fasta\"),   bedfile = raer_example(\"5k_neuron_sites.bed.gz\"),   cell_barcodes = cbs[1:15],   verbose = FALSE,   filterParam = fp )  # pool cell barcodes across clusters # pass a named list, with each list entry corresponding to a vector # of cell barcodes from a cluster  # simulate 5 clusters cb_lst <- split(cbs, cut(seq_along(cbs), breaks = 5)) names(cb_lst) <- paste0(\"cluster\", 1:5)  se <- sc_editing(   bamfile = bamfn,   fafile = raer_example(\"mouse_tiny.fasta\"),   bedfile = raer_example(\"5k_neuron_sites.bed.gz\"),   cell_barcodes = cb_lst,   umi_tag = NULL,   verbose = FALSE,   filterParam = fp ) assays(se)$nA #> 17 x 5 sparse Matrix of class \"dgCMatrix\" #>          cluster1 cluster2 cluster3 cluster4 cluster5 #> 2_548_-         1        2        1        3        2 #> 2_576_-        60       58       56       55       63 #> 2_591_-        94       92       99       96      105 #> 2_593_-        99       95      105      104      108 #> 2_609_-       161      152      162      168      159 #> 6_271_-         6        9        7        5       10 #> 6_331_-        34       40       34       34       54 #> 6_352_-        32       34       30       29       49 #> 6_361_-        23       26       25       24       39 #> 6_383_-        15       22       15       18       26 #> 6_393_-        13       15        8       10       12 #> 11_366_-        .        .        .        .        . #> 11_367_-        .        .        .        .        . #> 2_754_-         .        .        1        .        2 #> 2_755_-         .        .        1        .        2 #> 2_756_-         .        .        1        .        2 #> 2_792_-         .        .        .        .        2 assays(se)$nG #> 17 x 5 sparse Matrix of class \"dgCMatrix\" #>          cluster1 cluster2 cluster3 cluster4 cluster5 #> 2_548_-         .        .        1        .        . #> 2_576_-         1        .        .        1        . #> 2_591_-         .        1        1        1        . #> 2_593_-         .        1        .        .        . #> 2_609_-         1        .        .        .        . #> 6_271_-         .        1        .        .        . #> 6_331_-         1        1        .        .        . #> 6_352_-         .        .        .        2        . #> 6_361_-         4        2        .        2        2 #> 6_383_-         1        .        .        .        . #> 6_393_-         1        .        .        .        . #> 11_366_-        .        1        .        .        . #> 11_367_-        .        1        .        .        . #> 2_754_-         .        .        .        .        1 #> 2_755_-         .        .        .        .        1 #> 2_756_-         .        .        .        .        1 #> 2_792_-         .        .        1        .        1"},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Build index for tag sorted bam file — build_tag_index","title":"Build index for tag sorted bam file — build_tag_index","text":"Build index tag sorted bam file Show tags stored tag index Subset bam file contain certain tags (e.g. cell barcodes)","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build index for tag sorted bam file — build_tag_index","text":"","code":"build_tag_index(   bamfile,   tag = \"CB\",   n_records_to_check = 1e+06,   overwrite = TRUE )  show_tag_index(bamfile)  get_tag_bam(bamfile, barcodes, outbam = NULL, pos_sort_output = TRUE, ...)"},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build index for tag sorted bam file — build_tag_index","text":"bamfile input tag indexed bam file tag name tag bamfile used sorting. tag must type \"Z\". n_records_to_check number bam records query validate tag present correct type. Set 0 disable checks. overwrite TRUE, regenerate index already exists barcodes character vector tag values extract outbam optional output bam file name, supplied temporary file used pos_sort_output TRUE, sort output bamfile position generate samtools style index ... Additional arguments passed Rsamtools::sortBam()","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build index for tag sorted bam file — build_tag_index","text":"name index generated, bam file + \".bri\" Character vector tags Returns name output bam file. output bam file positionally sorted positionally indexed using Rsamtools.","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build index for tag sorted bam file — build_tag_index","text":"","code":"bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\"  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_ubsort.bam\") build_tag_index(bam_fn, tag = \"UB\") #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_ubsort.bam.bri\"  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\")  build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\"  head(show_tag_index(bam_fn)) #>                  tag n #> 1 AAACCCAGTCACTTAG-1 1 #> 2 AAACGAACAACTGAAA-1 1 #> 3 AAACGAAGTGAATATG-1 1 #> 4 AAACGCTAGACTTGTC-1 1 #> 5 AAACGCTGTGGATTTC-1 1 #> 6 AAAGAACCACAAGGTG-1 1  library(GenomicAlignments)  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\"  cbs <- c(\"AGGATAATCTCAGAAC-1\", \"TTCGATTTCCCGAGGT-1\") bam_out <- get_tag_bam(bam_fn, barcodes = cbs) readGAlignments(bam_out, param = ScanBamParam(tag = \"CB\")) #> GAlignments object with 7 alignments and 1 metadata column: #>       seqnames strand       cigar    qwidth     start       end     width #>          <Rle>  <Rle> <character> <integer> <integer> <integer> <integer> #>   [1]        2      -       1S90M        91       576       665        90 #>   [2]        2      -         91M        91       595       685        91 #>   [3]        2      -       85M6S        91       618       702        85 #>   [4]        2      -      73M18S        91       626       698        73 #>   [5]        2      -      74M17S        91       629       702        74 #>   [6]        6      - 62M1D16M13S        91       270       348        79 #>   [7]        6      - 48M1I13M29S        91       321       381        61 #>           njunc |                 CB #>       <integer> |        <character> #>   [1]         0 | TTCGATTTCCCGAGGT-1 #>   [2]         0 | AGGATAATCTCAGAAC-1 #>   [3]         0 | AGGATAATCTCAGAAC-1 #>   [4]         0 | AGGATAATCTCAGAAC-1 #>   [5]         0 | TTCGATTTCCCGAGGT-1 #>   [6]         0 | TTCGATTTCCCGAGGT-1 #>   [7]         0 | AGGATAATCTCAGAAC-1 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0990","dir":"Changelog","previous_headings":"","what":"raer 0.99.0","title":"raer 0.99.0","text":"Rename remove_clustered_variants, remove_multiallelic, remove_splice_variants filter_* consistency. Rewrote renamed single cell editing function sc_editing pileup_cells(). pileup_cells() require sorting index cell barcode, uses new format specify sites query requires providing reference alternate alleles interest, writes disk sparse matrix compatible format reduce memory usage, performance need query fasta index. Implemented method collapse reads duplicate UMIs. Added option filter sites pileup based number reads containing variant (#54) Added NEWS.md file track changes package.","code":""}]
