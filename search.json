[{"path":"https://rnabioco.github.io/raer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 raer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/raer/articles/novel-sites.html","id":"novel-rna-editing-site-detection-tutorial","dir":"Articles","previous_headings":"","what":"Novel RNA editing site detection tutorial","title":"Identifying RNA editing sites using RNA and DNA sequencing data","text":"vignette demonstrate identify novel RNA editing sites using raer package. vignette public RNA-seq Whole-Genome sequencing dataset analyzed. High coverage whole-genome sequencing conducted ERR262997 along paired-end RNA-seq SRR1258218. Aligned BAM files genome fasta file preprocessed vignette. files occupy ~100 Mb space contain alignments first 1MB chromosome 4. default files stored temporary directory. Change data_dir variable valid file path keep files reuse. Additionally use following additional annotation resources: database known SNPs, example SNPlocs.Hsapiens.dbSNP155.GRCh38 package. Due space memory constraints , vignette use BED file containing SNPs first 1Mb region chr4. TxDb.Hsapiens.UCSC.hg38.knownGene, database transcript models. Alternatively can generated .gtf file using makeTxDbFromGRanges() GenomicFeatures package. RepeatMasker annotations, can obtained AnnotationHub() hg38. space reasons annotations chr4 included text file. pileup_sites() function can accept multiple bam files, supply one RNA-seq, one whole genome sequencing. Filtering parameters pileup_sites() function can accept multiple arguments matched input bam files. Next filter keep sites variant RNA-seq, variant DNA-seq, minimum 5 reads DNA-seq. DNA-seq data reported “+” strand, RNA-seq data reported either strand. therefore use subsetByOverlaps(..., ignore.strand = TRUE) retain sites passing DNA-seq based filters independent strand. Next filter remove multi-allelic sites. sites stored comma-separated strings ALT assay (e.g. G,C). Non-variant sites stored -. filter_multiallelic() remove sites multiple variants samples present summarizedExperiment object. add new column rowData() indicate variant site, calculate allele_freq assay variant allele frequencies sample. Next ’ll remove sites simple repeat regions. add repeat information rowData() using annot_from_gr() function. Next ’ll remove sites adjacent sites different variant types. example ->G variant located proximal C->T variant variants removed. Next, sites 4bp known splicing events excluded. variants low-confidence due possibility mis-alignments. Next, ’ll annotate site known SNP remove known SNPs. using SNPlocs package can use annot_snp() function. However use annot_from_gr() function annotate using prebuilt chr4snps object. Lastly, ’ll filter edit sites require editing frequency > 0.05 least 2 reads support editing site.","code":"data_dir <- tempdir() fns <- download_NA12878(data_dir) fns ## $bams ##                              ERR262996_dedup_chr4_sub.bam  ##            \"/tmp/RtmpmHmoz2/ERR262996_dedup_chr4_sub.bam\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam  ## \"/tmp/RtmpmHmoz2/SRR1258218_Aligned.sorted.dedup_sub.bam\"  ##  ## $bai ##                              ERR262996_dedup_chr4_sub.bam.bai  ##            \"/tmp/RtmpmHmoz2/ERR262996_dedup_chr4_sub.bam.bai\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam.bai  ## \"/tmp/RtmpmHmoz2/SRR1258218_Aligned.sorted.dedup_sub.bam.bai\"  ##  ## $fasta ##                   hg38_chr4.fa.bgz  ## \"/tmp/RtmpmHmoz2/hg38_chr4.fa.bgz\"  ##  ## $snps ##                   chr4snps.bed.gz  ## \"/tmp/RtmpmHmoz2/chr4snps.bed.gz\"  ##  ## $rmsk ##                   rmsk_hg38.tsv.gz  ## \"/tmp/RtmpmHmoz2/rmsk_hg38.tsv.gz\" txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene  chr4snps <- import(fns$snps)  rmskhg38 <- read.table(fns$rmsk) rmskhg38 <- makeGRangesFromDataFrame(rmskhg38,     keep.extra.columns = TRUE,     starts.in.df.are.0based = TRUE ) wgs_bam <- fns$bams[1] rna_bam <- fns$bams[2] fafn <- fns$fasta fp <- FilterParam(     min_depth = 1,     min_base_quality = 30,     min_mapq = c(255, 30),     library_type = c(\"fr-first-strand\", \"genomic-unstranded\"),     trim_5p = 5,     trim_3p = 5,     indel_dist = 4,     homopolymer_len = 6,     max_mismatch_type = c(3, 3),     read_bqual = c(0.25, 20),     only_keep_variants = c(TRUE, FALSE) )  bams <- c(rna_bam, wgs_bam) names(bams) <- c(\"rna\", \"dna\") rse <- pileup_sites(bams,     fafile = fafn,     chrom = \"chr4\",     param = fp )  rse ## class: RangedSummarizedExperiment  ## dim: 546 2  ## metadata(0): ## assays(7): ALT nRef ... nC nG ## rownames(546): chr4_44338_- chr4_124820_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(3): REF rbpz vpb ## colnames(2): rna dna ## colData names(1): sample to_keep <- (assay(rse, \"nRef\")[, \"dna\"] >= 5 & assay(rse, \"ALT\")[, \"dna\"] == \"-\") rse <- subsetByOverlaps(rse, rse[to_keep, ], ignore.strand = TRUE) nrow(rse) ## [1] 198 rse <- filter_multiallelic(rse) ## ℹ `filter_multiallelic()`: removed 0 sites from 198 (198 remain) rse <- calc_edit_frequency(rse) rowData(rse) ## DataFrame with 198 rows and 4 columns ##                       REF      rbpz       vpb         ALT ##               <character> <numeric> <numeric> <character> ## chr4_124820_+           C -0.939623       Inf           A ## chr4_125213_+           G -1.584745       Inf           C ## chr4_126885_+           A  0.826528       Inf           G ## chr4_126885_-           T       Inf       Inf           C ## chr4_126955_+           A  1.584745       Inf           G ## ...                   ...       ...       ...         ... ## chr4_958447_+           C  0.694986       Inf           A ## chr4_989824_+           C  0.144841       Inf           T ## chr4_990589_+           A -1.640049       Inf           C ## chr4_990981_+           C -0.925820       Inf           T ## chr4_993342_+           A  1.498680       Inf           G rse <- annot_from_gr(rse, rmskhg38, cols_to_map = c(c(\"repName\", \"repClass\", \"repFamily\")))  rowData(rse)[c(\"repName\", \"repFamily\")] ## DataFrame with 198 rows and 2 columns ##                   repName   repFamily ##               <character> <character> ## chr4_124820_+          NA          NA ## chr4_125213_+      MER21C        ERVL ## chr4_126885_+          NA          NA ## chr4_126885_-      AluSc5         Alu ## chr4_126955_+          NA          NA ## ...                   ...         ... ## chr4_958447_+          NA          NA ## chr4_989824_+          NA          NA ## chr4_990589_+          NA          NA ## chr4_990981_+          NA          NA ## chr4_993342_+          NA          NA rse <- rse[!rowData(rse)$repFamily %in% c(\"Simple_repeat\", \"Low Complexity\")] rse <- filter_clustered_variants(rse, txdb, variant_dist = 100) ## Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 ## ℹ `filter_clustered_variants()`: removed 37 sites from 197 (160 remain) rse ## class: RangedSummarizedExperiment  ## dim: 160 2  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(160): chr4_124820_+ chr4_125213_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(7): REF rbpz ... repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx rse <- filter_splice_variants(rse, txdb) ## Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 ## ℹ `filter_splice_variants()`: removed 4 sites from 160 (156 remain) rse ## class: RangedSummarizedExperiment  ## dim: 156 2  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(156): chr4_124820_+ chr4_125213_+ ... chr4_990981_+ ##   chr4_993342_+ ## rowData names(7): REF rbpz ... repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx rse <- annot_from_gr(rse, chr4snps, \"name\") rowData(rse)[c(\"name\")] ## DataFrame with 156 rows and 1 column ##                       name ##                <character> ## chr4_124820_+ rs1553807640 ## chr4_125213_+ rs1286128437 ## chr4_126885_+           NA ## chr4_126885_-           NA ## chr4_126955_+           NA ## ...                    ... ## chr4_958447_+ rs1052651854 ## chr4_989824_+   rs73219719 ## chr4_990589_+           NA ## chr4_990981_+  rs116514520 ## chr4_993342_+           NA rse <- rse[is.na(rowData(rse)$name), ] rse ## class: RangedSummarizedExperiment  ## dim: 91 2  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(91): chr4_126885_+ chr4_126885_- ... chr4_990589_+ ##   chr4_993342_+ ## rowData names(8): REF rbpz ... repFamily name ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx to_keep <- assay(rse, \"edit_freq\")[, 1] > 0.05 rse <- rse[to_keep, ]  rse <- rse[assay(rse, \"nAlt\")[, 1] >= 2] stopifnot(all(rowData(rse)$REF == \"A\" & rowData(rse)$ALT == \"G\")) rowRanges(rse) ## GRanges object with 10 ranges and 8 metadata columns: ##                 seqnames    ranges strand |         REF       rbpz ##                    <Rle> <IRanges>  <Rle> | <character>  <numeric> ##   chr4_134353_+     chr4    134353      + |           A -1.1811989 ##   chr4_378011_+     chr4    378011      + |           A -0.0481455 ##   chr4_378018_+     chr4    378018      + |           A -0.3099735 ##   chr4_378090_+     chr4    378090      + |           A  0.0000000 ##   chr4_378362_+     chr4    378362      + |           A  0.2155896 ##   chr4_378368_+     chr4    378368      + |           A  1.0966509 ##   chr4_378409_+     chr4    378409      + |           A  0.7311006 ##   chr4_380392_+     chr4    380392      + |           A  0.3325434 ##   chr4_778739_-     chr4    778739      - |           A  0.5773503 ##   chr4_778780_-     chr4    778780      - |           A -0.8660254 ##                       vpb         ALT     repName    repClass   repFamily ##                 <numeric> <character> <character> <character> <character> ##   chr4_134353_+  0.100000           G        <NA>        <NA>        <NA> ##   chr4_378011_+  0.840000           G       AluSc        SINE         Alu ##   chr4_378018_+  0.535497           G       AluSc        SINE         Alu ##   chr4_378090_+  0.700000           G       AluSc        SINE         Alu ##   chr4_378362_+  0.180000           G        <NA>        <NA>        <NA> ##   chr4_378368_+  0.180000           G        <NA>        <NA>        <NA> ##   chr4_378409_+  0.580000           G        <NA>        <NA>        <NA> ##   chr4_380392_+  0.520000           G      AluSq2        SINE         Alu ##   chr4_778739_-  0.230191           G       AluSg        SINE         Alu ##   chr4_778780_-  0.303109           G       AluSg        SINE         Alu ##                        name ##                 <character> ##   chr4_134353_+        <NA> ##   chr4_378011_+        <NA> ##   chr4_378018_+        <NA> ##   chr4_378090_+        <NA> ##   chr4_378362_+        <NA> ##   chr4_378368_+        <NA> ##   chr4_378409_+        <NA> ##   chr4_380392_+        <NA> ##   chr4_778739_-        <NA> ##   chr4_778780_-        <NA> ##   ------- ##   seqinfo: 194 sequences from an unspecified genome unlink(data_dir) sessionInfo() ## R Under development (unstable) (2023-03-02 r83926) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] TxDb.Hsapiens.UCSC.hg38.knownGene_3.16.0 ##  [2] rtracklayer_1.59.1                       ##  [3] SummarizedExperiment_1.29.1              ##  [4] MatrixGenerics_1.11.0                    ##  [5] matrixStats_0.63.0                       ##  [6] GenomicFeatures_1.51.4                   ##  [7] AnnotationDbi_1.61.0                     ##  [8] Biobase_2.59.0                           ##  [9] GenomicRanges_1.51.4                     ## [10] GenomeInfoDb_1.35.15                     ## [11] IRanges_2.33.0                           ## [12] S4Vectors_0.37.4                         ## [13] BiocGenerics_0.45.0                      ## [14] raer_0.99.0                              ## [15] BiocStyle_2.27.1                         ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.0         dplyr_1.1.0              ##  [3] blob_1.2.3               R.utils_2.12.2           ##  [5] filelock_1.0.2           Biostrings_2.67.0        ##  [7] bitops_1.0-7             fastmap_1.1.1            ##  [9] RCurl_1.98-1.10          BiocFileCache_2.7.2      ## [11] GenomicAlignments_1.35.0 XML_3.99-0.13            ## [13] digest_0.6.31            lifecycle_1.0.3          ## [15] ellipsis_0.3.2           KEGGREST_1.39.0          ## [17] RSQLite_2.3.0            magrittr_2.0.3           ## [19] compiler_4.3.0           rlang_1.0.6              ## [21] sass_0.4.5               progress_1.2.2           ## [23] tools_4.3.0              utf8_1.2.3               ## [25] yaml_2.3.7               data.table_1.14.8        ## [27] knitr_1.42               prettyunits_1.1.1        ## [29] curl_5.0.0               bit_4.0.5                ## [31] DelayedArray_0.25.0      xml2_1.3.3               ## [33] BiocParallel_1.33.9      purrr_1.0.1              ## [35] R.oo_1.25.0              desc_1.4.2               ## [37] grid_4.3.0               fansi_1.0.4              ## [39] biomaRt_2.55.0           cli_3.6.0                ## [41] rmarkdown_2.20           crayon_1.5.2             ## [43] ragg_1.2.5               generics_0.1.3           ## [45] httr_1.4.5               rjson_0.2.21             ## [47] DBI_1.1.3                cachem_1.0.7             ## [49] stringr_1.5.0            zlibbioc_1.45.0          ## [51] parallel_4.3.0           BiocManager_1.30.20      ## [53] XVector_0.39.0           restfulr_0.0.15          ## [55] vctrs_0.5.2              Matrix_1.5-3             ## [57] jsonlite_1.8.4           bookdown_0.33            ## [59] hms_1.1.2                bit64_4.0.5              ## [61] systemfonts_1.0.4        jquerylib_0.1.4          ## [63] glue_1.6.2               pkgdown_2.0.7            ## [65] codetools_0.2-19         stringi_1.7.12           ## [67] BiocIO_1.9.2             tibble_3.2.0             ## [69] pillar_1.8.1             rappdirs_0.3.3           ## [71] htmltools_0.5.4          GenomeInfoDbData_1.2.9   ## [73] BSgenome_1.67.4          R6_2.5.1                 ## [75] dbplyr_2.3.1             textshaping_0.3.6        ## [77] rprojroot_2.0.3          evaluate_0.20            ## [79] lattice_0.20-45          R.methodsS3_1.8.2        ## [81] png_0.1-8                Rsamtools_2.15.1         ## [83] memoise_2.0.1            bslib_0.4.2              ## [85] Rcpp_1.0.10              xfun_0.37                ## [87] fs_1.6.1                 pkgconfig_2.0.3"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"differential-editing-tutorial","dir":"Articles","previous_headings":"","what":"Differential Editing tutorial","title":"Introducing the raer package","text":"vignette demonstrate identify RNA editing sites condition-specific editing frequencies using raer package.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"set-up","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Set up","title":"Introducing the raer package","text":"vignette public RNA-seq dataset analyzed, GSE99249, consists ADAR1 mutants control human cell lines, conditionally treated Interferon-Beta. simplicity examine ADAR1 WT KO samples treated IFN-B, triplicate samples. Aligned BAM files necessary files preprocessed vignette. files occupy ~250 Mb space default stored temporary directory. Change data_dir variable valid file path keep files reuse. Next ’ll collect vector containing paths BAM file BAM files subset full BAM files, containing alignments chromosome 18. Next ’ll need FASTA file quantify editing sites. ’ll use FASTA file containing chromosome 18 demo. fasta can compressed. Lastly, ’ll use BED file containing coordinates known human editing sites REDIPortal database. file can also optionally compressed.","code":"library(raer) library(SummarizedExperiment) library(DESeq2) library(ComplexHeatmap) library(viridis) library(rtracklayer) data_dir <- tempdir() fns <- download_GSE99249(data_dir) bam_files <- fns$bams bam_files[1:2] ##                   SRR5564260_dedup_sorted.bam  ## \"/tmp/RtmpzGwW3C/SRR5564260_dedup_sorted.bam\"  ##                   SRR5564261_dedup_sorted.bam  ## \"/tmp/RtmpzGwW3C/SRR5564261_dedup_sorted.bam\" fafn <- fns$fasta fafn ##                   chr18.fasta.bgz  ## \"/tmp/RtmpzGwW3C/chr18.fasta.bgz\" sites <- import(fns$bed) sites ## GRanges object with 250442 ranges and 2 metadata columns: ##            seqnames    ranges strand |             name     score ##               <Rle> <IRanges>  <Rle> |      <character> <numeric> ##        [1]    chr18     22898      + |    chr18:22898:+         0 ##        [2]    chr18     22909      + |    chr18:22909:+         0 ##        [3]    chr18     22932      + |    chr18:22932:+         0 ##        [4]    chr18     22942      + |    chr18:22942:+         0 ##        [5]    chr18     22948      + |    chr18:22948:+         0 ##        ...      ...       ...    ... .              ...       ... ##   [250438]    chr18  80251604      + | chr18:80251604:+         0 ##   [250439]    chr18  80251607      + | chr18:80251607:+         0 ##   [250440]    chr18  80251609      + | chr18:80251609:+         0 ##   [250441]    chr18  80251634      + | chr18:80251634:+         0 ##   [250442]    chr18  80251647      + | chr18:80251647:+         0 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"generate-editing-site-read-counts","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Generate editing site read counts","title":"Introducing the raer package","text":"pileup_sites() function calculate base counts across multiple BAM files. base counts returned list GRanges objects bam file. FilterParam() function provides numerous filters exclude reads bases based commonly used filters detecting RNA-editing events. Specific regions can queried using region argument, specific positions can queried providing bedfile path BED-file. Internally, pileup_sites() generate pileups memory. However, files can also stored tabix-indexed format, later retrieval, querying specific regions. Pileups data stored summarizedExperiment object, permits comparisons across sample. rowData() rowRanges() slots can populated information related editing site, similarly colData() slot can used store sample metadata. summarizedExperiment object can also interface derivative classes, singleCellExperiment(). base counts counted stand specific fashion depending library-type parameter. REF ALT bases reference strand. Next add sample metadata summarizedExperiment, used conduct differential editing analysis.","code":"fp <- FilterParam(     only_keep_variants = TRUE,     trim_5p = 5,     trim_3p = 5,     min_base_quality = 30L,     min_mapq = 255L,     library_type = \"fr-first-strand\",     min_splice_overhang = 10 )  rse <- pileup_sites(bam_files,     fafile = fafn,     sites = sites,     region = \"chr18\",     param = fp ) rse ## class: RangedSummarizedExperiment  ## dim: 6287 6  ## metadata(0): ## assays(7): ALT nRef ... nC nG ## rownames(6287): chr18_168574_+ chr18_168577_+ ... ##   chr18_80172518_- chr18_80174441_- ## rowData names(3): REF rbpz vpb ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(1): sample colData(rse)$genotype_treatment <- rep(     c(         \"ADAR1KO Interferon beta\",         \"Wildtype Interferon beta\"     ),     each = 3 )  colData(rse)$genotype <- rep(     c(         \"ADAR1KO\",         \"Wildtype\"     ),     each = 3 ) colData(rse) ## DataFrame with 6 rows and 3 columns ##                                             sample     genotype_treatment ##                                        <character>            <character> ## SRR5564260_dedup_sorted.bam SRR5564260_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564261_dedup_sorted.bam SRR5564261_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564269_dedup_sorted.bam SRR5564269_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564270_dedup_sorted.bam SRR5564270_dedup_sor.. Wildtype Interferon .. ## SRR5564271_dedup_sorted.bam SRR5564271_dedup_sor.. Wildtype Interferon .. ## SRR5564277_dedup_sorted.bam SRR5564277_dedup_sor.. Wildtype Interferon .. ##                                genotype ##                             <character> ## SRR5564260_dedup_sorted.bam     ADAR1KO ## SRR5564261_dedup_sorted.bam     ADAR1KO ## SRR5564269_dedup_sorted.bam     ADAR1KO ## SRR5564270_dedup_sorted.bam    Wildtype ## SRR5564271_dedup_sorted.bam    Wildtype ## SRR5564277_dedup_sorted.bam    Wildtype"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"prepare-for-differential-editing","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Prepare for differential editing","title":"Introducing the raer package","text":"next use calc_edit_frequency function identify percent edits position sample. drop = TRUE argument also exclude sites without adenosine. editing frequencies used differential editing analysis, conducted using raw counts, however useful filtering visualization. can next subset summarizedExperiment object exclude low frequency editing events. analysis require editing site shows editing least 1 sample, least 5 counts sample. object filtered, can prepare DE. means making new object contains assay read counts alt ref alleles single matrix.","code":"se_filtered <- calc_edit_frequency(rse,     edit_from = \"A\",     edit_to = \"G\",     drop = TRUE ) has_editing <- rowSums(assay(se_filtered, \"edit_freq\") > 0) >= 1 has_depth <- rowSums(((assay(se_filtered, \"nRef\") +     assay(se_filtered, \"nAlt\")) >= 5)) == ncol(se_filtered)  se_filtered <- se_filtered[has_editing & has_depth, ] se_filtered ## class: RangedSummarizedExperiment  ## dim: 608 6  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(608): chr18_204625_+ chr18_204626_+ ... chr18_80158602_- ##   chr18_80158603_- ## rowData names(3): REF rbpz vpb ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(5): sample genotype_treatment genotype n_sites ##   edit_idx deobj <- prep_for_de(se_filtered,     min_prop = 0.1,     max_prop = 0.9,     min_samples = 3 )  assay(deobj, \"counts\")[1:3, 1:6] ##                  SRR5564260_dedup_sorted.bam_ref ## chr18_692390_-                                 6 ## chr18_692402_-                                 5 ## chr18_21631169_+                               8 ##                  SRR5564261_dedup_sorted.bam_ref ## chr18_692390_-                                12 ## chr18_692402_-                                10 ## chr18_21631169_+                              10 ##                  SRR5564269_dedup_sorted.bam_ref ## chr18_692390_-                                13 ## chr18_692402_-                                13 ## chr18_21631169_+                              15 ##                  SRR5564270_dedup_sorted.bam_ref ## chr18_692390_-                                18 ## chr18_692402_-                                14 ## chr18_21631169_+                              10 ##                  SRR5564271_dedup_sorted.bam_ref ## chr18_692390_-                                13 ## chr18_692402_-                                10 ## chr18_21631169_+                               3 ##                  SRR5564277_dedup_sorted.bam_ref ## chr18_692390_-                                 8 ## chr18_692402_-                                 3 ## chr18_21631169_+                               4"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing-deseq2","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Run differential editing (DESeq2)","title":"Introducing the raer package","text":"stage, can use object perform DE can continue pre built functions differential editing, use design design <- ~0 + condition:sample + condition:count. samples, can leave combine sample name shows treatment control. results identical close. hands, genes come , p values log fold change values slightly different. probably best update levels object, don’t, still work. returns list containing dds object, full results, significant results, model matrix.","code":"de_results <- perform_de(deobj,     sample_col = \"sample\",     condition_col = \"genotype\",     condition_control = \"Wildtype\",     condition_treatment = \"ADAR1KO\" ) de_results$sig_results[1:5, ] ##                      logFC   logCPM        LR       PValue      FDR ## chr18_50393235_+ -8.033976 21.73892 11.360332 0.0007502942 0.020463 ## chr18_35248579_+ -8.129393 22.69356 10.096657 0.0014853852 0.020463 ## chr18_23297504_- -7.692014 21.72512 10.028647 0.0015412421 0.020463 ## chr18_21631272_+ -7.091754 20.75260  9.796561 0.0017483853 0.020463 ## chr18_50392804_+ -7.446234 21.07996  9.785101 0.0017593156 0.020463 top_sites <- rownames(de_results$sig_results)[1:20]  Heatmap(assay(se_filtered, \"edit_freq\")[top_sites, ],     col = viridis(100),     column_labels = se_filtered$genotype_treatment ) unlink(data_dir) sessionInfo() ## R Under development (unstable) (2023-03-02 r83926) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] rtracklayer_1.59.1          viridis_0.6.2               ##  [3] viridisLite_0.4.1           ComplexHeatmap_2.15.0       ##  [5] DESeq2_1.39.7               SummarizedExperiment_1.29.1 ##  [7] Biobase_2.59.0              GenomicRanges_1.51.4        ##  [9] GenomeInfoDb_1.35.15        IRanges_2.33.0              ## [11] S4Vectors_0.37.4            BiocGenerics_0.45.0         ## [13] MatrixGenerics_1.11.0       matrixStats_0.63.0          ## [15] raer_0.99.0                 BiocStyle_2.27.1            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3       jsonlite_1.8.4           ##   [3] shape_1.4.6              magrittr_2.0.3           ##   [5] GenomicFeatures_1.51.4   rmarkdown_2.20           ##   [7] GlobalOptions_0.1.2      fs_1.6.1                 ##   [9] BiocIO_1.9.2             zlibbioc_1.45.0          ##  [11] ragg_1.2.5               vctrs_0.5.2              ##  [13] memoise_2.0.1            Cairo_1.6-0              ##  [15] Rsamtools_2.15.1         RCurl_1.98-1.10          ##  [17] htmltools_0.5.4          progress_1.2.2           ##  [19] curl_5.0.0               sass_0.4.5               ##  [21] bslib_0.4.2              desc_1.4.2               ##  [23] cachem_1.0.7             GenomicAlignments_1.35.0 ##  [25] lifecycle_1.0.3          iterators_1.0.14         ##  [27] pkgconfig_2.0.3          Matrix_1.5-3             ##  [29] R6_2.5.1                 fastmap_1.1.1            ##  [31] GenomeInfoDbData_1.2.9   clue_0.3-64              ##  [33] digest_0.6.31            colorspace_2.1-0         ##  [35] AnnotationDbi_1.61.0     rprojroot_2.0.3          ##  [37] textshaping_0.3.6        RSQLite_2.3.0            ##  [39] filelock_1.0.2           fansi_1.0.4              ##  [41] httr_1.4.5               compiler_4.3.0           ##  [43] bit64_4.0.5              doParallel_1.0.17        ##  [45] BiocParallel_1.33.9      DBI_1.1.3                ##  [47] highr_0.10               R.utils_2.12.2           ##  [49] biomaRt_2.55.0           rappdirs_0.3.3           ##  [51] DelayedArray_0.25.0      rjson_0.2.21             ##  [53] tools_4.3.0              R.oo_1.25.0              ##  [55] glue_1.6.2               restfulr_0.0.15          ##  [57] cluster_2.1.4            generics_0.1.3           ##  [59] gtable_0.3.1             BSgenome_1.67.4          ##  [61] R.methodsS3_1.8.2        data.table_1.14.8        ##  [63] hms_1.1.2                xml2_1.3.3               ##  [65] utf8_1.2.3               XVector_0.39.0           ##  [67] foreach_1.5.2            pillar_1.8.1             ##  [69] stringr_1.5.0            limma_3.55.5             ##  [71] circlize_0.4.15          splines_4.3.0            ##  [73] dplyr_1.1.0              BiocFileCache_2.7.2      ##  [75] lattice_0.20-45          bit_4.0.5                ##  [77] tidyselect_1.2.0         locfit_1.5-9.7           ##  [79] Biostrings_2.67.0        knitr_1.42               ##  [81] gridExtra_2.3            bookdown_0.33            ##  [83] edgeR_3.41.6             xfun_0.37                ##  [85] stringi_1.7.12           yaml_2.3.7               ##  [87] evaluate_0.20            codetools_0.2-19         ##  [89] tibble_3.2.0             BiocManager_1.30.20      ##  [91] cli_3.6.0                systemfonts_1.0.4        ##  [93] munsell_0.5.0            jquerylib_0.1.4          ##  [95] Rcpp_1.0.10              dbplyr_2.3.1             ##  [97] png_0.1-8                XML_3.99-0.13            ##  [99] parallel_4.3.0           ellipsis_0.3.2           ## [101] pkgdown_2.0.7            ggplot2_3.4.1            ## [103] blob_1.2.3               prettyunits_1.1.1        ## [105] bitops_1.0-7             scales_1.2.1             ## [107] purrr_1.0.1              crayon_1.5.2             ## [109] GetoptLong_1.0.5         rlang_1.0.6              ## [111] KEGGREST_1.39.0"},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"characterizing-rna-editing-sites-in-single-cell-data","dir":"Articles","previous_headings":"","what":"Characterizing RNA editing sites in single cell data","title":"Identifying RNA editing sites in droplet single cell datasets","text":"vignette demonstrate use raer package examine RNA editing droplet-based single cell RNA-seq data.","code":""},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"preprocessing","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Preprocessing","title":"Identifying RNA editing sites in droplet single cell datasets","text":"example analysis use single cell dataset containing human PBMC cells 10x Genomics. single cell data processed using cellranger pipeline. BAM file contains tag (CB) indicates cell-barcode associated alignment, well tag containing inferred UMI sequence (UB).","code":""},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"single-cell-editing-analysis","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Single cell editing analysis","title":"Identifying RNA editing sites in droplet single cell datasets","text":"subset human PBMC scRNA-seq dataset 10x Genomics, along needed files can downloaded using download_human_pbmc(). Next ’ll load SingleCellExperiment cell-type annotations.  Next ’ll select editing sites query. analysis use sites Rediportal database. editing sites interest known, one option perform two pass operation. First, identify editing sites treating data bulk-RNA-seq experiment, using example pileup_sites(). filter sites establish set high confidence sites query single cell mode. raer provides function, pileup_cells(), quantify edited non-edited UMI counts per cell barcode, collect site counts SingleCellExperiment. sites quantified specified using custom formatted GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named ref alt containing reference alternate base query. case interested ->editing, set ref alt G. Note ref alt bases reference strand. - strand interval bases complement + strand bases. pileup_cells() accepts FilterParam() class specifying performing read site filtering. Note pileup_cells() strand sensitive default, important ensure strand input sites correctly annotated, library type correct type data interest. 10x Genomics data, library type set fr-second-strand, indicating strand alignments matches strand RNA. Note bam_flags set include duplicate reads default. bamfile tag UMI sequence, can supplied umi_tag argument count 1 read CB-UMI pair position. strategy allows reads UMI counted multiple independent sites enabling recovery sequence variants counting 1 read per UMI. Processing time can reduced operating parallel across chromosomes, supplying BiocParallel backend BPPARAM argument (e.g. MultiCoreParam()). Next ’ll filter pileups find sites least 5 cells editing event, add editing information SingleCellExperiment altExp(). editing sites added gene expression SingleCellExperiment can use plotting methods previously developed single cell analysis. ’ll visualize editing sites highest edited read counts.      Alternatively can view top edited sites Heatmap, showing average number edited reads per site cell type.  Various tools Bioconductor can used provide additional annotation information RNA editing site. VariantAnnotation package provides powerful functionality annotate location editing site, provide information alterations codons splice sites.","code":"data_dir <- tempdir() fns <- download_human_pbmc(data_dir) fns ## $bam ##                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam  ## \"/tmp/RtmpBhaYkh/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam\"  ##  ## $bai ##                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai  ## \"/tmp/RtmpBhaYkh/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai\"  ##  ## $edit_sites ##                   rediportal_chr16.bed.gz  ## \"/tmp/RtmpBhaYkh/rediportal_chr16.bed.gz\"  ##  ## $sce ##                   sce.rds  ## \"/tmp/RtmpBhaYkh/sce.rds\" bam_fn <- fns$bam bed_fn <- fns$edit_sites sce <- readRDS(fns$sce) sce ## class: SingleCellExperiment  ## dim: 36601 500  ## metadata(2): Samples mkrs ## assays(2): counts logcounts ## rownames(36601): MIR1302-2HG FAM138A ... AC007325.4 AC007325.2 ## rowData names(3): ID Symbol Type ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(8): Sample Barcode ... r celltype ## reducedDimNames(2): PCA UMAP ## mainExpName: NULL ## altExpNames(0): plotUMAP(sce, colour_by = \"celltype\") gr <- import(bed_fn) gr$name <- NULL gr$score <- NULL gr$REF <- \"A\" gr$ALT <- \"G\" gr ## GRanges object with 785208 ranges and 2 metadata columns: ##            seqnames    ranges strand |         REF         ALT ##               <Rle> <IRanges>  <Rle> | <character> <character> ##        [1]    chr16     22083      - |           A           G ##        [2]    chr16     22101      - |           A           G ##        [3]    chr16     22107      - |           A           G ##        [4]    chr16     22113      - |           A           G ##        [5]    chr16     22114      - |           A           G ##        ...      ...       ...    ... .         ...         ... ##   [785204]    chr16  90219996      + |           A           G ##   [785205]    chr16  90220035      + |           A           G ##   [785206]    chr16  90220081      + |           A           G ##   [785207]    chr16  90220095      + |           A           G ##   [785208]    chr16  90220135      + |           A           G ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths outdir <- file.path(tempdir(), \"sc_edits\") cbs <- colnames(sce) e_sce <- pileup_cells(     bamfile = bam_fn,     sites = gr,     cell_barcodes = cbs,     output_directory = outdir,     cb_tag = \"CB\",     umi_tag = \"UB\",     param = FilterParam(         min_base_quality = 30L,         library_type = \"fr-second-strand\",         min_variant_reads = 1L,         trim_5p = 5L,         trim_3p = 5L     ),     verbose = FALSE ) e_sce ## class: SingleCellExperiment  ## dim: 4427 500  ## metadata(0): ## assays(2): nRef nAlt ## rownames(4427): chr16:83540_1_A_G chr16:83621_1_A_G ... ##   chr16:31453268_2_A_G chr16:31454303_2_A_G ## rowData names(2): ref alt ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(1): id ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): dir(outdir) ## [1] \"barcodes.txt.gz\" \"counts.mtx.gz\"   \"sites.txt.gz\" e_sce <- e_sce[rowSums(assays(e_sce)$nAlt > 0) >= 5, ] e_sce <- calc_edit_frequency(e_sce, replace_na = FALSE) altExp(sce) <- e_sce[, colnames(sce)] to_plot <- rownames(altExp(sce))[order(rowSums(assay(altExp(sce), \"nAlt\")), decreasing = TRUE)]  lapply(to_plot[1:5], function(x) {     plotUMAP(sce, colour_by = x, by_exprs_values = \"nAlt\") }) ## [[1]] ##  ## [[2]] ##  ## [[3]] ##  ## [[4]] ##  ## [[5]] altExp(sce)$cell_type <- sce$celltype  plotGroupedHeatmap(altExp(sce),     features = to_plot[1:25],     group = \"cell_type\",     exprs_values = \"nAlt\" ) sessionInfo() ## R Under development (unstable) (2023-03-02 r83926) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] rtracklayer_1.59.1          Rsamtools_2.15.1            ##  [3] Biostrings_2.67.0           XVector_0.39.0              ##  [5] scater_1.27.6               ggplot2_3.4.1               ##  [7] scuttle_1.9.4               SingleCellExperiment_1.21.0 ##  [9] SummarizedExperiment_1.29.1 Biobase_2.59.0              ## [11] GenomicRanges_1.51.4        GenomeInfoDb_1.35.15        ## [13] IRanges_2.33.0              S4Vectors_0.37.4            ## [15] BiocGenerics_0.45.0         MatrixGenerics_1.11.0       ## [17] matrixStats_0.63.0          raer_0.99.0                 ## [19] BiocStyle_2.27.1            ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3        jsonlite_1.8.4            ##   [3] magrittr_2.0.3            ggbeeswarm_0.7.1          ##   [5] GenomicFeatures_1.51.4    farver_2.1.1              ##   [7] rmarkdown_2.20            fs_1.6.1                  ##   [9] BiocIO_1.9.2              zlibbioc_1.45.0           ##  [11] ragg_1.2.5                vctrs_0.5.2               ##  [13] memoise_2.0.1             DelayedMatrixStats_1.21.0 ##  [15] RCurl_1.98-1.10           htmltools_0.5.4           ##  [17] progress_1.2.2            curl_5.0.0                ##  [19] BiocNeighbors_1.17.1      sass_0.4.5                ##  [21] bslib_0.4.2               desc_1.4.2                ##  [23] cachem_1.0.7              GenomicAlignments_1.35.0  ##  [25] lifecycle_1.0.3           pkgconfig_2.0.3           ##  [27] rsvd_1.0.5                Matrix_1.5-3              ##  [29] R6_2.5.1                  fastmap_1.1.1             ##  [31] GenomeInfoDbData_1.2.9    digest_0.6.31             ##  [33] colorspace_2.1-0          AnnotationDbi_1.61.0      ##  [35] rprojroot_2.0.3           irlba_2.3.5.1             ##  [37] textshaping_0.3.6         RSQLite_2.3.0             ##  [39] beachmat_2.15.0           filelock_1.0.2            ##  [41] labeling_0.4.2            fansi_1.0.4               ##  [43] httr_1.4.5                compiler_4.3.0            ##  [45] bit64_4.0.5               withr_2.5.0               ##  [47] BiocParallel_1.33.9       viridis_0.6.2             ##  [49] DBI_1.1.3                 highr_0.10                ##  [51] R.utils_2.12.2            biomaRt_2.55.0            ##  [53] rappdirs_0.3.3            DelayedArray_0.25.0       ##  [55] rjson_0.2.21              tools_4.3.0               ##  [57] vipor_0.4.5               beeswarm_0.4.0            ##  [59] R.oo_1.25.0               glue_1.6.2                ##  [61] restfulr_0.0.15           grid_4.3.0                ##  [63] generics_0.1.3            gtable_0.3.1              ##  [65] BSgenome_1.67.4           R.methodsS3_1.8.2         ##  [67] data.table_1.14.8         hms_1.1.2                 ##  [69] BiocSingular_1.15.0       ScaledMatrix_1.7.0        ##  [71] xml2_1.3.3                utf8_1.2.3                ##  [73] ggrepel_0.9.3             pillar_1.8.1              ##  [75] stringr_1.5.0             dplyr_1.1.0               ##  [77] BiocFileCache_2.7.2       lattice_0.20-45           ##  [79] bit_4.0.5                 tidyselect_1.2.0          ##  [81] knitr_1.42                gridExtra_2.3             ##  [83] bookdown_0.33             xfun_0.37                 ##  [85] pheatmap_1.0.12           stringi_1.7.12            ##  [87] yaml_2.3.7                evaluate_0.20             ##  [89] codetools_0.2-19          tibble_3.2.0              ##  [91] BiocManager_1.30.20       cli_3.6.0                 ##  [93] systemfonts_1.0.4         munsell_0.5.0             ##  [95] jquerylib_0.1.4           Rcpp_1.0.10               ##  [97] dbplyr_2.3.1              png_0.1-8                 ##  [99] XML_3.99-0.13             parallel_4.3.0            ## [101] ellipsis_0.3.2            pkgdown_2.0.7             ## [103] blob_1.2.3                prettyunits_1.1.1         ## [105] sparseMatrixStats_1.11.1  bitops_1.0-7              ## [107] viridisLite_0.4.1         scales_1.2.1              ## [109] purrr_1.0.1               crayon_1.5.2              ## [111] rlang_1.0.6               KEGGREST_1.39.0"},{"path":"https://rnabioco.github.io/raer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Riemondy. Author, maintainer. Kristen Wells-Wrasman. Author. Ryan Sheridan. Contributor. Jay Hesselberth. Contributor. . Copyright holder, funder.","code":""},{"path":"https://rnabioco.github.io/raer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemondy K, Wells-Wrasman K (2023). raer: RNA editing tools R. https://rnabioco.github.io/raer, https://github.com/rnabioco/raer.","code":"@Manual{,   title = {raer: RNA editing tools in R},   author = {Kent Riemondy and Kristen Wells-Wrasman},   year = {2023},   note = {https://rnabioco.github.io/raer, https://github.com/rnabioco/raer}, }"},{"path":"https://rnabioco.github.io/raer/index.html","id":"raer-","dir":"","previous_headings":"","what":"RNA editing tools in R","title":"RNA editing tools in R","text":"raer facilitates analysis RNA adenosine editing Bioconductor ecosystem. 🚧 raer active development functionality may change 🚧","code":""},{"path":"https://rnabioco.github.io/raer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RNA editing tools in R","text":"can install development version raer GitHub :","code":"# install.packages(\"BiocManager\") BiocManager::install(\"rnabioco/raer\")"},{"path":"https://rnabioco.github.io/raer/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"RNA editing tools in R","text":"raer provides methods compute per site read count summaries BAM alignment files, either known sites, detected sites. facilitate comparisons across groups, base count data genomic coordinates stored RangedSummarizedExperiment. FilterParam() class holds multiple options customizing output pileup_sites().","code":"library(raer) bam1fn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  bams <- c(\"ko\" = bam1fn, \"wt\" = bam2fn)  rse <- pileup_sites(bams, fafn) suppressMessages(library(SummarizedExperiment)) rse #> class: RangedSummarizedExperiment  #> dim: 1695 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(1695): SSR3_1_- SSR3_2_- ... DHFR_517_- DHFR_518_- #> rowData names(3): REF rbpz vpb #> colnames(2): ko wt #> colData names(1): sample assays(rse) #> List of length 7 #> names(7): ALT nRef nAlt nA nT nC nG colData(rse) #> DataFrame with 2 rows and 1 column #>         sample #>    <character> #> ko          ko #> wt          wt assays(rse)$nRef[1:4, ] #>          ko wt #> SSR3_1_- 13 12 #> SSR3_2_- 14 12 #> SSR3_3_- 14 12 #> SSR3_4_- 15 12 assays(rse)$nAlt[1:4, ] #>          ko wt #> SSR3_1_-  0  0 #> SSR3_2_-  0  0 #> SSR3_3_-  0  0 #> SSR3_4_-  0  0 fp <- FilterParam(   only_keep_variants = TRUE,   library_type = \"fr-first-strand\",   min_depth = 2 )  rse <- pileup_sites(bams, fafn, param = fp) rse #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(3): REF rbpz vpb #> colnames(2): ko wt #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"RNA editing tools in R","text":"raer functionality builds previous work: Python package: REDItools Picardi E, Pesole G Java tool: JACUSA2 Piechotta M et al Python-based pipeline: deNovo-Detect Gabey O et al Java-based tool: RNAEditingIndexer Roth SH et al","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Utility function map annotations GRanges rowData SummarizedExperiment GRanges object. multiple features overlap concatenated comma separated values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"annot_from_gr(obj, gr, cols_to_map, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"obj RangedSummarizedExperiment GRanges object gr GRanges annotations map obj cols_to_map character vector columns gr map obj. vector names, names column names output obj ... additional arguments pass GenomicRanges::findOverlaps()","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Either SummarizedExperiment GRanges object additional annotations provided supplied GRanges object.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, #>     append, as.data.frame, basename, cbind, colnames, dirname, #>     do.call, duplicated, eval, evalq, get, grep, grepl, #>     intersect, is.unsorted, lapply, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rownames, #>     sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians data(rse_adar_ifn) gr <- GRanges(rep(c(\"SSR3\", \"SPCS3\"), c(5, 15)),     IRanges(seq(1, 500, by = 25), width = 50),     strand = \"+\" )  gr$feature <- sample(1:100, size = 20) gr$id <- sample(LETTERS, size = 20)  rse <- annot_from_gr(rse_adar_ifn, gr, c(feature_set = \"feature\", \"id\")) rowData(rse) #> DataFrame with 74 rows and 5 columns #>                    REF       rbpz        vpb feature_set          id #>            <character>  <numeric>  <numeric> <character> <character> #> SSR3_102_-           T   1.489645        Inf          NA          NA #> SSR3_125_-           C   0.356711        Inf          NA          NA #> SSR3_156_-           C   1.073919        Inf          NA          NA #> SSR3_176_-           A  -0.387238 0.00686469          NA          NA #> SSR3_198_-           A   1.040581        Inf          NA          NA #> ...                ...        ...        ...         ...         ... #> DHFR_397_-           A -1.5715051        Inf          NA          NA #> DHFR_399_-           G -0.1203878        Inf          NA          NA #> DHFR_423_-           T -0.0468703        Inf          NA          NA #> DHFR_430_-           A -1.5389404        Inf          NA          NA #> DHFR_513_-           T -0.7160074        Inf          NA          NA"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate known SNP positions — annot_snps","title":"Annotate known SNP positions — annot_snps","text":"function annotate GRanges rowRanges SummarizedExperiment SNP positions SNP package","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate known SNP positions — annot_snps","text":"","code":"annot_snps(obj, ...)  # S3 method for GRanges annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )  # S3 method for SummarizedExperiment annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate known SNP positions — annot_snps","text":"obj GRanges SummarizedExperiment  object ... generic, arguments pass specific methods. Unused now. dbsnp SNPlocs package, see available packages BSgenome::available.SNPs() chrom operate specified chromosome col_to_aggr column SNPlocs package add input. multiple SNPs overlap values concatenated comma separated values. drop TRUE, remove sites overlap SNPs","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate known SNP positions — annot_snps","text":"Either GRanges SummarizedExperiment object new column \"snp\" added information \"col_to_aggr\"","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate known SNP positions — annot_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {     gr <- GRanges(rep(\"22\", 10),         IRanges(             seq(10510077,                 10610077,                 by = 1000             )[1:10],             width = 250         ),         strand = \"+\"     )     annot_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> Loading required package: SNPlocs.Hsapiens.dbSNP144.GRCh38 #> Loading required package: BSgenome #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Loading required package: rtracklayer #> Warning: more than one seqlevels style supplied, using the 1st one only #> GRanges object with 10 ranges and 1 metadata column: #>        seqnames            ranges strand |   RefSNP_id #>           <Rle>         <IRanges>  <Rle> | <character> #>    [1]       22 10510077-10510326      + |             #>    [2]       22 10511077-10511326      + |   rs4022986 #>    [3]       22 10512077-10512326      + |             #>    [4]       22 10513077-10513326      + |             #>    [5]       22 10514077-10514326      + |             #>    [6]       22 10515077-10515326      + |             #>    [7]       22 10516077-10516326      + |             #>    [8]       22 10517077-10517326      + |             #>    [9]       22 10518077-10518326      + |             #>   [10]       22 10519077-10519326      + |             #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function perform pileup specified repeat regions return summary AEI metric.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"calc_AEI(   bam_fn,   fasta_fn,   alu_ranges = NULL,   txdb = NULL,   snp_db = NULL,   param = FilterParam(),   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"bam_fn bam file fasta_fn fasta alu_ranges GRanges regions query calculating AEI, typically ALU repeats. txdb txdb object, supplied, used subset alu_ranges found overlapping genes. Alternatively GRanges object gene coordinates. snp_db either SNPlocs package, GPos, GRanges object. supplied, used exclude polymorphic positions prior calculating AEI. calc_AEI() used many times, one save time first identifying SNPs overlap supplied alu_ranges, passing GRanges snp_db rather supplying known SNPs (see get_overlapping_snps()). param object class FilterParam() specify various filters apply reads sites pileup. BPPARAM BiocParallelParam object specifying parallel options operating chromosomes. verbose report progress chromosome?","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"named list AEI index computed allelic combinations. correctly computed signal A_G index higher alleles (T_C), likely derived noise polymorphisms.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"suppressPackageStartupMessages(library(Rsamtools)) bamfn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") dummy_alu_ranges <- scanFaIndex(fafn) calc_AEI(bamfn, fafn, dummy_alu_ranges) #> $A_C #> [1] 0 #>  #> $A_G #> [1] 2.298586 #>  #> $A_T #> [1] 0.1292293 #>  #> $C_A #> [1] 0.2142033 #>  #> $C_G #> [1] 0.01650982 #>  #> $C_T #> [1] 0.2635046 #>  #> $G_A #> [1] 0.3170769 #>  #> $G_C #> [1] 0 #>  #> $G_T #> [1] 0 #>  #> $T_A #> [1] 0 #>  #> $T_C #> [1] 0.0116198 #>  #> $T_G #> [1] 0.0116198 #>"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds editing frequencies — calc_edit_frequency","title":"Adds editing frequencies — calc_edit_frequency","text":"Adds editing frequencies existing SummarizedExperiment object (created merge_pileups). SummarizedExperiment new assay editing frequencies site (edit_freq), depth coverage computed using indicatededited nucleotides (depth`) new colData columns number edited sites (n_sites) fraction edits (edit_idx) returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"calc_edit_frequency(   se,   edit_from = NULL,   edit_to = NULL,   drop = FALSE,   replace_na = TRUE,   edit_frequency = 0,   min_count = 1 )"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds editing frequencies — calc_edit_frequency","text":"se SummarizedExperiment object created merge_pileups edit_from nucleotide (, C, G, T) corresponding nucleotide expect reference. Ex. editing events, \"\". NULL, editing frequencies calculated using nAlt nRef values. edit_to nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". NULL, editing frequencies calculated using nAlt nRef values. drop TRUE, summarizedExperiment returned retain sites matching specified edit_from edit_to bases. replace_na TRUE, NA NaN editing frequencies coerced 0. edit_frequency edit frequency cutoff used calculating number sites. Set 0 require non-zero editing frequency. number sites stored n_sites colData. min_count minimum number reads required enumerating number editing sites detected.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds editing frequencies — calc_edit_frequency","text":"SummarizedExperiment::SummarizedExperiment supplemented edit_freq assay.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"library(SummarizedExperiment) data(rse_adar_ifn) rse <- calc_edit_frequency(rse_adar_ifn) assay(rse, \"edit_freq\")[1:5, ] #>                    wt   adar1_ko #> SSR3_102_- 0.00000000 0.07692308 #> SSR3_125_- 0.04545455 0.00000000 #> SSR3_156_- 0.03846154 0.00000000 #> SSR3_176_- 0.66666667 0.00000000 #> SSR3_198_- 0.04000000 0.00000000"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply strand correction using gene annotations — correct_strand","title":"Apply strand correction using gene annotations — correct_strand","text":"Gene annotations used infer likely strand editing sites. function operate unstranded datasets processed using \"genomic-unstranded\" library type reports variants respect + strand sites. strand editing site assigned strand overlapping features genes_gr object. Sites -overlap, overlapping features conflicting strands (+ -) removed.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"correct_strand(rse, genes_gr)"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply strand correction using gene annotations — correct_strand","text":"rse RangedSummarizedExperiment object containing editing sites processed \"genomic-unstranded\" setting genes_gr GRanges object containing reference features annotate strand editing sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply strand correction using gene annotations — correct_strand","text":"RangedSummarizedExperiment object containing pileup assays, strand corrected based supplied genomic intervals.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"suppressPackageStartupMessages(library(\"GenomicRanges\"))  bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") fp <- FilterParam(library_type = \"genomic-unstranded\") rse <- pileup_sites(bamfn, fafn, param = fp)  genes <- GRanges(c(     \"DHFR:200-400:+\",     \"SPCS3:100-200:-\",     \"SSR3:3-10:-\",     \"SSR3:6-12:+\" ))  correct_strand(rse, genes) #> class: RangedSummarizedExperiment  #> dim: 307 1  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(307): SSR3_3_+ SSR3_4_+ ... DHFR_399_+ DHFR_400_+ #> rowData names(3): REF rbpz vpb #> colnames(1): SRR5564269_Aligned.sortedByCoord.out.md.bam #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/download_GSE99249.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GSE99249 BAM files and related data — download_GSE99249","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"function download ~ 250 MB data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_GSE99249.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"download_GSE99249(path)"},{"path":"https://rnabioco.github.io/raer/reference/download_GSE99249.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"path path directory download data","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_GSE99249.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"named list paths BAM files, FASTA file bed file known editing sites hg38 chromosome 18.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/download_GSE99249.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"# \\donttest{ td <- tempdir() download_GSE99249(td) #> $bams #>                   SRR5564260_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564260_dedup_sorted.bam\"  #>                   SRR5564261_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564261_dedup_sorted.bam\"  #>                   SRR5564269_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564269_dedup_sorted.bam\"  #>                   SRR5564270_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564270_dedup_sorted.bam\"  #>                   SRR5564271_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564271_dedup_sorted.bam\"  #>                   SRR5564277_dedup_sorted.bam  #> \"/tmp/Rtmpm1ltol/SRR5564277_dedup_sorted.bam\"  #>  #> $bai #>                   SRR5564260_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564260_dedup_sorted.bam.bai\"  #>                   SRR5564261_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564261_dedup_sorted.bam.bai\"  #>                   SRR5564269_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564269_dedup_sorted.bam.bai\"  #>                   SRR5564270_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564270_dedup_sorted.bam.bai\"  #>                   SRR5564271_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564271_dedup_sorted.bam.bai\"  #>                   SRR5564277_dedup_sorted.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR5564277_dedup_sorted.bam.bai\"  #>  #> $fasta #>                   chr18.fasta.bgz  #> \"/tmp/Rtmpm1ltol/chr18.fasta.bgz\"  #>  #> $bed #>                   rediportal_hg38_chr18.bed.gz  #> \"/tmp/Rtmpm1ltol/rediportal_hg38_chr18.bed.gz\"  #>  # }"},{"path":"https://rnabioco.github.io/raer/reference/download_NA12878.html","id":null,"dir":"Reference","previous_headings":"","what":"Download NA12878 BAM files and related data — download_NA12878","title":"Download NA12878 BAM files and related data — download_NA12878","text":"function download ~ 5 GB data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_NA12878.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download NA12878 BAM files and related data — download_NA12878","text":"","code":"download_NA12878(path)"},{"path":"https://rnabioco.github.io/raer/reference/download_NA12878.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download NA12878 BAM files and related data — download_NA12878","text":"path path directory download data","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_NA12878.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download NA12878 BAM files and related data — download_NA12878","text":"named list paths RNA-seq WGS BAM file, FASTA file hg38 chromosome 4.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/download_NA12878.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download NA12878 BAM files and related data — download_NA12878","text":"","code":"# \\donttest{ td <- tempdir() download_NA12878(td) #> $bams #>                              ERR262996_dedup_chr4_sub.bam  #>            \"/tmp/Rtmpm1ltol/ERR262996_dedup_chr4_sub.bam\"  #>                   SRR1258218_Aligned.sorted.dedup_sub.bam  #> \"/tmp/Rtmpm1ltol/SRR1258218_Aligned.sorted.dedup_sub.bam\"  #>  #> $bai #>                              ERR262996_dedup_chr4_sub.bam.bai  #>            \"/tmp/Rtmpm1ltol/ERR262996_dedup_chr4_sub.bam.bai\"  #>                   SRR1258218_Aligned.sorted.dedup_sub.bam.bai  #> \"/tmp/Rtmpm1ltol/SRR1258218_Aligned.sorted.dedup_sub.bam.bai\"  #>  #> $fasta #>                   hg38_chr4.fa.bgz  #> \"/tmp/Rtmpm1ltol/hg38_chr4.fa.bgz\"  #>  #> $snps #>                   chr4snps.bed.gz  #> \"/tmp/Rtmpm1ltol/chr4snps.bed.gz\"  #>  #> $rmsk #>                   rmsk_hg38.tsv.gz  #> \"/tmp/Rtmpm1ltol/rmsk_hg38.tsv.gz\"  #>  # }"},{"path":"https://rnabioco.github.io/raer/reference/download_human_pbmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Download 10x PMBC bam file and related data — download_human_pbmc","title":"Download 10x PMBC bam file and related data — download_human_pbmc","text":"function download < 1 GB data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_human_pbmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download 10x PMBC bam file and related data — download_human_pbmc","text":"","code":"download_human_pbmc(path)"},{"path":"https://rnabioco.github.io/raer/reference/download_human_pbmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download 10x PMBC bam file and related data — download_human_pbmc","text":"path path directory download data","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_human_pbmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download 10x PMBC bam file and related data — download_human_pbmc","text":"named list paths bam file, fasta file, bed file editing_sites, .rds file SingleCellExperiment","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/download_human_pbmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download 10x PMBC bam file and related data — download_human_pbmc","text":"","code":"# \\donttest{ td <- tempdir() download_human_pbmc(td) #> $bam #>                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam  #> \"/tmp/Rtmpm1ltol/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam\"  #>  #> $bai #>                   10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai  #> \"/tmp/Rtmpm1ltol/10k_PBMC_3p_nextgem_Chromium_X_intron_possorted_chr16_rp.bam.bai\"  #>  #> $edit_sites #>                   rediportal_chr16.bed.gz  #> \"/tmp/Rtmpm1ltol/rediportal_chr16.bed.gz\"  #>  #> $sce #>                   sce.rds  #> \"/tmp/Rtmpm1ltol/sce.rds\"  #>  # }"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out clustered sequence variants — filter_clustered_variants","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"Sequence variants multiple allele types (e.g., >G, >C) nearby regions can due mis-alignment. Remove variants multiple allele types present within given distance genomic transcriptome coordinate space.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"filter_clustered_variants(   se,   txdb,   regions = c(\"transcript\", \"genome\"),   variant_dist = 100 )"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"se SummarizedExperiment::SummarizedExperiment containing editing sites txdb GenomicFeatures::TxDb regions One transcript genome, specifying coordinate system calculating distances variants. variant_dist distance nucleotides determining clustered variants","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"SummarizedExperiment::SummarizedExperiment sites removed object dependent filtering applied.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {     data(rse_adar_ifn)     rse <- filter_multiallelic(rse_adar_ifn)      filter_clustered_variants(         rse,         TxDb.Hsapiens.UCSC.hg38.knownGene     ) } #> Loading required package: TxDb.Hsapiens.UCSC.hg38.knownGene #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> ℹ `filter_multiallelic()`: removed 2 sites from 74 (72 remain) #> Warning: GRanges object contains 6 out-of-bound ranges located on #>   sequences SSR3, SPCS3, and DHFR. Note that ranges located on a #>   sequence whose length is unknown (NA) or on a circular sequence #>   are not considered out-of-bound (use seqlengths() and #>   isCircular() to get the lengths and circularity flags of the #>   underlying sequences). You can use trim() to trim these ranges. #>   See ?`trim,GenomicRanges-method` for more information. #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> ℹ `filter_clustered_variants()`: removed 70 sites from 72 (2 remain) #> class: RangedSummarizedExperiment  #> dim: 2 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(2): SSR3_502_- SPCS3_99_+ #> rowData names(4): REF rbpz vpb ALT #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out multi-allelic sites — filter_multiallelic","title":"Filter out multi-allelic sites — filter_multiallelic","text":"Remove sites multiple variant bases SummarizedExperiment. rowData() gains new column, ALT, contains variant allele detected site.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"filter_multiallelic(se)"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out multi-allelic sites — filter_multiallelic","text":"se SummarizedExperiment::SummarizedExperiment","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out multi-allelic sites — filter_multiallelic","text":"SummarizedExperiment::SummarizedExperiment multiallelic sites removed.  new column,ALT added rowData() indicating single allele present site.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"data(rse_adar_ifn) filter_multiallelic(rse_adar_ifn) #> ℹ `filter_multiallelic()`: removed 2 sites from 74 (72 remain) #> class: RangedSummarizedExperiment  #> dim: 72 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(72): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(4): REF rbpz vpb ALT #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out sites near splice sites — filter_splice_variants","title":"Filter out sites near splice sites — filter_splice_variants","text":"Remove editing sites found regions proximal annotated splice junctions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"filter_splice_variants(se, txdb, splice_site_dist = 4, ignore.strand = FALSE)"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out sites near splice sites — filter_splice_variants","text":"se SummarizedExperiment::SummarizedExperiment editing sites txdb GenomicFeatures::TxDb splice_site_dist distance splice site ignore.strand TRUE, ignore strand comparing editing sites splice sites","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out sites near splice sites — filter_splice_variants","text":"SummarizedExperiment::SummarizedExperiment sites adjacent splice sites removed.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {     data(rse_adar_ifn)     filter_splice_variants(         rse_adar_ifn,         TxDb.Hsapiens.UCSC.hg38.knownGene     ) } #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) #> ℹ `filter_splice_variants()`: removed 0 sites from 74 (74 remain) #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(3): REF rbpz vpb #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SNPs overlapping intervals — get_overlapping_snps","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"function find SNPs overlapping supplied intervals using SNPlocs package. SNPs can returned memory (GPos objects) written disk bed-file (optionally compressed).","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"get_overlapping_snps(gr, snpDb, output_file = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"gr Intervals query snpDb reference ot SNPlocs database output_file path output file. supplied file can optionally compressed including \".gz\" suffix. supplied, SNPS returned GenomicRanges::GPos object","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"GPos object containing SNPs overlapping supplied genomic intervals","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {     gr <- GRanges(rep(\"22\", 10),         IRanges(seq(10510077, 10610077, by = 1000)[1:10], width = 250),         strand = \"+\"     )     get_overlapping_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> UnstitchedGPos object with 1 position and 0 metadata columns: #>       seqnames       pos strand #>          <Rle> <integer>  <Rle> #>   [1]       22  10511116      * #>   ------- #>   seqinfo: 25 sequences (1 circular) from GRCh38.p2 genome"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regions surrounding splice sites — get_splice_sites","title":"Extract regions surrounding splice sites — get_splice_sites","text":"Find intervals containing splice sites adjacent regions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"get_splice_sites(txdb, slop = 4)"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regions surrounding splice sites — get_splice_sites","text":"txdb GenomicFeatures::TxDb slop number bases upstream downstream splice site extract","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regions surrounding splice sites — get_splice_sites","text":"GenomicRanges::GRanges containing positions splice sites, flanking bases.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {     txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene     res <- get_splice_sites(txdb)     res[1:5] } #> GRanges object with 5 ranges and 0 metadata columns: #>       seqnames      ranges strand #>          <Rle>   <IRanges>  <Rle> #>   [1]     chr1 12054-12061      + #>   [2]     chr1 12173-12182      + #>   [3]     chr1 12224-12231      + #>   [4]     chr1 12224-12231      + #>   [5]     chr1 12607-12616      + #>   ------- #>   seqinfo: 640 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/merge_pileups.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge pileups into a RangedSummarizedExperiment — merge_pileups","title":"Merge pileups into a RangedSummarizedExperiment — merge_pileups","text":"Create RangedSummarizedExperiment single list pileups (e.g., different samples) generated pileup_sites().","code":""},{"path":"https://rnabioco.github.io/raer/reference/merge_pileups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge pileups into a RangedSummarizedExperiment — merge_pileups","text":"","code":"merge_pileups(   plps,   assay_cols = c(\"ALT\", \"nRef\", \"nAlt\", \"nA\", \"nT\", \"nC\", \"nG\"),   sample_names = NULL,   fill_na = NULL,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/merge_pileups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge pileups into a RangedSummarizedExperiment — merge_pileups","text":"plps results running pileup_sites(), can one result, list results, named list results. named list given, colData named using names list. assay_cols character vector columns store assays sample_names list names added SE object. sample names given plps named list, default names (ie sample_1, sample_2, ..., sample_n) given warning printed. fill_na Numeric value replace NAs numeric matrices used plps computed independently min_nucleotide_count = 1, otherwise sites may set 0, although may coverage > 0 less min_nucleotide_count parameter. verbose print information progress","code":""},{"path":"https://rnabioco.github.io/raer/reference/merge_pileups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge pileups into a RangedSummarizedExperiment — merge_pileups","text":"RangedSummarizedExperiment populated assays specified assay_cols.","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing — perform_de","title":"Perform differential editing — perform_de","text":"Uses either edgeR DESeq2 perform differential editing analysis. work simple designs 1 treatment 1 control. complex designs, suggest perform . moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing — perform_de","text":"","code":"perform_de(   deobj,   type = \"edgeR\",   sample_col = \"sample\",   condition_col = \"condition\",   condition_control = NULL,   condition_treatment = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing — perform_de","text":"deobj SummarizedExperiment object prepared de prep_for_de type OPTIONAL edgeR DESeq run. Default edgeR sample_col OPTIONAL name column colData(deobj) contains sample information. Default sample. column named \"sample\", must provide appropriate sample column condition_col OPTIONAL name column colData(deobj) contains treatment information. Default condition, column named \"condition\", must provide appropriate condition column condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential editing — perform_de","text":"named list - de_obj: edgeR deseq object used differential editing analysis - results_full: Unfiltered differenital editing results - sig_results: Filtered differenial editing (FDR < 0.05) - model_matrix: model matrix used generating DE results","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential editing — perform_de","text":"","code":"library(SummarizedExperiment) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) names(bams) <- sample_ids  fp <- FilterParam(only_keep_variants = TRUE) rse <- pileup_sites(bams, fafn, param = fp) rse$condition <- substr(rse$sample, 1, 2)  rse <- calc_edit_frequency(rse) dse <- prep_for_de(rse) res <- perform_de(dse, condition_control = \"WT\", condition_treatment = \"KO\") #> Using classic mode. res$sig_results[1:5, ] #>                 logFC   logCPM        LR       PValue         FDR #> DHFR_361_- -11.147610 21.96719 13.393676 0.0002524741 0.006816801 #> SSR3_176_-  -8.000087 21.19460 11.166011 0.0008330957 0.011246792 #> SSR3_364_-  -5.600787 19.69710  9.086110 0.0025755817 0.016444635 #> DHFR_260_-  -8.108926 22.26785  8.548454 0.0034581581 0.016444635 #> SSR3_290_-  -4.839287 20.65403  8.454728 0.0036409569 0.016444635"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Pileup sites per cell — pileup_cells","title":"Pileup sites per cell — pileup_cells","text":"function perform pileup operation specified sites, returning counts Reference (e.g. unedited) Alternate (e.g. editing) bases. Current functionality process 10x genomic's style library, aligned bam file containing tag cell-barcode tag UMI. sites parameter specifies sites pileup. must GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named REF ALT containing reference alternate base query. See examples example format. site, bases overlapped reads examined, counts ref alt base enumerated cell barcode present. single base counted UMI sequence present cell.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pileup sites per cell — pileup_cells","text":"","code":"pileup_cells(   bamfile,   sites,   cell_barcodes,   output_directory,   chroms = NULL,   umi_tag = \"UB\",   cb_tag = \"CB\",   paired_end = FALSE,   param = FilterParam(),   BPPARAM = SerialParam(),   return_sce = TRUE,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pileup sites per cell — pileup_cells","text":"bamfile BAM file name sites GRanges object containing sites process. See examples valid formatting. cell_barcodes character vector single cell barcodes process. output_directory Output directory output files. generated exist. chroms character vector chromosomes process, supplied, sites present listed chromosomes processed umi_tag tag bam containing UMI sequence cb_tag tag bam containing cell barcode sequence paired_end set TRUE data paired end. param object class FilterParam() specify various filters apply reads sites pileup. Note min_variant_reads parameter, set > 0, specifies number variant reads site required order report site. E.g. set 2, least 2 reads (cell) must variant order report site. default 0 reports sites present sites object. BPPARAM BiocParallel instance. Parallel computation occurs across chromosomes. return_sce TRUE, data returned SingleCellExperiment, FALSE character vector output files, specified outfile_prefix, returned. verbose Display messages","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pileup sites per cell — pileup_cells","text":"Returns either SingleCellExperiment character vector paths files produced.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pileup sites per cell — pileup_cells","text":"","code":"library(Rsamtools) library(GenomicRanges) bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\")  gr <- GRanges(c(\"2:579:-\", \"2:625:-\", \"2:645:-\", \"2:589:-\", \"2:601:-\")) gr$REF <- c(rep(\"A\", 4), \"T\") gr$ALT <- c(rep(\"G\", 4), \"C\")  cbs <- unique(scanBam(bam_fn, param = ScanBamParam(tag = \"CB\"))[[1]]$tag$CB) cbs <- na.omit(cbs)  outdir <- tempdir() bai <- indexBam(bam_fn) on.exit(unlink(c(outdir, bai)))  fp <- FilterParam(library_type = \"fr-second-strand\") sce <- pileup_cells(bam_fn, gr, cbs, outdir, param = fp) #> Error: BiocParallel errors #>   1 remote errors, element index: 1 #>   0 unevaluated and other errors #>   first remote error: #> Error in (function (bamfn, id, sites, barcodes, outfile_prefix, chrom, : fail to load bamfile index for /__w/_temp/Library/raer/extdata/5k_neuron_mouse_possort.bam #>  sce #> Error in eval(expr, envir, enclos): object 'sce' not found  # example of processing multiple smart-seq2 style libraries  many_small_bams <- rep(bam_fn, 10) bam_ids <- LETTERS[1:10] pileup_cells(many_small_bams,     sites = gr,     cell_barcodes = bam_ids,     cb_tag = NULL,     umi_tag = NULL,     paired_end = TRUE,     outdir,     param = fp ) #> class: SingleCellExperiment  #> dim: 5 10  #> metadata(0): #> assays(2): nRef nAlt #> rownames(5): 2:579_2_A_G 2:625_2_A_G 2:645_2_A_G 2:589_2_A_G #>   2:601_2_T_C #> rowData names(2): ref alt #> colnames(10): A B ... I J #> colData names(1): id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate base counts using pileup — pileup_sites","title":"Generate base counts using pileup — pileup_sites","text":"Generate base counts using pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate base counts using pileup — pileup_sites","text":"","code":"pileup_sites(   bamfiles,   fafile,   sites = NULL,   region = NULL,   chroms = NULL,   param = FilterParam(),   outfile_prefix = NULL,   reads = NULL,   return_data = TRUE,   BPPARAM = SerialParam(),   bad_reads = NULL,   umi_tag = NULL,   verbose = FALSE )  FilterParam(   max_depth = 10000,   min_depth = 1L,   min_base_quality = 20L,   min_mapq = 0L,   library_type = \"fr-first-strand\",   bam_flags = NULL,   only_keep_variants = FALSE,   trim_5p = 0L,   trim_3p = 0L,   ftrim_5p = 0,   ftrim_3p = 0,   indel_dist = 0L,   splice_dist = 0L,   min_splice_overhang = 0L,   homopolymer_len = 0L,   max_mismatch_type = c(0L, 0L),   read_bqual = c(0, 0),   min_variant_reads = 0L,   min_allelic_freq = 0,   report_multiallelic = TRUE )"},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate base counts using pileup — pileup_sites","text":"bamfiles character vector paths 1 bam files. named, names included colData RangedSummarizedExperiment, otherwise colData populated basename bamfile. fafile path fasta file sites GRanges object containing regions sites process. region samtools region query string (.e. chr1:100-1000). Can combined sites, case sites filtered keep sites within region. chroms chromosomes process, used region. param object class FilterParam() specify various filters apply reads sites pileup. outfile_prefix Output prefix tabix indexed files. NULL, files produced. reads supplied fasta file written reads pass filters contain variants return_data TRUE, data returned RangedSummarizedExperiment, FALSE character vector tabix-index files, specified outfile_prefix, returned. BPPARAM BiocParallel class control parallel execution. Parallel processing occurs per chromosome, disabled run single region. bad_reads textfile containing read names exclude pileup. Readnames formated readid_1 readid_2 readid paired end first read paired-end second read single end data. umi_tag bam tag containing UMI sequence. supplied, multiple reads UMI sequence counted per position. verbose TRUE, report progress warnings. max_depth maximum read depth considered site min_depth min read depth needed report site min_base_quality min base quality score consider read pileup min_mapq minimum required MAPQ score, can vector values bam file library_type read orientation, one fr-first-strand, fr-second-strand, unstranded, genomic-unstranded. Can supply vector specify input bam. Unstranded library type reported based read alignment. genomic-unstranded report variants w.r.t + strand. bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() generate. only_keep_variants TRUE, variant sites reported (FALSE default), can vector input bamfile trim_5p Bases trim 5' end read alignments trim_3p Bases trim 3' end read alignments ftrim_5p Fraction bases trim 5' end read alignments ftrim_3p Fraction bases trim 3' end read alignments indel_dist Exclude read site occurs within given distance indel event read splice_dist Exclude read site occurs within given distance splicing event read min_splice_overhang Exclude read site located adjacent splice site overhang less given length. homopolymer_len Exclude site occurs within homopolymer given length max_mismatch_type Exclude read X different mismatch types (e.g --G, G--C, C--G, 3 mismatch types) Y # mismatches, must supplied integer vector length 2. e.g. c(X, Y). read_bqual Exclude read X percent bases base qualities less Y. Numeric vector length 2. e.g. c(0.25, 20) min_variant_reads Required number reads containing variant site reported. Calculated per bam file, 1 bam file >= min_variant_reads, site reported. min_allelic_freq minimum allelic frequency required variant reported ALT assays. report_multiallelic TRUE, report sites multiple variants passing filters. FALSE, site reported.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate base counts using pileup — pileup_sites","text":"RangedSummarizedExperiment vector output tabixed file names return_data FALSE.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate base counts using pileup — pileup_sites","text":"Multiple bam files can processed together, files written bam file. mode output regions consistent across files. min_mapq, only_keep_variants, library_type parameters can specified input files.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate base counts using pileup — pileup_sites","text":"","code":"library(SummarizedExperiment) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  rse <- pileup_sites(bamfn, fafn)  fp <- FilterParam(only_keep_variants = TRUE, min_depth = 55) pileup_sites(bamfn, fafn, param = fp) #> class: RangedSummarizedExperiment  #> dim: 7 1  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(7): DHFR_207_- DHFR_208_- ... DHFR_300_- DHFR_332_- #> rowData names(3): REF rbpz vpb #> colnames(1): SRR5564269_Aligned.sortedByCoord.out.md.bam #> colData names(1): sample   # using multiple bam files  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) names(bams) <- sample_ids  fp <- FilterParam(only_keep_variants = TRUE) rse <- pileup_sites(bams, fafn, param = fp) rse #> class: RangedSummarizedExperiment  #> dim: 74 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(3): REF rbpz vpb #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse$condition <- substr(rse$sample, 1, 2) assays(rse) #> List of length 7 #> names(7): ALT nRef nAlt nA nT nC nG  colData(rse) #> DataFrame with 6 rows and 2 columns #>          sample   condition #>     <character> <character> #> KO1         KO1          KO #> KO2         KO2          KO #> KO3         KO3          KO #> WT1         WT1          WT #> WT2         WT2          WT #> WT3         WT3          WT  rowRanges(rse) #> GRanges object with 74 ranges and 3 metadata columns: #>              seqnames    ranges strand |         REF       rbpz #>                 <Rle> <IRanges>  <Rle> | <character>  <numeric> #>   SSR3_102_-     SSR3       102      - |           T   2.611800 #>   SSR3_125_-     SSR3       125      - |           C   0.623238 #>   SSR3_156_-     SSR3       156      - |           C   1.875144 #>   SSR3_176_-     SSR3       176      - |           A  -0.676423 #>   SSR3_198_-     SSR3       198      - |           A   1.817678 #>          ...      ...       ...    ... .         ...        ... #>   DHFR_397_-     DHFR       397      - |           A -2.7341600 #>   DHFR_399_-     DHFR       399      - |           G -0.2094944 #>   DHFR_423_-     DHFR       423      - |           T -0.0815516 #>   DHFR_430_-     DHFR       430      - |           A -2.6781858 #>   DHFR_513_-     DHFR       513      - |           T -1.2475213 #>                      vpb #>                <numeric> #>   SSR3_102_- 2.21621e-02 #>   SSR3_125_- 2.21621e-02 #>   SSR3_156_- 2.21621e-02 #>   SSR3_176_- 2.00523e-05 #>   SSR3_198_- 2.21621e-02 #>          ...         ... #>   DHFR_397_-   0.0221621 #>   DHFR_399_-   0.0221621 #>   DHFR_423_-   0.0221621 #>   DHFR_430_-   0.0221621 #>   DHFR_513_-   0.0221621 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome  # specifying regions to query use GRanges object sites <- rowRanges(rse) rse <- pileup_sites(bams, fafn, sites = sites) rse #> class: RangedSummarizedExperiment  #> dim: 74 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- #> rowData names(3): REF rbpz vpb #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse <- pileup_sites(bams, fafn, chroms = c(\"SPCS3\", \"DHFR\")) rse #> class: RangedSummarizedExperiment  #> dim: 1166 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(1166): SPCS3_1_+ SPCS3_2_+ ... DHFR_517_- DHFR_518_- #> rowData names(3): REF rbpz vpb #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse <- pileup_sites(bams, fafn, region = \"DHFR:100-101\") rse #> class: RangedSummarizedExperiment  #> dim: 2 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(2): DHFR_100_- DHFR_101_- #> rowData names(3): REF rbpz vpb #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Make summarized experiment object for DE — prep_for_de","title":"Make summarized experiment object for DE — prep_for_de","text":"Generates SummarizedExperiment object use edgeR DESeq2 generate counts assay matrix formated 2 columns per sample","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"prep_for_de(   se,   type = \"AI\",   edit_from = NULL,   edit_to = NULL,   min_prop = 0.1,   max_prop = 0.9,   min_samples = 3 )"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make summarized experiment object for DE — prep_for_de","text":"se SummarizedExperiment object type OPTIONAL type editing event add. Currently, supported (\"AI\") default, custom can added setting \"none\". edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set. min_prop OPTIONAL min proporation reads edited site. least min_samples need pass keep site. Default 0.1. max_prop OPTIONAL max proporation reads edited site. least min_samples need pass keep site. Default 0.9. min_samples OPTIONAL minimum number samples passing cutoffs keep site. Default 3.","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make summarized experiment object for DE — prep_for_de","text":"SummarizedExperiment::SummarizedExperiment use edgeR DESeq2. Contains counts assay matrix formatted 2 columns per sample (ref alt counts).","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"library(SummarizedExperiment) data(rse_adar_ifn) rse <- calc_edit_frequency(rse_adar_ifn) dse <- prep_for_de(rse, min_samples = 1) assay(dse, \"counts\")[1:5, ] #>            wt_ref adar1_ko_ref wt_alt adar1_ko_alt #> SSR3_176_-      8           16     16            0 #> SSR3_201_-     19           14      3            0 #> SSR3_207_-     14           14      4            0 #> SSR3_257_-     11           19      4            0 #> SSR3_258_-      9           10      6            8 dse #> class: SummarizedExperiment  #> dim: 27 4  #> metadata(0): #> assays(1): counts #> rownames(27): SSR3_176_- SSR3_201_- ... DHFR_355_- DHFR_361_- #> rowData names(0): #> colnames(4): wt_ref adar1_ko_ref wt_alt adar1_ko_alt #> colData names(4): sample n_sites edit_idx count"},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":null,"dir":"Reference","previous_headings":"","what":"raer: RNA editing tools in R — raer","title":"raer: RNA editing tools in R — raer","text":"Toolkit identification statistical testing RNA editing signals within R. Provides support identifying sites bulk-RNA single cell RNA-seq datasets, general methods extraction allelic read counts alignment files. Facilitates annotation exploratory analysis editing signals using Bioconductor packages resources.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raer: RNA editing tools in R — raer","text":"Maintainer: Kent Riemondy kent.riemondy@gmail.com (ORCID) Authors: Kristen Wells-Wrasman kristen.wells-wrasman@cuanschutz.edu (ORCID) contributors: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) [contributor] Jay Hesselberth jay.hesselberth@gmail.com (ORCID) [contributor] RNA Bioscience Initiative [copyright holder, funder]","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide working directory for raer example files. — raer_example","title":"Provide working directory for raer example files. — raer_example","text":"Provide working directory raer example files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(path)"},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide working directory for raer example files. — raer_example","text":"path path file","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide working directory for raer example files. — raer_example","text":"Character vector path internal package file.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(\"human.fasta\") #> [1] \"/__w/_temp/Library/raer/extdata/human.fasta\""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pileup, indexed by tabix — read_pileup","title":"Read pileup, indexed by tabix — read_pileup","text":"function can read pileup site data tables produced pileup_sites().","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"read_pileup(tbx_fn, region = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pileup, indexed by tabix — read_pileup","text":"tbx_fn filename region region read file, samtools style region specifiers supported.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read pileup, indexed by tabix — read_pileup","text":"GenomicRanges::GRanges containing positions editing sites pileup data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") plp_fn <- tempfile() plp <- pileup_sites(bamfn, fafn, return_data = FALSE, outfile_prefix = plp_fn)  # first table contains site information, second table pileup count lapply(plp, function(x) head(read_pileup(x))) #> [[1]] #> GRanges object with 6 ranges and 3 metadata columns: #>       seqnames    ranges strand |         REF      rpbz       vdb #>          <Rle> <IRanges>  <Rle> | <character> <numeric> <numeric> #>   [1]     SSR3         1      - |           C         0         0 #>   [2]     SSR3         2      - |           A         0         0 #>   [3]     SSR3         3      - |           A         0         0 #>   [4]     SSR3         4      - |           A         0         0 #>   [5]     SSR3         5      - |           G         0         0 #>   [6]     SSR3         6      - |           T         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  #> [[2]] #> GRanges object with 6 ranges and 10 metadata columns: #>       seqnames    ranges strand |         REF         ALT      nRef #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>   [1]     SSR3         1      - |           C           -        13 #>   [2]     SSR3         2      - |           A           -        14 #>   [3]     SSR3         3      - |           A           -        14 #>   [4]     SSR3         4      - |           A           -        15 #>   [5]     SSR3         5      - |           G           -        15 #>   [6]     SSR3         6      - |           T           -        15 #>            nAlt        nA        nT        nC        nG        nN #>       <integer> <integer> <integer> <integer> <integer> <integer> #>   [1]         0         0         0        13         0         0 #>   [2]         0        14         0         0         0         0 #>   [3]         0        14         0         0         0         0 #>   [4]         0        15         0         0         0         0 #>   [5]         0         0         0         0        15         0 #>   [6]         0         0        15         0         0         0 #>              nX #>       <integer> #>   [1]         2 #>   [2]         1 #>   [3]         1 #>   [4]         0 #>   [5]         0 #>   [6]         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  unlink(c(plp, plp_fn, paste0(plp, \".tbi\")))"},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":null,"dir":"Reference","previous_headings":"","what":"Read tables produced by pileup_cells() — read_sparray","title":"Read tables produced by pileup_cells() — read_sparray","text":"Read tables produced pileup_cells(), extension matrixMarket sparse matrix format store values 1 matrix. .mtx.gz files formatted columns: row index (0 based) column index (0 based) values sparseMatrix #1 (nRef) values sparseMatrix #2 (nAlt) N) values sparseMatrix ... (...) ununsed now","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read tables produced by pileup_cells() — read_sparray","text":"","code":"read_sparray(mtx_fn, sites_fn, bc_fn)"},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read tables produced by pileup_cells() — read_sparray","text":"mtx_fn .mtx.gz file path sites_fn sites.txt.gz file path bc_fn bcs.txt.gz file path","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read tables produced by pileup_cells() — read_sparray","text":"list sparseMatrix, NULL mtx_fn empty","code":""},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for RNA editing analysis — rse_adar_ifn","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"subset data RNA-seq experiment measure effects IFN treatment cell lines wild-type ADAR1-KO","code":""},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"","code":"data(rse_adar_ifn)"},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":"rse-adar-ifn","dir":"Reference","previous_headings":"","what":"rse_adar_ifn","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"","code":"class: RangedSummarizedExperiment dim: 74 2 metadata(0): assays(7): Var nRef ... nC nG rownames(74): SSR3_102_- SSR3_125_- ... DHFR_430_- DHFR_513_- rowData names(1): Ref colnames(2): wt adar1_ko colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"https://www.ncbi.nlm.nih.gov/bioproject/PRJNA386593","code":""},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"RangedSummarizedExperiment populated pileup data","code":""},{"path":"https://rnabioco.github.io/raer/reference/rse_adar_ifn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample data for RNA editing analysis — rse_adar_ifn","text":"https://pubmed.ncbi.nlm.nih.gov/29395325/","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0990","dir":"Changelog","previous_headings":"","what":"raer 0.99.0","title":"raer 0.99.0","text":"‘N’ bases read reference ignored Removed outdated unused functionality: bed indexing (indexBed related c code) bam tag indexing (build_tag_index, show_tag_index, get_tag_bam, ) bam tag index based single cell approach (sc_editing) bam tag indexing c code bri (src/bri/*) sparse matrix merging merge_pileups(). unneeded utilities (filter_by_coverage) Remaining (mostly unused) Rcpp code Removed fastmap, Rcpp, zlibbioc, RColorBrewer, BiocGenerics dependencies Removed system requirements c libraries used bri bed indexing used pileup_sites() replaced region indexing approach pileup_cells(). pileup_sites() now requires GRanges object rather bed file. bedfileparameter removed replaced sites parameter. Renamed Ref Var output columns REF ALT nVar renamed nAlt. provides consistency VCF format consistency across pileup_cells() pileup_sites() function calls pileup_cells() gained functionality process multiple smart-seq2 style bam files. Changed filterParam argument pileup_sites pileup_cells param simplicity Added FilterParam exclude multi-allelic sites report_multiallelic, exclude reporting variant Var assay based allelic frequency (min_allelic_freq). bam_flags parameter used pileup_sites pileup_cells moved FilterParam class. bedindex parameter pileup_sites removed. option needed user level planned replaced regional indexing used pileup_cells(). Added FilterParam option trim reads based fractional distance 5’ (ftrim_5p) 3’ end (ftrim_3p). Incorporated RBPZ VDB statistics bcftools, now returned rowData columns calling pileup_sites. RangedSummarizedExperiment object now directly returned pileup_sites. Using merge_pileups longer necessary exported function. Renamed get_pileup pileup_sites create_se merge_pileups Rename remove_clustered_variants, remove_multiallelic, remove_splice_variants filter_* consistency. Rewrote renamed single cell editing function sc_editing pileup_cells(). pileup_cells() require sorting index cell barcode, uses new format specify sites query requires providing reference alternate alleles interest, writes disk sparse matrix compatible format reduce memory usage, performance need query fasta index. Implemented method collapse reads duplicate UMIs. Added option filter sites pileup based number reads containing variant (#54) Added NEWS.md file track changes package.","code":""}]
