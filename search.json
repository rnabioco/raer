[{"path":"https://rnabioco.github.io/raer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 raer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/raer/articles/novel-sites.html","id":"novel-rna-editing-site-detection-tutorial","dir":"Articles","previous_headings":"","what":"Novel RNA editing site detection tutorial","title":"Identifying RNA editing sites using RNA and DNA sequencing data","text":"vignette demonstrate identify novel RNA editing sites using raer package. vignette public RNA-seq Whole-Genome sequencing dataset analyzed. High coverage whole-genome sequencing conducted ERR262997 along paired-end RNA-seq SRR1258218. Aligned BAM files genome fasta file preprocessed vignette. files occupy ~100 Mb space contain alignments first 1MB chromosome 4. default files stored temporary directory. Change data_dir variable valid file path keep files reuse. Additionally use following additional annotation resources: database known SNPs, example SNPlocs.Hsapiens.dbSNP155.GRCh38 package. Due space memory constraints , vignette use BED file containing SNPs first 1Mb region chr4. TxDb.Hsapiens.UCSC.hg38.knownGene, database transcript models. Alternatively can generated .gtf file using makeTxDbFromGRanges() GenomicFeatures package. RepeatMasker annotations, can obtained AnnotationHub() hg38. space reasons annotations chr4 included text file. get_pileup() function can accept multiple bam files, supply one RNA-seq, one whole genome sequencing. Filtering parameters get_pileup() function can accept multiple arguments matched input bam files. Next filter keep sites variant RNA-seq, variant DNA-seq, minimum 5 reads DNA-seq. DNA-seq data reported “+” strand, RNA-seq data reported either strand. therefore use subsetByOverlaps(..., ignore.strand = TRUE) retain sites passing DNA-seq based filters independent strand. Next filter remove multi-allelic sites. sites stored comma-separated strings Var assay (e.g. AG,AC). Non-variant sites stored -. remove_multiallelic() remove sites multiple variants samples present summarizedExperiment object. add new column rowData() indicate variant site, calculate allele_freq assay variant allele frequencies sample. Next ’ll remove sites simple repeat regions. add repeat information rowData() using annot_from_gr() function. Next ’ll remove sites adjacent sites different variant types. example ->G variant located proximal C->T variant variants removed. Next, sites 4bp known splicing events excluded. variants low-confidence due possibility mis-alignments. Next, ’ll annotate site known SNP remove known SNPs. using SNPlocs package can use annot_snp() function. However use annot_from_gr() function annotate using prebuilt chr4snps object. Lastly, ’ll filter edit sites require editing frequency > 0.05 least 2 reads support editing site.","code":"data_dir <- tempdir() fns <- download_NA12878(data_dir) fns ## $bams ##                              ERR262996_dedup_chr4_sub.bam  ##            \"/tmp/RtmpmwOtOv/ERR262996_dedup_chr4_sub.bam\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam  ## \"/tmp/RtmpmwOtOv/SRR1258218_Aligned.sorted.dedup_sub.bam\"  ##  ## $bai ##                              ERR262996_dedup_chr4_sub.bam.bai  ##            \"/tmp/RtmpmwOtOv/ERR262996_dedup_chr4_sub.bam.bai\"  ##                   SRR1258218_Aligned.sorted.dedup_sub.bam.bai  ## \"/tmp/RtmpmwOtOv/SRR1258218_Aligned.sorted.dedup_sub.bam.bai\"  ##  ## $fasta ##                   hg38_chr4.fa.bgz  ## \"/tmp/RtmpmwOtOv/hg38_chr4.fa.bgz\"  ##  ## $snps ##                   chr4snps.bed.gz  ## \"/tmp/RtmpmwOtOv/chr4snps.bed.gz\"  ##  ## $rmsk ##                   rmsk_hg38.tsv.gz  ## \"/tmp/RtmpmwOtOv/rmsk_hg38.tsv.gz\" txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene  chr4snps <- import(fns$snps)  rmskhg38 <- read.table(fns$rmsk) rmskhg38 <- makeGRangesFromDataFrame(rmskhg38,                                      keep.extra.columns = TRUE,                                       starts.in.df.are.0based = TRUE) wgs_bam <- fns$bams[1] rna_bam <- fns$bams[2] fafn <- fns$fasta fp <- FilterParam(min_nucleotide_depth = 1,                   min_base_quality = 30,                   min_mapq = c(255, 30),                   library_type = c(\"fr-first-strand\", \"genomic-unstranded\"),                   trim_5p = 5,                   trim_3p = 5,                   indel_dist = 4,                   homopolymer_len = 6,                   max_mismatch_type = c(3, 3),                   min_read_bqual = c(0.25, 20),                   only_keep_variants = c(TRUE, FALSE))  plps <- get_pileup(c(rna_bam, wgs_bam),                   fafile = fafn,                   chrom = \"chr4\",                   filterParam = fp) names(plps) <- c(\"rna\", \"dna\") plps ## $rna ## GRanges object with 547 ranges and 9 metadata columns: ##         seqnames    ranges strand |         Ref         Var      nRef ##            <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##     [1]     chr4     44338      - |           T          TA         0 ##     [2]     chr4    124820      + |           C          CA         3 ##     [3]     chr4    125213      + |           G          GC         3 ##     [4]     chr4    126106      + |           C          CT         0 ##     [5]     chr4    126885      + |           A          AG         9 ##     ...      ...       ...    ... .         ...         ...       ... ##   [543]     chr4    986676      - |           T          TC         0 ##   [544]     chr4    989824      + |           C          CT         1 ##   [545]     chr4    990589      + |           A          AC         1 ##   [546]     chr4    990981      + |           C          CT         0 ##   [547]     chr4    993342      + |           A          AG         0 ##              nVar        nA        nT        nC        nG        nN ##         <integer> <integer> <integer> <integer> <integer> <integer> ##     [1]         1         1         0         0         0         0 ##     [2]         1         1         0         3         0         0 ##     [3]         1         0         0         1         3         0 ##     [4]         1         0         1         0         0         0 ##     [5]         1         9         0         0         1         0 ##     ...       ...       ...       ...       ...       ...       ... ##   [543]         1         0         0         1         0         0 ##   [544]         1         0         1         1         0         0 ##   [545]         1         1         0         1         0         0 ##   [546]         1         0         1         0         0         0 ##   [547]         1         0         0         0         1         0 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome ##  ## $dna ## GRanges object with 547 ranges and 9 metadata columns: ##         seqnames    ranges strand |         Ref         Var      nRef ##            <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##     [1]     chr4     44338      - |           T           -         0 ##     [2]     chr4    124820      + |           C           -        20 ##     [3]     chr4    125213      + |           G           -         7 ##     [4]     chr4    126106      + |           C          CT        11 ##     [5]     chr4    126885      + |           A           -        13 ##     ...      ...       ...    ... .         ...         ...       ... ##   [543]     chr4    986676      - |           T           -         0 ##   [544]     chr4    989824      + |           C           -        10 ##   [545]     chr4    990589      + |           A           -        16 ##   [546]     chr4    990981      + |           C           -        15 ##   [547]     chr4    993342      + |           A           -        21 ##              nVar        nA        nT        nC        nG        nN ##         <integer> <integer> <integer> <integer> <integer> <integer> ##     [1]         0         0         0         0         0         0 ##     [2]         0         0         0        20         0         0 ##     [3]         0         0         0         0         7         0 ##     [4]         5         0         5        11         0         0 ##     [5]         0        13         0         0         0         0 ##     ...       ...       ...       ...       ...       ...       ... ##   [543]         0         0         0         0         0         0 ##   [544]         0         0         0        10         0         0 ##   [545]         0        16         0         0         0         0 ##   [546]         0         0         0        15         0         0 ##   [547]         0        21         0         0         0         0 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome se <- create_se(plps) se ## class: RangedSummarizedExperiment  ## dim: 547 2  ## metadata(0): ## assays(7): Var nRef ... nC nG ## rownames(547): chr4_44338_2 chr4_124820_1 ... chr4_990981_1 ##   chr4_993342_1 ## rowData names(1): Ref ## colnames(2): rna dna ## colData names(1): sample to_keep <- (assay(se, \"nRef\")[, \"dna\"] >= 5 & assay(se, \"Var\")[, \"dna\"] == \"-\") se <- subsetByOverlaps(se, se[to_keep,], ignore.strand = TRUE) nrow(se) ## [1] 197 se <- remove_multiallelic(se) se <- calc_edit_frequency(se) rowData(se) ## DataFrame with 197 rows and 2 columns ##                       Ref         Var ##               <character> <character> ## chr4_124820_1           C          CA ## chr4_125213_1           G          GC ## chr4_126885_1           A          AG ## chr4_126885_2           T          TC ## chr4_126955_1           A          AG ## ...                   ...         ... ## chr4_958447_1           C          CA ## chr4_989824_1           C          CT ## chr4_990589_1           A          AC ## chr4_990981_1           C          CT ## chr4_993342_1           A          AG se <- annot_from_gr(se, rmskhg38, cols_to_map = c(c(\"repName\", \"repClass\", \"repFamily\")))  rowData(se)[c(\"repName\", \"repFamily\")] ## DataFrame with 197 rows and 2 columns ##                   repName   repFamily ##               <character> <character> ## chr4_124820_1          NA          NA ## chr4_125213_1      MER21C        ERVL ## chr4_126885_1          NA          NA ## chr4_126885_2      AluSc5         Alu ## chr4_126955_1          NA          NA ## ...                   ...         ... ## chr4_958447_1          NA          NA ## chr4_989824_1          NA          NA ## chr4_990589_1          NA          NA ## chr4_990981_1          NA          NA ## chr4_993342_1          NA          NA se <- se[!rowData(se)$repFamily  %in% c(\"Simple_repeat\", \"Low Complexity\")] se <- remove_clustered_variants(se, txdb, variant_dist = 100) ## Warning in .Seqinfo.mergexy(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 se ## class: RangedSummarizedExperiment  ## dim: 153 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(153): chr4_124820_1 chr4_125213_1 ... chr4_990981_1 ##   chr4_993342_1 ## rowData names(5): Ref Var repName repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx se <- remove_splice_variants(se, txdb) ## Warning in .Seqinfo.mergexy(x, y): Each of the 2 combined objects has sequence levels not in the other: ##   - in 'x': GL000008.2, GL000009.2, GL000194.1, GL000195.1, GL000205.2, GL000208.1, GL000213.1, GL000214.1, GL000216.2, GL000218.1, GL000219.1, GL000220.1, GL000221.1, GL000224.1, GL000225.1, GL000226.1, KI270302.1, KI270303.1, KI270304.1, KI270305.1, KI270310.1, KI270311.1, KI270312.1, KI270315.1, KI270316.1, KI270317.1, KI270320.1, KI270322.1, KI270329.1, KI270330.1, KI270333.1, KI270334.1, KI270335.1, KI270336.1, KI270337.1, KI270338.1, KI270340.1, KI270362.1, KI270363.1, KI270364.1, KI270366.1, KI270371.1, KI270372.1, KI270373.1, KI270374.1, KI270375.1, KI270376.1, KI270378.1, KI270379.1, KI270381.1, KI270382.1, KI270383.1, KI270384.1, KI270385.1, KI270386.1, KI270387.1, KI270388.1, KI270389.1, KI270390.1, KI270391.1, KI270392.1, KI270393.1, KI270394.1, KI270395.1, KI270396.1, KI270411.1, KI270412.1, KI270414.1, KI270417.1, KI270418.1, KI270419.1, KI270420.1, KI270422.1, KI270423.1, KI270424.1, KI270425.1, KI270429.1, KI270435.1, KI270438.1, KI270442.1, KI270448.1, KI270465.1, KI270466.1, KI270467.1, KI270468.1, KI270507.1, KI270508.1, KI270509.1, KI270510.1, KI270511.1, KI270512.1, KI270515.1, KI270516.1, KI270517.1, KI270518.1, KI270519.1, KI270521.1, KI270522.1, KI270528.1, KI270529.1, KI270530.1, KI270538.1, KI270539.1, KI270544.1, KI270548.1, KI270579.1, KI270580.1, KI270581.1, KI270582.1, KI270583.1, KI270584.1, KI270587.1, KI270588.1, KI270589.1, KI270590.1, KI270591.1, KI270593.1, KI270706.1, KI270707.1, KI270708.1, KI270709.1, KI270710.1, KI270711.1, KI270712.1, KI270713.1, KI270714.1, KI270715.1, KI270716.1, KI270717.1, KI270718.1, KI270719.1, KI270720.1, KI270721.1, KI270722.1, KI270723.1, KI270724.1, KI270725.1, KI270726.1, KI270727.1, KI270728.1, KI270729.1, KI270730.1, KI270731.1, KI270732.1, KI270733.1, KI270734.1, KI270735.1, KI270736.1, KI270737.1, KI270738.1, KI270739.1, KI270740.1, KI270741.1, KI270742.1, KI270743.1, KI270744.1, KI270745.1, KI270746.1, KI270747.1, KI270748.1, KI270749.1, KI270750.1, KI270751.1, KI270752.1, KI270753.1, KI270754.1, KI270755.1, KI270756.1, KI270757.1 ##   - in 'y': chr1_GL383518v1_alt, chr1_GL383519v1_alt, chr1_GL383520v2_alt, chr1_KI270706v1_random, chr1_KI270707v1_random, chr1_KI270708v1_random, chr1_KI270709v1_random, chr1_KI270710v1_random, chr1_KI270711v1_random, chr1_KI270712v1_random, chr1_KI270713v1_random, chr1_KI270714v1_random, chr1_KI270759v1_alt, chr1_KI270760v1_alt, chr1_KI270761v1_alt, chr1_KI270762v1_alt, chr1_KI270763v1_alt, chr1_KI270764v1_alt, chr1_KI270765v1_alt, chr1_KI270766v1_alt, chr1_KI270892v1_alt, chr1_KN196472v1_fix, chr1_KN196473v1_fix, chr1_KN196474v1_fix, chr1_KN538360v1_fix, chr1_KN538361v1_fix, chr1_KQ031383v1_fix, chr1_KQ458382v1_alt, chr1_KQ458383v1_alt, chr1_KQ458384v1_alt, chr1_KQ983255v1_alt, chr1_KV880763v1_alt, chr1_KZ208904v1_alt, chr1_KZ208905v1_alt, chr1_KZ208906v1_fix, chr1_KZ559100v1_fix, chr2_GL383521v1_alt, chr2_GL383522v1_alt, chr2_GL582966v2_alt, chr2_KI270715v1_random, chr2_KI270716v1_random, chr2_KI270767v1_alt, chr2_KI270768v1_alt, chr2_KI270769v1_alt, chr2_KI270770v1_alt, chr2_KI270771v1_alt, chr2_KI270772v1_alt, chr2_KI270773v1_alt, chr2_KI270774v1_alt, chr2_KI270775v1_alt, chr2_KI270776v1_alt, chr2_KI270893v1_alt, chr2_KI270894v1_alt, chr2_KN538362v1_fix, chr2_KN538363v1_fix, chr2_KQ031384v1_fix, chr2_KQ983256v1_alt, chr2_KZ208907v1_alt, chr2_KZ208908v1_alt, chr2_ML143341v1_fix, chr2_ML143342v1_fix, chr3_GL000221v1_random, chr3_GL383526v1_alt, chr3_JH636055v2_alt, chr3_KI270777v1_alt, chr3_KI270778v1_alt, chr3_KI270779v1_alt, chr3_KI270780v1_alt, chr3_KI270781v1_alt, chr3_KI270782v1_alt, chr3_KI270783v1_alt, chr3_KI270784v1_alt, chr3_KI270895v1_alt, chr3_KI270924v1_alt, chr3_KI270934v1_alt, chr3_KI270935v1_alt, chr3_KI270936v1_alt, chr3_KI270937v1_alt, chr3_KN196475v1_fix, chr3_KN196476v1_fix, chr3_KN538364v1_fix, chr3_KQ031385v1_fix, chr3_KQ031386v1_fix, chr3_KV766192v1_fix, chr3_KZ208909v1_alt, chr3_KZ559101v1_alt, chr3_KZ559102v1_alt, chr3_KZ559103v1_alt, chr3_KZ559104v1_fix, chr3_KZ559105v1_alt, chr3_ML143343v1_alt, chr4_GL000008v2_random, chr4_GL000257v2_alt, chr4_GL383527v1_alt, chr4_GL383528v1_alt, chr4_KI270785v1_alt, chr4_KI270786v1_alt, chr4_KI270787v1_alt, chr4_KI270788v1_alt, chr4_KI270789v1_alt, chr4_KI270790v1_alt, chr4_KI270896v1_alt, chr4_KI270925v1_alt, chr4_KQ090013v1_alt, chr4_KQ090014v1_alt, chr4_KQ090015v1_alt, chr4_KQ983257v1_fix, chr4_KQ983258v1_alt, chr4_KV766193v1_alt, chr4_ML143344v1_fix, chr4_ML143345v1_fix, chr4_ML143346v1_fix, chr4_ML143347v1_fix, chr4_ML143348v1_fix, chr4_ML143349v1_fix, chr5_GL000208v1_random, chr5_GL339449v2_alt, chr5_GL383530v1_alt, chr5_GL383531v1_alt, chr5_GL383532v1_alt, chr5_GL949742v1_alt, chr5_KI270791v1_alt, chr5_KI270792v1_alt, chr5_KI270793v1_alt, chr5_KI270794v1_alt, chr5_KI270795v1_alt, chr5_KI270796v1_alt, chr5_KI270897v1_alt, chr5_KI270898v1_alt, chr5_KN196477v1_alt, chr5_KV575243v1_alt, chr5_KV575244v1_fix, chr5_KZ208910v1_alt, chr5_ML143350v1_fix, chr6_GL000250v2_alt, chr6_GL000251v2_alt, chr6_GL000252v2_alt, chr6_GL000253v2_alt, chr6_GL000254v2_alt, chr6_GL000255v2_alt, chr6_GL000256v2_alt, chr6_GL383533v1_alt, chr6_KB021644v2_alt, chr6_KI270758v1_alt, chr6_KI270797v1_alt, chr6_KI270798v1_alt, chr6_KI270799v1_alt, chr6_KI270800v1_alt, chr6_KI270801v1_alt, chr6_KI270802v1_alt, chr6_KN196478v1_fix, chr6_KQ031387v1_fix, chr6_KQ090016v1_fix, chr6_KQ090017v1_alt, chr6_KV766194v1_fix, chr6_KZ208911v1_fix, chr6_ML143351v1_fix, chr7_GL383534v2_alt, chr7_KI270803v1_alt, chr7_KI270804v1_alt, chr7_KI270805v1_alt, chr7_KI270806v1_alt, chr7_KI270807v1_alt, chr7_KI270808v1_alt, chr7_KI270809v1_alt, chr7_KI270899v1_alt, chr7_KQ031388v1_fix, chr7_KV880764v1_fix, chr7_KV880765v1_fix, chr7_KZ208912v1_fix, chr7_KZ208913v1_alt, chr7_KZ559106v1_alt, chr7_ML143352v1_fix, chr8_KI270810v1_alt, chr8_KI270811v1_alt, chr8_KI270812v1_alt, chr8_KI270813v1_alt, chr8_KI270814v1_alt, chr8_KI270815v1_alt, chr8_KI270816v1_alt, chr8_KI270817v1_alt, chr8_KI270818v1_alt, chr8_KI270819v1_alt, chr8_KI270820v1_alt, chr8_KI270821v1_alt, chr8_KI270822v1_alt, chr8_KI270900v1_alt, chr8_KI270901v1_alt, chr8_KI270926v1_alt, chr8_KV880766v1_fix, chr8_KV880767v1_fix, chr8_KZ208914v1_fix, chr8_KZ208915v1_fix, chr8_KZ559107v1_alt, chr9_GL383539v1_alt, chr9_GL383540v1_alt, chr9_GL383541v1_alt, chr9_GL383542v1_alt, chr9_KI270717v1_random, chr9_KI270718v1_random, chr9_KI270719v1_random, chr9_KI270720v1_random, chr9_KI270823v1_alt, chr9_KN196479v1_fix, chr9_KQ090018v1_alt, chr9_KQ090019v1_alt, chr9_ML143353v1_fix, chr10_GL383545v1_alt, chr10_GL383546v1_alt, chr10_KI270824v1_alt, chr10_KI270825v1_alt, chr10_KN196480v1_fix, chr10_KN538365v1_fix, chr10_KN538366v1_fix, chr10_KN538367v1_fix, chr10_KQ090020v1_alt, chr10_KQ090021v1_fix, chr10_ML143354v1_fix, chr10_ML143355v1_fix, chr11_GL383547v1_alt, chr11_JH159136v1_alt, chr11_JH159137v1_alt, chr11_KI270721v1_random, chr11_KI270826v1_alt, chr11_KI270827v1_alt, chr11_KI270829v1_alt, chr11_KI270830v1_alt, chr11_KI270831v1_alt, chr11_KI270832v1_alt, chr11_KI270902v1_alt, chr11_KI270903v1_alt, chr11_KI270927v1_alt, chr11_KN196481v1_fix, chr11_KN538368v1_alt, chr11_KQ090022v1_fix, chr11_KQ759759v1_fix, chr11_KV766195v1_fix, chr11_KZ559108v1_fix, chr11_KZ559109v1_fix, chr11_KZ559110v1_alt, chr11_KZ559111v1_alt, chr11_ML143356v1_fix, chr11_ML143357v1_fix, chr11_ML143358v1_fix, chr11_ML143359v1_fix, chr11_ML143360v1_fix, chr12_GL383549v1_alt, chr12_GL383550v2_alt, chr12_GL383551v1_alt, chr12_GL383552v1_alt, chr12_GL383553v2_alt, chr12_GL877875v1_alt, chr12_GL877876v1_alt, chr12_KI270833v1_alt, chr12_KI270834v1_alt, chr12_KI270835v1_alt, chr12_KI270836v1_alt, chr12_KI270837v1_alt, chr12_KI270904v1_alt, chr12_KN196482v1_fix, chr12_KN538369v1_fix, chr12_KN538370v1_fix, chr12_KQ090023v1_alt, chr12_KQ759760v1_fix, chr12_KZ208916v1_fix, chr12_KZ208917v1_fix, chr12_KZ208918v1_alt, chr12_KZ559112v1_alt, chr12_ML143361v1_fix, chr12_ML143362v1_fix, chr13_KI270838v1_alt, chr13_KI270839v1_alt, chr13_KI270840v1_alt, chr13_KI270841v1_alt, chr13_KI270842v1_alt, chr13_KI270843v1_alt, chr13_KN196483v1_fix, chr13_KN538371v1_fix, chr13_KN538372v1_fix, chr13_KN538373v1_fix, chr13_KQ090024v1_alt, chr13_KQ090025v1_alt, chr13_ML143363v1 se ## class: RangedSummarizedExperiment  ## dim: 146 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(146): chr4_124820_1 chr4_125213_1 ... chr4_990981_1 ##   chr4_993342_1 ## rowData names(5): Ref Var repName repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx se <- annot_from_gr(se, chr4snps, \"name\") rowData(se)[c(\"name\")] ## DataFrame with 146 rows and 1 column ##                       name ##                <character> ## chr4_124820_1 rs1553807640 ## chr4_125213_1 rs1286128437 ## chr4_126885_1           NA ## chr4_126885_2           NA ## chr4_126955_1           NA ## ...                    ... ## chr4_958447_1 rs1052651854 ## chr4_989824_1   rs73219719 ## chr4_990589_1           NA ## chr4_990981_1  rs116514520 ## chr4_993342_1           NA se <- se[is.na(rowData(se)$name), ] se ## class: RangedSummarizedExperiment  ## dim: 86 2  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(86): chr4_126885_1 chr4_126885_2 ... chr4_990589_1 ##   chr4_993342_1 ## rowData names(6): Ref Var ... repFamily name ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx to_keep <- assay(se, \"edit_freq\")[, 1] > 0.05 se <- se[to_keep, ]  se <- se[assay(se, \"nVar\")[, 1] >= 2] stopifnot(all(rowData(se)$Var == \"AG\")) rowRanges(se) ## GRanges object with 10 ranges and 6 metadata columns: ##                 seqnames    ranges strand |         Ref         Var ##                    <Rle> <IRanges>  <Rle> | <character> <character> ##   chr4_134353_1     chr4    134353      + |           A          AG ##   chr4_378011_1     chr4    378011      + |           A          AG ##   chr4_378018_1     chr4    378018      + |           A          AG ##   chr4_378090_1     chr4    378090      + |           A          AG ##   chr4_378362_1     chr4    378362      + |           A          AG ##   chr4_378368_1     chr4    378368      + |           A          AG ##   chr4_378409_1     chr4    378409      + |           A          AG ##   chr4_380392_1     chr4    380392      + |           A          AG ##   chr4_778739_2     chr4    778739      - |           A          AG ##   chr4_778780_2     chr4    778780      - |           A          AG ##                     repName    repClass   repFamily        name ##                 <character> <character> <character> <character> ##   chr4_134353_1        <NA>        <NA>        <NA>        <NA> ##   chr4_378011_1       AluSc        SINE         Alu        <NA> ##   chr4_378018_1       AluSc        SINE         Alu        <NA> ##   chr4_378090_1       AluSc        SINE         Alu        <NA> ##   chr4_378362_1        <NA>        <NA>        <NA>        <NA> ##   chr4_378368_1        <NA>        <NA>        <NA>        <NA> ##   chr4_378409_1        <NA>        <NA>        <NA>        <NA> ##   chr4_380392_1      AluSq2        SINE         Alu        <NA> ##   chr4_778739_2       AluSg        SINE         Alu        <NA> ##   chr4_778780_2       AluSg        SINE         Alu        <NA> ##   ------- ##   seqinfo: 194 sequences from an unspecified genome unlink(data_dir) sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] TxDb.Hsapiens.UCSC.hg38.knownGene_3.16.0 ##  [2] rtracklayer_1.57.0                       ##  [3] SummarizedExperiment_1.27.3              ##  [4] MatrixGenerics_1.9.1                     ##  [5] matrixStats_0.62.0                       ##  [6] GenomicFeatures_1.49.7                   ##  [7] AnnotationDbi_1.59.1                     ##  [8] Biobase_2.57.1                           ##  [9] GenomicRanges_1.49.1                     ## [10] GenomeInfoDb_1.33.7                      ## [11] IRanges_2.31.2                           ## [12] S4Vectors_0.35.4                         ## [13] BiocGenerics_0.43.4                      ## [14] raer_0.99.0                              ## [15] BiocStyle_2.25.0                         ##  ## loaded via a namespace (and not attached): ##  [1] bitops_1.0-7             fs_1.5.2                 ##  [3] bit64_4.0.5              filelock_1.0.2           ##  [5] progress_1.2.2           httr_1.4.4               ##  [7] rprojroot_2.0.3          tools_4.2.1              ##  [9] bslib_0.4.0              utf8_1.2.2               ## [11] R6_2.5.1                 DBI_1.1.3                ## [13] tidyselect_1.1.2         prettyunits_1.1.1        ## [15] curl_4.3.2               bit_4.0.4                ## [17] compiler_4.2.1           textshaping_0.3.6        ## [19] cli_3.4.1                xml2_1.3.3               ## [21] desc_1.4.2               DelayedArray_0.23.2      ## [23] bookdown_0.29            sass_0.4.2               ## [25] rappdirs_0.3.3           pkgdown_2.0.6            ## [27] systemfonts_1.0.4        stringr_1.4.1            ## [29] digest_0.6.29            Rsamtools_2.13.4         ## [31] R.utils_2.12.0           rmarkdown_2.16           ## [33] XVector_0.37.1           pkgconfig_2.0.3          ## [35] htmltools_0.5.3          dbplyr_2.2.1             ## [37] fastmap_1.1.0            BSgenome_1.65.2          ## [39] rlang_1.0.6              RSQLite_2.2.17           ## [41] jquerylib_0.1.4          BiocIO_1.7.1             ## [43] generics_0.1.3           jsonlite_1.8.0           ## [45] BiocParallel_1.31.12     R.oo_1.25.0              ## [47] dplyr_1.0.10             RCurl_1.98-1.8           ## [49] magrittr_2.0.3           GenomeInfoDbData_1.2.9   ## [51] Matrix_1.5-1             Rcpp_1.0.9               ## [53] fansi_1.0.3              R.methodsS3_1.8.2        ## [55] lifecycle_1.0.2          stringi_1.7.8            ## [57] yaml_2.3.5               zlibbioc_1.43.0          ## [59] BiocFileCache_2.5.0      grid_4.2.1               ## [61] blob_1.2.3               parallel_4.2.1           ## [63] crayon_1.5.2             lattice_0.20-45          ## [65] Biostrings_2.65.6        hms_1.1.2                ## [67] KEGGREST_1.37.3          knitr_1.40               ## [69] pillar_1.8.1             rjson_0.2.21             ## [71] codetools_0.2-18         biomaRt_2.53.2           ## [73] XML_3.99-0.10            glue_1.6.2               ## [75] evaluate_0.16            data.table_1.14.2        ## [77] BiocManager_1.30.18      png_0.1-7                ## [79] vctrs_0.4.2              purrr_0.3.4              ## [81] assertthat_0.2.1         cachem_1.0.6             ## [83] xfun_0.33                restfulr_0.0.15          ## [85] ragg_1.2.3               tibble_3.1.8             ## [87] GenomicAlignments_1.33.1 memoise_2.0.1            ## [89] ellipsis_0.3.2"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"differential-editing-tutorial","dir":"Articles","previous_headings":"","what":"Differential Editing tutorial","title":"Introducing the raer package","text":"vignette demonstrate identify RNA editing sites condition-specific editing frequencies using raer package.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"set-up","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Set up","title":"Introducing the raer package","text":"vignette public RNA-seq dataset analyzed, GSE99249, consists ADAR1 mutants control human cell lines, conditionally treated Interferon-Beta. simplicity examine ADAR1 WT KO samples treated IFN-B, triplicate samples. Aligned BAM files necessary files preprocessed vignette. files occupy ~250 Mb space default stored temporary directory. Change data_dir variable valid file path keep files reuse. Next ’ll collect vector containing paths BAM file BAM files subset full BAM files, containing alignments chromosome 18. Next ’ll need FASTA file quantify editing sites. ’ll use FASTA file containing chromosome 18 demo. fasta can compressed. Lastly, ’ll use BED file containing coordinates known human editing sites REDIPortal database. file can also optionally compressed.","code":"library(raer) library(SummarizedExperiment) library(DESeq2) library(ComplexHeatmap) library(viridis) library(stringr) data_dir <- tempdir() fns <- download_GSE99249(data_dir) bam_files <- fns$bams  bam_files[1:2] ##                   SRR5564260_dedup_sorted.bam  ## \"/tmp/RtmpKAh39y/SRR5564260_dedup_sorted.bam\"  ##                   SRR5564261_dedup_sorted.bam  ## \"/tmp/RtmpKAh39y/SRR5564261_dedup_sorted.bam\" fafn <- fns$fasta  fafn ##                   chr18.fasta.bgz  ## \"/tmp/RtmpKAh39y/chr18.fasta.bgz\" bedfn <- fns$bed bedfn ##                   rediportal_hg38_chr18.bed.gz  ## \"/tmp/RtmpKAh39y/rediportal_hg38_chr18.bed.gz\""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"generate-editing-site-read-counts","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Generate editing site read counts","title":"Introducing the raer package","text":"get_pileup() function calculate base counts across multiple BAM files. base counts returned list GRanges objects bam file. FilterParam() function provides numerous filters exclude reads bases based commonly used filters detecting RNA-editing events. Specific regions can queried using region argument, specific positions can queried providing bedfile path BED-file. Internally, get_pileup() write pileups temporary files. However, files can also stored tabix-indexed format, later retrieval, querying specific regions. base counts returned stand specific fashion depending library-type parameter. Ref Var bases reference strand. Pileups multiple BAM files can stored summarizedExperiment object, permits comparisons across sample. rowData() rowRanges() slots can populated information related editing site, similarly colData() slot can used store sample metadata. summarizedExperiment objectcan also interface derivative classes, singleCellExperiment(). column pileup can stored assay, can specified assay_cols parameter Next add sample metadata summarizedExperiment, used conduct differential editing analysis.","code":"fp <- FilterParam(only_keep_variants = TRUE,                   trim_5p = 5,                    trim_3p = 5,                    min_base_quality = 30L,                   min_mapq = 255L,                    library_type = \"fr-first-strand\")  plps <- get_pileup(bam_files,                     fafile = fafn,                     bedfile = bedfn,                    region = \"chr18\",                     filterParam = fp)  plps[[1]] ## GRanges object with 6330 ranges and 9 metadata columns: ##          seqnames    ranges strand |         Ref         Var      nRef ##             <Rle> <IRanges>  <Rle> | <character> <character> <integer> ##      [1]    chr18    168574      + |           A           -         0 ##      [2]    chr18    168577      + |           A           -         0 ##      [3]    chr18    168578      + |           A           -         0 ##      [4]    chr18    171983      + |           A           -         0 ##      [5]    chr18    171986      + |           A           -         0 ##      ...      ...       ...    ... .         ...         ...       ... ##   [6326]    chr18  80159249      + |           A           -         2 ##   [6327]    chr18  80159250      + |           A           -         3 ##   [6328]    chr18  80159262      + |           A           -         2 ##   [6329]    chr18  80172518      - |           A           -         0 ##   [6330]    chr18  80174441      - |           A           -         0 ##               nVar        nA        nT        nC        nG        nN ##          <integer> <integer> <integer> <integer> <integer> <integer> ##      [1]         0         0         0         0         0         0 ##      [2]         0         0         0         0         0         0 ##      [3]         0         0         0         0         0         0 ##      [4]         0         0         0         0         0         0 ##      [5]         0         0         0         0         0         0 ##      ...       ...       ...       ...       ...       ...       ... ##   [6326]         0         2         0         0         0         0 ##   [6327]         0         3         0         0         0         0 ##   [6328]         0         2         0         0         0         0 ##   [6329]         0         0         0         0         0         0 ##   [6330]         0         0         0         0         0         0 ##   ------- ##   seqinfo: 194 sequences from an unspecified genome names(plps) <- names(bam_files)  se <- create_se(plps) se ## class: RangedSummarizedExperiment  ## dim: 6330 6  ## metadata(0): ## assays(7): Var nRef ... nC nG ## rownames(6330): chr18_168574_1 chr18_168577_1 ... ##   chr18_80172518_2 chr18_80174441_2 ## rowData names(1): Ref ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(1): sample colData(se)$genotype_treatment <- rep(c(\"ADAR1KO Interferon beta\",                                           \"Wildtype Interferon beta\"),                                        each = 3)  colData(se)$genotype <- rep(c(\"ADAR1KO\",                                \"Wildtype\"),                             each = 3) colData(se) ## DataFrame with 6 rows and 3 columns ##                                             sample     genotype_treatment ##                                        <character>            <character> ## SRR5564260_dedup_sorted.bam SRR5564260_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564261_dedup_sorted.bam SRR5564261_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564269_dedup_sorted.bam SRR5564269_dedup_sor.. ADAR1KO Interferon b.. ## SRR5564270_dedup_sorted.bam SRR5564270_dedup_sor.. Wildtype Interferon .. ## SRR5564271_dedup_sorted.bam SRR5564271_dedup_sor.. Wildtype Interferon .. ## SRR5564277_dedup_sorted.bam SRR5564277_dedup_sor.. Wildtype Interferon .. ##                                genotype ##                             <character> ## SRR5564260_dedup_sorted.bam     ADAR1KO ## SRR5564261_dedup_sorted.bam     ADAR1KO ## SRR5564269_dedup_sorted.bam     ADAR1KO ## SRR5564270_dedup_sorted.bam    Wildtype ## SRR5564271_dedup_sorted.bam    Wildtype ## SRR5564277_dedup_sorted.bam    Wildtype"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"prepare-for-differential-editing","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Prepare for differential editing","title":"Introducing the raer package","text":"next use calc_edit_frequency function identify percent edits position sample. drop = TRUE argument also exclude sites without adenosine. editing frequencies used differential editing analysis, conducted using raw counts, however useful filtering visualization. can next subset summarizedExperiment object low frequency editing events. analysis require editing site shows editing least 1 sample, least 5 counts sample. object filtered, can prepare DE. means making new object contains assay read counts alt ref alleles single matrix.","code":"se_filtered <- calc_edit_frequency(se,                                     edit_from = \"A\",                                    edit_to = \"G\",                                    drop = TRUE) has_editing <- rowSums(assay(se_filtered, \"edit_freq\") > 0) >= 1 has_depth <- rowSums(((assay(se_filtered, \"nRef\") +                           assay(se_filtered, \"nVar\")) >= 5)) == ncol(se_filtered)  se_filtered <- se_filtered[has_editing & has_depth, ] se_filtered ## class: RangedSummarizedExperiment  ## dim: 611 6  ## metadata(0): ## assays(9): Var nRef ... depth edit_freq ## rownames(611): chr18_204625_1 chr18_204626_1 ... chr18_80158602_2 ##   chr18_80158603_2 ## rowData names(1): Ref ## colnames(6): SRR5564260_dedup_sorted.bam ##   SRR5564261_dedup_sorted.bam ... SRR5564271_dedup_sorted.bam ##   SRR5564277_dedup_sorted.bam ## colData names(5): sample genotype_treatment genotype n_sites ##   edit_idx deobj <- prep_for_de(se_filtered,                      min_prop = 0.1,                      max_prop = 0.9,                      min_samples = 3)  assay(deobj, \"counts\")[1:3, ] ##                  SRR5564260_dedup_sorted.bam_ref ## chr18_692390_2                                 6 ## chr18_692402_2                                 5 ## chr18_21631169_1                               8 ##                  SRR5564261_dedup_sorted.bam_ref ## chr18_692390_2                                12 ## chr18_692402_2                                10 ## chr18_21631169_1                              10 ##                  SRR5564269_dedup_sorted.bam_ref ## chr18_692390_2                                13 ## chr18_692402_2                                13 ## chr18_21631169_1                              15 ##                  SRR5564270_dedup_sorted.bam_ref ## chr18_692390_2                                18 ## chr18_692402_2                                14 ## chr18_21631169_1                              10 ##                  SRR5564271_dedup_sorted.bam_ref ## chr18_692390_2                                13 ## chr18_692402_2                                10 ## chr18_21631169_1                               3 ##                  SRR5564277_dedup_sorted.bam_ref ## chr18_692390_2                                 8 ## chr18_692402_2                                 3 ## chr18_21631169_1                               4 ##                  SRR5564260_dedup_sorted.bam_alt ## chr18_692390_2                                 0 ## chr18_692402_2                                 0 ## chr18_21631169_1                               0 ##                  SRR5564261_dedup_sorted.bam_alt ## chr18_692390_2                                 0 ## chr18_692402_2                                 0 ## chr18_21631169_1                               0 ##                  SRR5564269_dedup_sorted.bam_alt ## chr18_692390_2                                 0 ## chr18_692402_2                                 0 ## chr18_21631169_1                               0 ##                  SRR5564270_dedup_sorted.bam_alt ## chr18_692390_2                                 5 ## chr18_692402_2                                 7 ## chr18_21631169_1                               4 ##                  SRR5564271_dedup_sorted.bam_alt ## chr18_692390_2                                 2 ## chr18_692402_2                                 4 ## chr18_21631169_1                               3 ##                  SRR5564277_dedup_sorted.bam_alt ## chr18_692390_2                                 2 ## chr18_692402_2                                 5 ## chr18_21631169_1                               4"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing-deseq2","dir":"Articles","previous_headings":"Differential Editing tutorial","what":"Run differential editing (DESeq2)","title":"Introducing the raer package","text":"stage, can use object perform DE can continue pre built functions differential editing, use design design <- ~0 + condition:sample + condition:count. samples, can leave combine sample name shows treatment control. results identical close. hands, genes come , p values log fold change values slightly different. probably best update levels object, don’t, still work. run using DESeq2, set type = DESeq2 de_results function. function requires specify control treatment condition column deobj. edgeR also supported. returns list containing dds object, full results, significant results, model matrix.","code":"de_results <- perform_de(deobj, type = \"DESeq2\",                           sample_col = \"sample\",                          condition_col = \"genotype\",                          condition_control = \"Wildtype\",                          condition_treatment = \"ADAR1KO\") de_results$sig_results[1:5, ] ##                   baseMean log2FoldChange     lfcSE      stat ## chr18_32070144_1  6.750000      -2.455124 0.9657692 -2.542143 ## chr18_35247800_1  8.333333      -2.843321 1.0202664 -2.786841 ## chr18_23296417_2 14.583333      -3.055300 0.7775433 -3.929427 ## chr18_32120079_1  7.916667      -3.296187 1.3657932 -2.413387 ## chr18_36022846_2  4.333333      -3.347566 1.2099414 -2.766718 ##                        pvalue         padj ## chr18_32070144_1 1.101751e-02 0.0148902513 ## chr18_35247800_1 5.322451e-03 0.0087342790 ## chr18_23296417_2 8.514836e-05 0.0003405934 ## chr18_32120079_1 1.580504e-02 0.0198337786 ## chr18_36022846_2 5.662375e-03 0.0090597999 top_sites <- rownames(de_results$sig_results)[1:20]  Heatmap(assay(se_filtered, \"edit_freq\")[top_sites, ],          col = viridis(100),          column_labels = se_filtered$genotype_treatment) unlink(data_dir) sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] stringr_1.4.1               viridis_0.6.2               ##  [3] viridisLite_0.4.1           ComplexHeatmap_2.13.1       ##  [5] DESeq2_1.37.6               SummarizedExperiment_1.27.3 ##  [7] Biobase_2.57.1              GenomicRanges_1.49.1        ##  [9] GenomeInfoDb_1.33.7         IRanges_2.31.2              ## [11] S4Vectors_0.35.4            BiocGenerics_0.43.4         ## [13] MatrixGenerics_1.9.1        matrixStats_0.62.0          ## [15] raer_0.99.0                 BiocStyle_2.25.0            ##  ## loaded via a namespace (and not attached): ##   [1] colorspace_2.0-3         rjson_0.2.21             ##   [3] ellipsis_0.3.2           rprojroot_2.0.3          ##   [5] circlize_0.4.15          XVector_0.37.1           ##   [7] GlobalOptions_0.1.2      fs_1.5.2                 ##   [9] clue_0.3-61              bit64_4.0.5              ##  [11] AnnotationDbi_1.59.1     fansi_1.0.3              ##  [13] xml2_1.3.3               codetools_0.2-18         ##  [15] splines_4.2.1            R.methodsS3_1.8.2        ##  [17] doParallel_1.0.17        cachem_1.0.6             ##  [19] geneplotter_1.75.0       knitr_1.40               ##  [21] jsonlite_1.8.0           Cairo_1.6-0              ##  [23] Rsamtools_2.13.4         annotate_1.75.0          ##  [25] cluster_2.1.4            dbplyr_2.2.1             ##  [27] png_0.1-7                R.oo_1.25.0              ##  [29] BiocManager_1.30.18      compiler_4.2.1           ##  [31] httr_1.4.4               assertthat_0.2.1         ##  [33] Matrix_1.5-1             fastmap_1.1.0            ##  [35] cli_3.4.1                htmltools_0.5.3          ##  [37] prettyunits_1.1.1        tools_4.2.1              ##  [39] gtable_0.3.1             glue_1.6.2               ##  [41] GenomeInfoDbData_1.2.9   dplyr_1.0.10             ##  [43] rappdirs_0.3.3           Rcpp_1.0.9               ##  [45] jquerylib_0.1.4          pkgdown_2.0.6            ##  [47] vctrs_0.4.2              Biostrings_2.65.6        ##  [49] rtracklayer_1.57.0       iterators_1.0.14         ##  [51] xfun_0.33                lifecycle_1.0.2          ##  [53] restfulr_0.0.15          XML_3.99-0.10            ##  [55] zlibbioc_1.43.0          scales_1.2.1             ##  [57] BSgenome_1.65.2          ragg_1.2.3               ##  [59] hms_1.1.2                parallel_4.2.1           ##  [61] RColorBrewer_1.1-3       yaml_2.3.5               ##  [63] curl_4.3.2               gridExtra_2.3            ##  [65] memoise_2.0.1            ggplot2_3.3.6            ##  [67] sass_0.4.2               biomaRt_2.53.2           ##  [69] stringi_1.7.8            RSQLite_2.2.17           ##  [71] highr_0.9                genefilter_1.79.0        ##  [73] BiocIO_1.7.1             desc_1.4.2               ##  [75] foreach_1.5.2            GenomicFeatures_1.49.7   ##  [77] filelock_1.0.2           BiocParallel_1.31.12     ##  [79] shape_1.4.6              rlang_1.0.6              ##  [81] pkgconfig_2.0.3          systemfonts_1.0.4        ##  [83] bitops_1.0-7             evaluate_0.16            ##  [85] lattice_0.20-45          purrr_0.3.4              ##  [87] GenomicAlignments_1.33.1 bit_4.0.4                ##  [89] tidyselect_1.1.2         magrittr_2.0.3           ##  [91] bookdown_0.29            R6_2.5.1                 ##  [93] generics_0.1.3           DelayedArray_0.23.2      ##  [95] DBI_1.1.3                pillar_1.8.1             ##  [97] survival_3.4-0           KEGGREST_1.37.3          ##  [99] RCurl_1.98-1.8           tibble_3.1.8             ## [101] crayon_1.5.2             utf8_1.2.2               ## [103] BiocFileCache_2.5.0      rmarkdown_2.16           ## [105] GetoptLong_1.0.5         progress_1.2.2           ## [107] locfit_1.5-9.6           data.table_1.14.2        ## [109] blob_1.2.3               digest_0.6.29            ## [111] xtable_1.8-4             R.utils_2.12.0           ## [113] textshaping_0.3.6        munsell_0.5.0            ## [115] bslib_0.4.0"},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"characterizing-rna-editing-sites-in-single-cell-data","dir":"Articles","previous_headings":"","what":"Characterizing RNA editing sites in single cell data","title":"Identifying RNA editing sites in droplet single cell datasets","text":"vignette demonstrate use raer package examine RNA editing droplet-based single cell RNA-seq data.","code":""},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"preprocessing","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Preprocessing","title":"Identifying RNA editing sites in droplet single cell datasets","text":"example analysis use single cell dataset containing mouse brain cells generated 10x Genomics. single cell data processed using cellranger pipeline. BAM file contains tag (CB) indicates cell-barcode associated alignment, well tag encoding information alignments representative UMI (xf). process bam using raer conduct preprocessing steps using command line tools (samtools). First remove PCR duplicates, keeping reads representative UMIs. suggested 10x genomics, filter keep reads bitwise alignment flag set xf::25. using bamfiles generated cellranger prior versions v7.0.0, may want reprocess data --include-introns. Intron aligned reads considered potential UMIs, excluded filtering xf::25. default behavior version 7.0.0 include introns. filtering UMIs bam sorted CB tag. sorting strategy enable rapid extraction alignments individual (sets ) cell-barcodes. steps can combined follows: raer contains functionality build simple index stores file position cell-barcode, enabling rapid extraction alignments defined cell-barcodes. method based approach Jared Thompson bri commandline tool. index file .bri index file name.","code":"samtools view -b -d \"xf:25\"  possorted_genome_bam.bam| \\   samtools sort -t CB \\   > cbsorted_genome_bam.bam idx_filename <- build_tag_index(\"cbsorted_genome_bam.bam\", tag = \"CB\")"},{"path":"https://rnabioco.github.io/raer/articles/single-cell.html","id":"single-cell-editing-analysis","dir":"Articles","previous_headings":"Characterizing RNA editing sites in single cell data","what":"Single cell editing analysis","title":"Identifying RNA editing sites in droplet single cell datasets","text":"vignette, use data human PBMC scRNA-seq dataset 10x Genomics. ’ll first index bam file using build_tag_index. can query index see cell-barcodes present bam file using show_tag_index(), return data.frame containing tag value number alignments associated tag. vignette select cell-barcodes least x reads, Next ’ll load SingleCellExperiment cell-type annotations.  Next ’ll select editing sites query. analysis use sites Rediportal database. minimize processing time first identify sites read coverage. filter_by_coverage() examine read coverage across alignments avoid examining storing information sites minimal coverage. analyzing single cell data option quantify editing sites cell can quantify sites pooling alignments across similar cells, cells cluster. raer provides wrapper function, sc_editing(), extract alignments per cell (cluster) using get_tag_bam(), generate editing site counts (get_pileup()), collect site counts SummarizedExperiment (create_se()). cell_barcodes argument specifies cell-barcodes queried. character vector cell-barcodes supplied, editing sites quantified per cell-barcode. Alternatively list containing cell-barcodes per cluster group can supplied, case editing sites quantified pooling alignments per group. Arguments get_pileup() can passed sc_editing(). Additionally, editing site counts can stored sparseMatrices reduce memory usage setting sparse = TRUE. Lastly, processing time can reduced operating parallel across groups cells (clusters), supplying BiocParallel backend BPPARAM argument (e.g. MultiCoreParam()). Next ’ll filter pileups find sites least 5 cells editing event, add editing information SingleCellExperiment altExp(). editing sites added SingleCellExperiment can use plotting methods previously developed single cell analysis. ’ll visualize editing sites highest edited read counts.            Various tools Bioconductor can used provide additional annotation information RNA editing site. VariantAnnotation package provides powerful functionality annotate location editing site, provide information alterations codons splice site.","code":"data_dir <- tempdir() fns <- download_human_pbmc(data_dir) fns ## $bams ##                   10k_PBMC_3p_nextgem_Chromium_X_intron_cbsorted_genome_rediportal_xf25_chr16.bam  ## \"/tmp/RtmpkQ4tfk/10k_PBMC_3p_nextgem_Chromium_X_intron_cbsorted_genome_rediportal_xf25_chr16.bam\"  ##  ## $fasta ##                   hg38_chr16.fasta.bgz  ## \"/tmp/RtmpkQ4tfk/hg38_chr16.fasta.bgz\"  ##  ## $edit_sites ##                   rediportal_sites.bed.gz  ## \"/tmp/RtmpkQ4tfk/rediportal_sites.bed.gz\"  ##  ## $sce ##                   sce.rds  ## \"/tmp/RtmpkQ4tfk/sce.rds\" bam_fn <- fns$bams fa_fn <-  fns$fasta bed_fn <- fns$edit_sites build_tag_index(bam_fn, tag = \"CB\", overwrite = FALSE) ## [1] \"/tmp/RtmpkQ4tfk/10k_PBMC_3p_nextgem_Chromium_X_intron_cbsorted_genome_rediportal_xf25_chr16.bam.bri\" tag_df <- show_tag_index(bam_fn) head(tag_df) ##                  tag n ## 1 AAACCCAAGAAGCCAC-1 1 ## 2 AAACCCAAGAAGGATG-1 1 ## 3 AAACCCAAGACCATAA-1 2 ## 4 AAACCCAAGACGTCGA-1 1 ## 5 AAACCCAAGATACGAT-1 2 ## 6 AAACCCAAGATGTAGT-1 1 sce <- readRDS(fns$sce)  plotUMAP(sce, colour_by = \"celltype\") cbs <- colnames(sce) se <- sc_editing(bamfile = bam_fn,                  fafile = fa_fn,                  bedfile = bed_fn,                  cell_barcodes = cbs,                  assay_cols = c(\"nA\", \"nG\"),                  filterParam = FilterParam(min_base_quality = 30L,                                            library_type = \"fr-second-strand\",                                            min_nucleotide_depth = 1L,                                            trim_5p = 5L,                                            trim_3p = 5L)) ## beginning pileup ## working on: batch 1 (cells 1-50) ## working on: batch 2 (cells 51-100) ## working on: batch 3 (cells 101-150) ## working on: batch 4 (cells 151-200) ## working on: batch 5 (cells 201-250) ## working on: batch 6 (cells 251-300) ## working on: batch 7 (cells 301-350) ## working on: batch 8 (cells 351-400) ## working on: batch 9 (cells 401-450) ## working on: batch 10 (cells 451-500) ## pileup completing, binding summarizedExperiments se ## class: RangedSummarizedExperiment  ## dim: 58802 500  ## metadata(0): ## assays(2): nA nG ## rownames(58802): chr16_83477_1 chr16_83486_1 ... chr16_90172755_1 ##   chr16_90172757_1 ## rowData names(1): Ref ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(1): sample se <- se[Matrix::rowSums(assay(se, \"nA\") + assay(se, \"nG\")) != 0, ]  se <- calc_edit_frequency(se, edit_from = \"A\", edit_to = \"G\", replace_na = FALSE) se <- se[, colnames(sce)]  small_se <- se[rowSums(assay(se, \"nG\") > 0) >= 5, ] altExp(sce, \"edits\") <- small_se to_plot <- rownames(altExp(sce))[order(rowSums(assay(altExp(sce), \"nG\")) , decreasing = TRUE)]  lapply(to_plot[1:10], function(x){   plotUMAP(sce, colour_by = x, by_exprs_values = \"nG\") }) ## [[1]] ##  ## [[2]] ##  ## [[3]] ##  ## [[4]] ##  ## [[5]] ##  ## [[6]] ##  ## [[7]] ##  ## [[8]] ##  ## [[9]] ##  ## [[10]] altExp(sce)$cell_type <- sce$celltype  plotGroupedHeatmap(altExp(sce),              features = to_plot[1:25],              group = \"cell_type\",             exprs_values = \"nG\") sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] rtracklayer_1.57.0          GenomicFeatures_1.49.7      ##  [3] AnnotationDbi_1.59.1        scater_1.25.7               ##  [5] ggplot2_3.3.6               scuttle_1.7.4               ##  [7] SingleCellExperiment_1.19.0 SummarizedExperiment_1.27.3 ##  [9] Biobase_2.57.1              GenomicRanges_1.49.1        ## [11] GenomeInfoDb_1.33.7         IRanges_2.31.2              ## [13] S4Vectors_0.35.4            BiocGenerics_0.43.4         ## [15] MatrixGenerics_1.9.1        matrixStats_0.62.0          ## [17] raer_0.99.0                 BiocStyle_2.25.0            ##  ## loaded via a namespace (and not attached): ##   [1] ggbeeswarm_0.6.0          colorspace_2.0-3          ##   [3] rjson_0.2.21              ellipsis_0.3.2            ##   [5] rprojroot_2.0.3           XVector_0.37.1            ##   [7] BiocNeighbors_1.15.1      fs_1.5.2                  ##   [9] farver_2.1.1              ggrepel_0.9.1             ##  [11] bit64_4.0.5               fansi_1.0.3               ##  [13] xml2_1.3.3                codetools_0.2-18          ##  [15] R.methodsS3_1.8.2         sparseMatrixStats_1.9.0   ##  [17] cachem_1.0.6              knitr_1.40                ##  [19] jsonlite_1.8.0            Rsamtools_2.13.4          ##  [21] dbplyr_2.2.1              png_0.1-7                 ##  [23] R.oo_1.25.0               pheatmap_1.0.12           ##  [25] BiocManager_1.30.18       compiler_4.2.1            ##  [27] httr_1.4.4                assertthat_0.2.1          ##  [29] Matrix_1.5-1              fastmap_1.1.0             ##  [31] cli_3.4.1                 BiocSingular_1.13.1       ##  [33] htmltools_0.5.3           prettyunits_1.1.1         ##  [35] tools_4.2.1               rsvd_1.0.5                ##  [37] gtable_0.3.1              glue_1.6.2                ##  [39] GenomeInfoDbData_1.2.9    dplyr_1.0.10              ##  [41] rappdirs_0.3.3            Rcpp_1.0.9                ##  [43] jquerylib_0.1.4           pkgdown_2.0.6             ##  [45] vctrs_0.4.2               Biostrings_2.65.6         ##  [47] DelayedMatrixStats_1.19.1 xfun_0.33                 ##  [49] stringr_1.4.1             beachmat_2.13.4           ##  [51] irlba_2.3.5               lifecycle_1.0.2           ##  [53] restfulr_0.0.15           XML_3.99-0.10             ##  [55] zlibbioc_1.43.0           scales_1.2.1              ##  [57] BSgenome_1.65.2           ragg_1.2.3                ##  [59] hms_1.1.2                 parallel_4.2.1            ##  [61] RColorBrewer_1.1-3        yaml_2.3.5                ##  [63] curl_4.3.2                gridExtra_2.3             ##  [65] memoise_2.0.1             sass_0.4.2                ##  [67] biomaRt_2.53.2            stringi_1.7.8             ##  [69] RSQLite_2.2.17            highr_0.9                 ##  [71] BiocIO_1.7.1              desc_1.4.2                ##  [73] ScaledMatrix_1.5.1        filelock_1.0.2            ##  [75] BiocParallel_1.31.12      rlang_1.0.6               ##  [77] pkgconfig_2.0.3           systemfonts_1.0.4         ##  [79] bitops_1.0-7              evaluate_0.16             ##  [81] lattice_0.20-45           purrr_0.3.4               ##  [83] labeling_0.4.2            GenomicAlignments_1.33.1  ##  [85] bit_4.0.4                 tidyselect_1.1.2          ##  [87] magrittr_2.0.3            bookdown_0.29             ##  [89] R6_2.5.1                  generics_0.1.3            ##  [91] DelayedArray_0.23.2       DBI_1.1.3                 ##  [93] pillar_1.8.1              withr_2.5.0               ##  [95] KEGGREST_1.37.3           RCurl_1.98-1.8            ##  [97] tibble_3.1.8              crayon_1.5.2              ##  [99] utf8_1.2.2                BiocFileCache_2.5.0       ## [101] rmarkdown_2.16            viridis_0.6.2             ## [103] progress_1.2.2            grid_4.2.1                ## [105] data.table_1.14.2         blob_1.2.3                ## [107] digest_0.6.29             R.utils_2.12.0            ## [109] textshaping_0.3.6         munsell_0.5.0             ## [111] viridisLite_0.4.1         beeswarm_0.4.0            ## [113] vipor_0.4.5               bslib_0.4.0"},{"path":"https://rnabioco.github.io/raer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Riemondy. Author, maintainer. Kristen Wells-Wrasman. Author. Ryan Sheridan. Contributor. Jay Hesselberth. Contributor. . Copyright holder, funder.","code":""},{"path":"https://rnabioco.github.io/raer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemondy K, Wells-Wrasman K (2022). raer: RNA editing tools R. https://rnabioco.github.io/raer, https://github.com/rnabioco/raer.","code":"@Manual{,   title = {raer: RNA editing tools in R},   author = {Kent Riemondy and Kristen Wells-Wrasman},   year = {2022},   note = {https://rnabioco.github.io/raer, https://github.com/rnabioco/raer}, }"},{"path":"https://rnabioco.github.io/raer/index.html","id":"raer","dir":"","previous_headings":"","what":"RNA editing tools in R","title":"RNA editing tools in R","text":"raer R package facilitates rapid interactive analysis RNA editing R bioconductor ecosystem. raer active development functionality may change","code":""},{"path":"https://rnabioco.github.io/raer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RNA editing tools in R","text":"can install development version raer GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rnabioco/raer\")"},{"path":"https://rnabioco.github.io/raer/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"RNA editing tools in R","text":"raer package provides methods compute per site read count summaries bam files, either known sites, detected sites. FilterParam() class holds multiple options customizing output get_pileup(). Multiple bam files can processed, enables rapid comparisons RNA-Seq vs. WGS WXS data, RNA-Seq vs RNA-seq (ADAR WT VS ADAR KO). facilitate comparisons across groups, pileups can stored RangedSummarizedExperiment.","code":"library(raer) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") bedfn <- raer_example(\"regions.bed\")  res <- get_pileup(bamfn, fafn, bedfile = bedfn) res[1:5, ] #> GRanges object with 5 ranges and 9 metadata columns: #>       seqnames    ranges strand |         Ref         Var      nRef      nVar #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>   [1]     SSR3       201      - |           A           -        14         0 #>   [2]     SSR3       202      - |           T           -        14         0 #>   [3]     SSR3       203      - |           T           -        14         0 #>   [4]     SSR3       204      - |           T           -        15         0 #>   [5]     SSR3       205      - |           T           -        16         0 #>              nA        nT        nC        nG        nN #>       <integer> <integer> <integer> <integer> <integer> #>   [1]        14         0         0         0         0 #>   [2]         0        14         0         0         0 #>   [3]         0        14         0         0         0 #>   [4]         0        15         0         0         0 #>   [5]         0        16         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome fp <- FilterParam(only_keep_variants = TRUE) res <- get_pileup(bamfn, fafn, filterParam = fp) res #> GRanges object with 31 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       228      - |           A          AG        13         1 #>    [3]     SSR3       244      - |           A          AG        18         1 #>    [4]     SSR3       254      - |           A          AG        18         1 #>    [5]     SSR3       258      - |           G          GA         8        10 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [27]     DHFR       300      - |           A          AG        56         1 #>   [28]     DHFR       332      - |           A          AG        55         1 #>   [29]     DHFR       336      - |           G          GT        51         1 #>   [30]     DHFR       430      - |           A          AT        37         1 #>   [31]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0 #>    [2]        13         0         0         1         0 #>    [3]        18         0         0         1         0 #>    [4]        18         0         0         1         0 #>    [5]        10         0         0         8         0 #>    ...       ...       ...       ...       ...       ... #>   [27]        56         0         0         1         0 #>   [28]        55         0         0         1         0 #>   [29]         0         1         0        51         0 #>   [30]        37         1         0         0         0 #>   [31]         0        35         1         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome fp <- FilterParam(only_keep_variants = TRUE,                   library_type = \"fr-first-strand\",                   min_nucleotide_depth = 2)  plps <- get_pileup(c(bam2fn, bamfn),                    fafn,                    filterParam = fp) plps #> [[1]] #> GRanges object with 74 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T           -        15         0 #>    [2]     SSR3       125      - |           C          CG        21         1 #>    [3]     SSR3       156      - |           C          CA        25         1 #>    [4]     SSR3       176      - |           A          AG         8        16 #>    [5]     SSR3       198      - |           A          AG        24         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A          AT        31         1 #>   [71]     DHFR       399      - |           G          GA        28         1 #>   [72]     DHFR       423      - |           T          TC        31         1 #>   [73]     DHFR       430      - |           A           -        33         0 #>   [74]     DHFR       513      - |           T           -        21         0 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        15         0         0         0 #>    [2]         0         0        21         1         0 #>    [3]         1         0        25         0         0 #>    [4]         8         0         0        16         0 #>    [5]        24         0         0         1         0 #>    ...       ...       ...       ...       ...       ... #>   [70]        31         1         0         0         0 #>   [71]         1         0         0        28         0 #>   [72]         0        31         1         0         0 #>   [73]        33         0         0         0         0 #>   [74]         0        21         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome #>  #> [[2]] #> GRanges object with 74 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       125      - |           C           -        17         0 #>    [3]     SSR3       156      - |           C           -        16         0 #>    [4]     SSR3       176      - |           A           -        16         0 #>    [5]     SSR3       198      - |           A           -        15         0 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A           -        43         0 #>   [71]     DHFR       399      - |           G           -        43         0 #>   [72]     DHFR       423      - |           T           -        42         0 #>   [73]     DHFR       430      - |           A          AT        37         1 #>   [74]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0 #>    [2]         0         0        17         0         0 #>    [3]         0         0        16         0         0 #>    [4]        16         0         0         0         0 #>    [5]        15         0         0         0         0 #>    ...       ...       ...       ...       ...       ... #>   [70]        43         0         0         0         0 #>   [71]         0         0         0        43         0 #>   [72]         0        42         0         0         0 #>   [73]        37         1         0         0         0 #>   [74]         0        35         1         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome create_se(plps) #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): Var nRef ... nC nG #> rownames(74): SSR3_102_2 SSR3_125_2 ... DHFR_430_2 DHFR_513_2 #> rowData names(1): Ref #> colnames(2): sample_1 sample_2 #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"RNA editing tools in R","text":"functionality raer builds previously published methods software: Python package: REDItools Picardi E, Pesole G Java tool: JACUSA2 Piechotta M et al Python-based pipeline: deNovo-Detect Gabey O et al Java-based tool: RNAEditingIndexer Roth SH et al","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Utility function map annotations GRanges rowData SummarizedExperiment GRanges object . multiple features overlap concatenated comma separated values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"annot_from_gr(obj, gr, cols_to_map, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"obj RangedSummarizedExperiment GRanges object gr GRanges annotations map obj cols_to_map character vector columns gr map obj. vector names, names column names output obj ... additional arguments pass GenomicRanges::findOverlaps()","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Either SummarizedExperiment GRanges object additional annotations provided supplied GRanges object.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"example(create_se, echo = FALSE) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, #>     append, as.data.frame, basename, cbind, colnames, dirname, #>     do.call, duplicated, eval, evalq, get, grep, grepl, #>     intersect, is.unsorted, lapply, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rownames, #>     sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(SummarizedExperiment) gr <- GRanges(rep(c(\"SSR3\", \"SPCS3\"), c(5, 15)),   IRanges(seq(1, 500, by = 25), width = 50),   strand = \"+\") gr$feature <- sample(1:100, size = 20) gr$id <- sample(LETTERS, size = 20)  se <- annot_from_gr(se, gr, c(feature_set = \"feature\", \"id\")) rowData(se) #> DataFrame with 74 rows and 3 columns #>                    Ref feature_set          id #>            <character> <character> <character> #> SSR3_102_2           T          NA          NA #> SSR3_125_2           C          NA          NA #> SSR3_156_2           C          NA          NA #> SSR3_176_2           A          NA          NA #> SSR3_198_2           A          NA          NA #> ...                ...         ...         ... #> DHFR_397_2           A          NA          NA #> DHFR_399_2           G          NA          NA #> DHFR_423_2           T          NA          NA #> DHFR_430_2           A          NA          NA #> DHFR_513_2           T          NA          NA"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate known SNP positions — annot_snps","title":"Annotate known SNP positions — annot_snps","text":"function annotate GRanges rowRanges SummarizedExperiment SNP positions SNP package","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate known SNP positions — annot_snps","text":"","code":"annot_snps(obj, ...)  # S3 method for GRanges annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )  # S3 method for SummarizedExperiment annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate known SNP positions — annot_snps","text":"obj GRanges SummarizedExperiment  object ... generic, arguments pass specific methods. Unused now. dbsnp SNPlocs package, see available packages BSgenome::available.SNPs() chrom operate specified chromosome col_to_aggr column SNPlocs package add input. multiple SNPs overlap values concatenated comma separated values. drop TRUE, remove sites overlap SNPs","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate known SNP positions — annot_snps","text":"Either GRanges SummarizedExperiment object new column \"snp\" added information \"col_to_aggr\"","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate known SNP positions — annot_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {   gr <- GRanges(rep(\"22\", 10),                 IRanges(seq(10510077,                             10610077,                             by = 1000)[1:10],                         width = 250),                 strand = \"+\")   annot_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> Loading required package: SNPlocs.Hsapiens.dbSNP144.GRCh38 #> Loading required package: BSgenome #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Loading required package: rtracklayer #> Warning: more than one seqlevels style supplied, using the 1st one only #> GRanges object with 10 ranges and 1 metadata column: #>        seqnames            ranges strand |   RefSNP_id #>           <Rle>         <IRanges>  <Rle> | <character> #>    [1]       22 10510077-10510326      + |             #>    [2]       22 10511077-10511326      + |   rs4022986 #>    [3]       22 10512077-10512326      + |             #>    [4]       22 10513077-10513326      + |             #>    [5]       22 10514077-10514326      + |             #>    [6]       22 10515077-10515326      + |             #>    [7]       22 10516077-10516326      + |             #>    [8]       22 10517077-10517326      + |             #>    [9]       22 10518077-10518326      + |             #>   [10]       22 10519077-10519326      + |             #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function perform pileup specified repeat regions return summary AEI metric.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"calc_AEI(   bam_fn,   fasta_fn,   alu_ranges = NULL,   txdb = NULL,   snp_db = NULL,   filterParam = FilterParam(),   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"bam_fn bam file fasta_fn fasta alu_ranges GRanges name BEDfile regions query calculating AEI, typically ALU repeats. BED file supplied filtered txdb option. txdb txdb object, supplied, used subset alu_ranges found overlapping genes. Alternatively GRanges object gene coordinates. snp_db either SNPlocs package, GPos, GRanges object. supplied, used exclude polymorphic positions prior calculating AEI. calc_AEI() used many times, one save time first identifying SNPs overlap supplied alu_ranges, passing GRanges snp_db rather supplying known SNPs (see get_overlapping_snps()). Combined using bedfile alu_ranges can also save time. filterParam object class FilterParam() specify various filters apply reads sites pileup. BPPARAM BiocParallelParam object specifying parallel options operating chromosomes. verbose report progress chromosome?","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"named list AEI index computed allelic combinations. correctly computed signal A_G index higher alleles (T_C), likely derived noise polymorphisms.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"suppressPackageStartupMessages(library(Rsamtools)) bamfn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") dummy_alu_ranges <- scanFaIndex(fafn) calc_AEI(bamfn, fafn, dummy_alu_ranges) #> $A_C #> [1] 0 #>  #> $A_G #> [1] 2.298586 #>  #> $A_T #> [1] 0.1292293 #>  #> $C_A #> [1] 0.2142033 #>  #> $C_G #> [1] 0.01650982 #>  #> $C_T #> [1] 0.2635046 #>  #> $G_A #> [1] 0.3170769 #>  #> $G_C #> [1] 0 #>  #> $G_T #> [1] 0 #>  #> $T_A #> [1] 0 #>  #> $T_C #> [1] 0.0116198 #>  #> $T_G #> [1] 0.0116198 #>"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds editing frequencies — calc_edit_frequency","title":"Adds editing frequencies — calc_edit_frequency","text":"Adds editing frequencies existing SummarizedExperiment object (created create_se). SummarizedExperiment new assay editing frequencies site (edit_freq), depth coverage computed using indicatededited nucleotides (depth`) new colData columns number edited sites (n_sites) fraction edits (edit_idx) returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"calc_edit_frequency(   se,   edit_from = NULL,   edit_to = NULL,   drop = FALSE,   replace_na = TRUE,   edit_frequency = 0,   min_count = 1 )"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds editing frequencies — calc_edit_frequency","text":"se SummarizedExperiment object created create_se edit_from nucleotide (, C, G, T) corresponding nucleotide expect reference. Ex. editing events, \"\". NULL, editing frequencies calculated using nVar nRef values. edit_to nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". NULL, editing frequencies calculated using nVar nRef values. drop TRUE, summarizedExperiment returned retain sites matching specified edit_from edit_to bases. replace_na TRUE, NA NaN editing frequencies coerced 0. edit_frequency edit frequency cutoff used calculating number sites. Set 0 require non-zero editing frequency. number sites stored n_sites colData. min_count minimum number reads required enumerating number editing sites detected.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds editing frequencies — calc_edit_frequency","text":"SummarizedExperiment supplemented edit_freq assay.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) assay(se, \"edit_freq\")[1:5, ] #>                   KO1        KO2        KO3        WT1        WT2 #> SSR3_102_2 0.07692308 0.07692308 0.07692308 0.00000000 0.00000000 #> SSR3_125_2 0.00000000 0.00000000 0.00000000 0.04545455 0.04545455 #> SSR3_156_2 0.00000000 0.00000000 0.00000000 0.03846154 0.03846154 #> SSR3_176_2 0.00000000 0.00000000 0.00000000 0.66666667 0.66666667 #> SSR3_198_2 0.00000000 0.00000000 0.00000000 0.04000000 0.04000000 #>                   WT3 #> SSR3_102_2 0.00000000 #> SSR3_125_2 0.04545455 #> SSR3_156_2 0.03846154 #> SSR3_176_2 0.66666667 #> SSR3_198_2 0.04000000"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply strand correction using gene annotations — correct_strand","title":"Apply strand correction using gene annotations — correct_strand","text":"Gene annotations used infer likely strand editing sites. function operate unstranded datasets processed using \"genomic-unstranded\" library type reports variants respect strand sites. strand editing site assigned strand overlapping features genes_gr object. Sites -overlap, overlapping features conflicting strands (+ -) removed.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"correct_strand(gr, genes_gr)"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply strand correction using gene annotations — correct_strand","text":"gr GRanges object containing editing sites processed \"genomic-unstranded\" setting genes_gr GRanges object containing reference features annotate strand editing sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply strand correction using gene annotations — correct_strand","text":"GenomicRanges onbject containing pileup counts, strand corrected based supplied genomic intervals.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"suppressPackageStartupMessages(library(\"GenomicRanges\")) bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") fp <- FilterParam(library_type = \"genomic-unstranded\") plp <- get_pileup(bamfn, fafn, filterParam = fp)  genes <- GRanges(c(\"DHFR:200-400:+\",   \"SPCS3:100-200:-\",   \"SSR3:3-10:-\",   \"SSR3:6-12:+\")) correct_strand(plp, genes) #> GRanges object with 307 ranges and 9 metadata columns: #>         seqnames    ranges strand |         Ref         Var      nRef #>            <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>     [1]     SSR3         3      - |           A           -        14 #>     [2]     SSR3         4      - |           A           -        15 #>     [3]     SSR3         5      - |           G           -        15 #>     [4]     SSR3        11      + |           A           -        15 #>     [5]     SSR3        12      + |           T           -        15 #>     ...      ...       ...    ... .         ...         ...       ... #>   [303]     DHFR       396      + |           T           -        40 #>   [304]     DHFR       397      + |           T           -        43 #>   [305]     DHFR       398      + |           T           -        43 #>   [306]     DHFR       399      + |           C           -        43 #>   [307]     DHFR       400      + |           T           -        45 #>              nVar        nA        nT        nC        nG        nN #>         <integer> <integer> <integer> <integer> <integer> <integer> #>     [1]         0        14         0         0         0         0 #>     [2]         0        15         0         0         0         0 #>     [3]         0         0         0         0        15         0 #>     [4]         0        15         0         0         0         0 #>     [5]         0         0        15         0         0         0 #>     ...       ...       ...       ...       ...       ...       ... #>   [303]         0         0        40         0         0         0 #>   [304]         0         0        43         0         0         0 #>   [305]         0         0        43         0         0         0 #>   [306]         0         0         0        43         0         0 #>   [307]         0         0        45         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts edits — count_edits","title":"Counts edits — count_edits","text":"Counts edits per sample add new colData columns number edited sites (n_sites)  fraction edits (edit_idx). function called calc_edit_frequency meant used directly.","code":""},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts edits — count_edits","text":"","code":"count_edits(   se,   edit_frequency = 0.01,   min_count = 10,   edit_from = NULL,   edit_to = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts edits — count_edits","text":"se SummarizedExperiment object created create_se processed calc_edit_frequency edit_frequency OPTIONAL edit frequency used determine number sites. Default 0.01. min_count OPTIONAL number reads used determine number edited sites. Default 10. edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RangedSummarizedExperiment — create_se","title":"Create RangedSummarizedExperiment — create_se","text":"function take either single result running get_pileup() list results (ie different samples) running pileup_res return summarized experiment object contains assays specified columns get_pileup() output.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"create_se(   plps,   assay_cols = c(\"Var\", \"nRef\", \"nVar\", \"nA\", \"nT\", \"nC\", \"nG\"),   sample_names = NULL,   sparse = FALSE,   fill_na = NULL,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RangedSummarizedExperiment — create_se","text":"plps results running get_pileup(), can one result, list results, named list results. named list given, colData named using names list. assay_cols character vector columns store assays sample_names list names added SE object. sample names given plps named list, default names (ie sample_1, sample_2, ..., sample_n) given warning printed. sparse TRUE, numeric matrices stored sparseMatrices. missing values coerced 0 sparseMatrices. fill_na Numeric value replace NAs numeric matrices used plps computed independently min_nucleotide_count = 1, otherwise sites may set 0, although may coverage > 0 less min_nucleotide_count parameter. applied sparse = TRUE, coerces missing values 0. verbose print information progress","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create RangedSummarizedExperiment — create_se","text":"RangedSummarizedExperiment object populated assays listed assay_cols.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"library(SummarizedExperiment) bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") bam2fn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\")  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) fp <- FilterParam(only_keep_variants = TRUE) plps <- get_pileup(bams, fafn, filterParam = fp) names(plps) <- sample_ids se <- create_se(plps) se$condition <- substr(se$sample, 1, 2) assays(se) #> List of length 7 #> names(7): Var nRef nVar nA nT nC nG  colData(se) #> DataFrame with 6 rows and 2 columns #>          sample   condition #>     <character> <character> #> KO1         KO1          KO #> KO2         KO2          KO #> KO3         KO3          KO #> WT1         WT1          WT #> WT2         WT2          WT #> WT3         WT3          WT  rowRanges(se) #> GRanges object with 74 ranges and 1 metadata column: #>              seqnames    ranges strand |         Ref #>                 <Rle> <IRanges>  <Rle> | <character> #>   SSR3_102_2     SSR3       102      - |           T #>   SSR3_125_2     SSR3       125      - |           C #>   SSR3_156_2     SSR3       156      - |           C #>   SSR3_176_2     SSR3       176      - |           A #>   SSR3_198_2     SSR3       198      - |           A #>          ...      ...       ...    ... .         ... #>   DHFR_397_2     DHFR       397      - |           A #>   DHFR_399_2     DHFR       399      - |           G #>   DHFR_423_2     DHFR       423      - |           T #>   DHFR_430_2     DHFR       430      - |           A #>   DHFR_513_2     DHFR       513      - |           T #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GSE99249 BAM files and related data — download_GSE99249","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"function download ~ 250 MB data. function download ~ 5 GB data. function download < 1 GB data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"download_GSE99249(path)  download_NA12878(path)  download_human_pbmc(path)"},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"path path directory download data","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"named list paths BAM files, FASTA file bed file known editing sites hg38 chromosome 18. named list paths RNA-seq WGS BAM file, FASTA file hg38 chromosome 4. named list paths bam file, fasta file, bed file editing_sites, .rds file SingleCellExperiment","code":""},{"path":"https://rnabioco.github.io/raer/reference/download_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GSE99249 BAM files and related data — download_GSE99249","text":"","code":"if (FALSE) { td <- tempdir() download_GSE99249(td) } if (FALSE) { td <- tempdir() download_NA12878(td) } if (FALSE) { td <- tempdir() download_human_pbmc(td) }"},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify sites with read coverage — filter_by_coverage","title":"Identify sites with read coverage — filter_by_coverage","text":"function compute read coverage sites listed either GRanges BED file. Sites passing least min_counts read depth returned. function compute coverage across alignments positions, ignoring cell-barcodes. Generally faster compute coverage across positions, filter GRanges object, rather querying supplied sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify sites with read coverage — filter_by_coverage","text":"","code":"filter_by_coverage(bamfile, gr, min_counts, param = NULL, verbose = FALSE, ...)"},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify sites with read coverage — filter_by_coverage","text":"bamfile Bam file name gr GRanges, file name BED file, containing site examine min_counts minimum reads counts require param ScanBamParam object specifying reads filtered. supplied default behavior ignore exclude alignments marked secondary, duplicate, supplementary, QC-fail. verbose TRUE, print messages ... Additional arguments supply GenomicAlignments::coverage()","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_by_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify sites with read coverage — filter_by_coverage","text":"","code":"library(rtracklayer) bam_fn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") sites <- GRanges(rep(\"SSR3\", 101),                  IRanges(100:200, width = 1)) filter_by_coverage(bam_fn, sites, min_counts = 24) #> GRanges object with 18 ranges and 1 metadata column: #>        seqnames    ranges strand |     score #>           <Rle> <IRanges>  <Rle> | <integer> #>    [1]     SSR3       107      * |        24 #>    [2]     SSR3       108      * |        24 #>    [3]     SSR3       109      * |        24 #>    [4]     SSR3       110      * |        24 #>    [5]     SSR3       111      * |        24 #>    ...      ...       ...    ... .       ... #>   [14]     SSR3       120      * |        25 #>   [15]     SSR3       121      * |        25 #>   [16]     SSR3       122      * |        25 #>   [17]     SSR3       123      * |        25 #>   [18]     SSR3       124      * |        24 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/filter_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove multiallelic sites — remove_multiallelic","title":"Remove multiallelic sites — remove_multiallelic","text":"Sites multiple variant bases removed SummarizedExperiment. rowData() updated include new column, \"Var\", containing variant allele detected site. function remove editing sites found regions proximal annotated splice junctions. Sequence variants multiple allele types (e.g. ->G, C->T) nearby regions can due misalignments. function remove variants multiple allele types present within given distance genomic coordinate space transcriptome coordinate space.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove multiallelic sites — remove_multiallelic","text":"","code":"remove_multiallelic(se)  remove_splice_variants(se, txdb, splice_site_dist = 4, ignore.strand = FALSE)  remove_clustered_variants(   se,   txdb,   regions = c(\"transcript\", \"genome\"),   variant_dist = 100 )"},{"path":"https://rnabioco.github.io/raer/reference/filter_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove multiallelic sites — remove_multiallelic","text":"se SummarizedExperiment containing editing sites txdb TxDb object splice_site_dist distance splice site ignore.strand TRUE consider strand comparing editing sites splice sites regions One \"transcript\" /\"genome\", coordinate space use examine distances variants. variant_dist distance nucleotides determining clustered variants","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove multiallelic sites — remove_multiallelic","text":"SummarizedExperiment sites removed object dependent filtering applied.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove multiallelic sites — remove_multiallelic","text":"","code":"example(create_se, echo = FALSE) remove_multiallelic(se) #> class: RangedSummarizedExperiment  #> dim: 72 6  #> metadata(0): #> assays(7): Var nRef ... nC nG #> rownames(72): SSR3_102_2 SSR3_125_2 ... DHFR_430_2 DHFR_513_2 #> rowData names(2): Ref Var #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(2): sample condition  if(require(TxDb.Hsapiens.UCSC.hg38.knownGene)){   library(SummarizedExperiment)   nrows <- 5; ncols <- 6   counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)   rowRanges <- GRanges(rep(\"chr1\", 5),                     IRanges(c(12055, 12174, 12194, 12719, 12889), width=1),                     strand=rep(\"+\", 5))   colData <- DataFrame(Treatment=rep(c(\"adar_wt\", \"adar_ko\"), 3),                        row.names=LETTERS[1:6])   rse <- SummarizedExperiment(assays=SimpleList(counts=counts),                            rowRanges=rowRanges, colData=colData)    se <- remove_splice_variants(rse, TxDb.Hsapiens.UCSC.hg38.knownGene)   se } #> Loading required package: TxDb.Hsapiens.UCSC.hg38.knownGene #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> class: RangedSummarizedExperiment  #> dim: 2 6  #> metadata(0): #> assays(1): counts #> rownames: NULL #> rowData names(0): #> colnames(6): A B ... E F #> colData names(1): Treatment if(require(TxDb.Hsapiens.UCSC.hg38.knownGene)){   library(SummarizedExperiment)   nrows <- 5; ncols <- 6   counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)   rowRanges <- GRanges(rep(\"chr1\", 5),                     IRanges(c(12055, 12174, 12194, 12719, 12889), width=1),                     strand=rep(\"+\", 5))   mcols(rowRanges)$Var <- c(\"AG\", \"AT\", \"AC\", \"TC\", \"GC\")   colData <- DataFrame(Treatment=rep(c(\"adar_wt\", \"adar_ko\"), 3),                        row.names=LETTERS[1:6])   rse <- SummarizedExperiment(assays=SimpleList(counts=counts),                            rowRanges=rowRanges, colData=colData)    se <- remove_clustered_variants(rse, TxDb.Hsapiens.UCSC.hg38.knownGene)   se } #> class: RangedSummarizedExperiment  #> dim: 0 6  #> metadata(0): #> assays(1): counts #> rownames: NULL #> rowData names(1): Var #> colnames(6): A B ... E F #> colData names(1): Treatment"},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"Copy VariantTools::extractCoverageForPositions Authors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman","code":""},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"","code":"getCoverageAtPositions(cov, pos)"},{"path":"https://rnabioco.github.io/raer/reference/getCoverageAtPositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy of VariantTools::extractCoverageForPositions\nAuthors: Michael Lawrence, Jeremiah Degenhardt, Robert Gentleman — getCoverageAtPositions","text":"cov coverage produced GenomicAlignments::coverage() pos GRanges containing editing sites","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SNPs overlapping intervals — get_overlapping_snps","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"function find SNPs overlapping supplied intervals using SNPlocs package. SNPs can returned memory (GPos objects) written disk bed-file (optionally compressed).","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"get_overlapping_snps(gr, snpDb, output_file = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"gr Intervals query snpDb reference ot SNPlocs database output_file path output file. supplied file can optionally compressed including \".gz\" suffix. supplied, SNPS returned GenomicRanges::GPos object","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"GPos object containing SNPs overlapping supplied genomic intervals","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {   gr <- GRanges(rep(\"22\", 10),     IRanges(seq(10510077, 10610077, by = 1000)[1:10], width = 250),     strand = \"+\")   get_overlapping_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> UnstitchedGPos object with 1 position and 0 metadata columns: #>       seqnames       pos strand #>          <Rle> <integer>  <Rle> #>   [1]       22  10511116      * #>   ------- #>   seqinfo: 25 sequences (1 circular) from GRCh38.p2 genome"},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate base counts using pileup — get_pileup","title":"Generate base counts using pileup — get_pileup","text":"Generate base counts using pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate base counts using pileup — get_pileup","text":"","code":"get_pileup(   bamfiles,   fafile,   bedfile = NULL,   region = NULL,   chroms = NULL,   filterParam = FilterParam(),   outfile_prefix = NULL,   bedidx = NULL,   bam_flags = NULL,   reads = NULL,   return_data = TRUE,   BPPARAM = SerialParam(),   use_index = FALSE,   bad_reads = NULL,   verbose = FALSE )  FilterParam(   max_depth = 10000,   min_base_quality = 20L,   min_mapq = 0L,   min_nucleotide_depth = 1L,   library_type = \"fr-first-strand\",   only_keep_variants = FALSE,   trim_5p = 0L,   trim_3p = 0L,   indel_dist = 0L,   splice_dist = 0L,   homopolymer_len = 0L,   max_mismatch_type = c(0L, 0L),   min_read_bqual = c(0, 0),   ignore_query_Ns = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate base counts using pileup — get_pileup","text":"bamfiles paths 1 bam files fafile path fasta file bedfile path bed file sites regions query region samtools region query string (.e. chr1:100-1000) chroms chromosomes process, used region filterParam object class FilterParam() specify various filters apply reads sites pileup. outfile_prefix Output prefix tabix indexed files. NULL, files produced. bedidx BedFile object, supplied, pileup use index generated indexBed() bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() generate reads supplied fasta file written reads pass filters contain variants return_data TRUE, data returned GRanges, FALSE character vector tabix-index files, specified outfile_prefix, returned. BPPARAM BiocParallel class control parallel execution. Parallel processing occurs per chromosome, disabled run single region. use_index TRUE regions supplied bedfile queried using bam file index. default (FALSE) alignments queried via streaming regions bedfile used select sites keep. Using index can much faster querying small number sites large bamfiles. many sites bedfile , small bamfiles, option may slower streaming. bad_reads textfile containing read names exclude pileup. Readnames formated readid_1 readid_2 readid paired end first read paired-end second read single end data. verbose TRUE, report progress. max_depth maximum read depth considered site min_base_quality min base quality score consider read pileup min_mapq minimum required MAPQ score, can vector values bam file min_nucleotide_depth min read depth needed report site library_type read orientation, one fr-first-strand, fr-second-strand, unstranded, genomic-unstranded. Can supply vector specify input bam. Unstranded library type reported based read alignment. genomic-unstranded report variants w.r.t + strand. only_keep_variants TRUE, variant sites reported (FALSE default), can vector input bamfile trim_5p Bases trim 5' ends read alignments trim_3p Bases trim 3' ends read alignments indel_dist Exclude read site occurs within given distance indel event read splice_dist Exclude read site occurs within given distance splicing event read homopolymer_len Exclude site occurs within homopolymer given length max_mismatch_type Exclude read X different mismatch types (e.g --G, G--C, C--G, 3 mismatch types) Y # mismatches, must supplied integer vector length 2. e.g. c(X, Y). min_read_bqual Exclude read X percent bases base qualities less Y. Numeric vector length 2. e.g. c(0.25, 20) ignore_query_Ns ignored now","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate base counts using pileup — get_pileup","text":"list containing GRanges object input bam file, vector output tabixed file names return_data FALSE.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate base counts using pileup — get_pileup","text":"Multiple bam files can processed together, files written bam file. mode output regions consistent across files. min_mapq, only_keep_variants, library_type parameters can specified input files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate base counts using pileup — get_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") bam2fn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\")  plp <- get_pileup(bamfn, fafn) plps <- get_pileup(c(bamfn, bam2fn), fafn) fp <- FilterParam(only_keep_variants = TRUE,  min_nucleotide_depth = 55) get_pileup(bamfn, fafn, filterParam = fp) #> GRanges object with 7 ranges and 9 metadata columns: #>       seqnames    ranges strand |         Ref         Var      nRef #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>   [1]     DHFR       207      - |           G          GT        55 #>   [2]     DHFR       208      - |           T          TG        55 #>   [3]     DHFR       223      - |           G          GT        56 #>   [4]     DHFR       225      - |           T          TA        55 #>   [5]     DHFR       291      - |           A          AG        54 #>   [6]     DHFR       300      - |           A          AG        56 #>   [7]     DHFR       332      - |           A          AG        55 #>            nVar        nA        nT        nC        nG        nN #>       <integer> <integer> <integer> <integer> <integer> <integer> #>   [1]         1         0         1         0        55         0 #>   [2]         1         0        55         0         1         0 #>   [3]         1         0         1         0        56         0 #>   [4]         1         1        55         0         0         0 #>   [5]         2        54         0         0         2         0 #>   [6]         1        56         0         0         1         0 #>   [7]         1        55         0         0         1         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regions surrounding splice sites — get_splice_sites","title":"Extract regions surrounding splice sites — get_splice_sites","text":"function return intervals containing splice sites adjacent regions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"get_splice_sites(txdb, slop = 4)"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regions surrounding splice sites — get_splice_sites","text":"txdb TxDb object slop number bases upstream downstream splice site extract","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regions surrounding splice sites — get_splice_sites","text":"GenomicRanges object containing positions splice sites, flanking bases.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"if(require(TxDb.Hsapiens.UCSC.hg38.knownGene)){   txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene   res <- get_splice_sites(txdb)   res[1:5] } #> GRanges object with 5 ranges and 0 metadata columns: #>       seqnames      ranges strand #>          <Rle>   <IRanges>  <Rle> #>   [1]     chr1 12054-12061      + #>   [2]     chr1 12173-12182      + #>   [3]     chr1 12224-12231      + #>   [4]     chr1 12224-12231      + #>   [5]     chr1 12607-12616      + #>   ------- #>   seqinfo: 640 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"A reference class for generating and storing index of BedFile — BedFile-class","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"Class store information bedfile used indicating regions pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"","code":"indexBed(file, ...)  # S4 method for character indexBed(file)  # S3 method for BedFile close(con, ...)"},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"file path bed file ... present consistency con BedFile class","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"Return object class BedFile contains pointer bed file index.","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":".extptr externalptr c-level samtools bedindex path filepath bed file open logical indicating index open","code":""},{"path":"https://rnabioco.github.io/raer/reference/index_bed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"","code":"bed_fn <- system.file(\"extdata\", \"regions.bed\", package = \"raer\") indexBed(bed_fn) #> Reference class object of class \"BedFile\" #> Field \".extptr\": #> Object of class 'externalptr': #>   x address: 0x563f768e5b08 #>   R_ExternalPtrAddr(x): 0x563f6418a400 #>   R_ExternalPtrTag(x): 0x563f3f171390 #>   typeof(R_ExternalPtrTag(x)): NULL #>   R_ExternalPtrProtected(x): 0x563fe15244e8 #>   typeof(R_ExternalPtrProtected(x)): character #> Field \"path\": #> [1] \"/__w/_temp/Library/raer/extdata/regions.bed\" #> Field \"open\": #> [1] TRUE bed_fn <- system.file(\"extdata\", \"regions.bed\", package = \"raer\") bed <- indexBed(bed_fn) close(bed)"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing — perform_de","title":"Perform differential editing — perform_de","text":"Uses either edgeR DESeq2 perform differential editing analysis. work simple designs 1 treatment 1 control. complex designs, suggest perform . moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing — perform_de","text":"","code":"perform_de(   deobj,   type = \"edgeR\",   sample_col = \"sample\",   condition_col = \"condition\",   condition_control = NULL,   condition_treatment = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing — perform_de","text":"deobj SummarizedExperiment object prepared de prep_for_de type OPTIONAL edgeR DESeq run. Default edgeR sample_col OPTIONAL name column colData(deobj) contains sample information. Default sample. column named \"sample\", must provide appropriate sample column condition_col OPTIONAL name column colData(deobj) contains treatment information. Default condition, column named \"condition\", must provide appropriate condition column condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential editing — perform_de","text":"named list - de_obj: edgeR deseq object used differential editing analysis - results_full: Unfiltered differenital editing results - sig_results: Filtered differenial editing (FDR < 0.05) - model_matrix: model matrix used generating DE results","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential editing — perform_de","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) dse <- prep_for_de(se) res <- perform_de(dse, condition_control = \"WT\", condition_treatment = \"KO\") #> Using classic mode. res$sig_results[1:5, ] #>                 logFC   logCPM        LR       PValue         FDR #> DHFR_361_2 -11.147610 21.96719 13.393676 0.0002524741 0.006816801 #> SSR3_176_2  -8.000087 21.19460 11.166011 0.0008330957 0.011246792 #> SSR3_364_2  -5.600787 19.69710  9.086110 0.0025755817 0.016444635 #> DHFR_260_2  -8.108926 22.26785  8.548454 0.0034581581 0.016444635 #> SSR3_290_2  -4.839287 20.65403  8.454728 0.0036409569 0.016444635"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Make summarized experiment object for DE — prep_for_de","title":"Make summarized experiment object for DE — prep_for_de","text":"Generates SummarizedExperiment object use edgeR DESeq2 generate counts assay matrix formated 2 columns per sample","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"prep_for_de(   se,   type = \"AI\",   edit_from = NULL,   edit_to = NULL,   min_prop = 0.1,   max_prop = 0.9,   min_samples = 3 )"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make summarized experiment object for DE — prep_for_de","text":"se SummarizedExperiment object type OPTIONAL type editing event add. Currently, supported (\"AI\") default, custom can added setting \"none\". edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set. min_prop OPTIONAL min proporation reads edited site. least min_samples need pass keep site. Default 0.1. max_prop OPTIONAL max proporation reads edited site. least min_samples need pass keep site. Default 0.9. min_samples OPTIONAL minimum number samples passing cutoffs keep site. Default 3.","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make summarized experiment object for DE — prep_for_de","text":"","code":"example(create_se, echo = FALSE) se <- calc_edit_frequency(se) dse <- prep_for_de(se) assay(dse, \"counts\") #>             KO1_ref KO2_ref KO3_ref WT1_ref WT2_ref WT3_ref KO1_alt #> SSR3_176_2       16      16      16       8       8       8       0 #> SSR3_201_2       14      14      14      19      19      19       0 #> SSR3_207_2       14      14      14      14      14      14       0 #> SSR3_257_2       19      19      19      11      11      11       0 #> SSR3_258_2       10      10      10       9       9       9       8 #> SSR3_266_2       17      17      17      12      12      12       0 #> SSR3_279_2       17      17      17       6       6       6       0 #> SSR3_290_2       14      14      14       3       3       3       1 #> SSR3_360_2        6       6       6       3       3       3       0 #> SSR3_364_2        3       3       3       2       2       2       0 #> SSR3_367_2        0       0       0       0       0       0       0 #> SSR3_388_2        0       0       0       0       0       0       0 #> SSR3_502_2        5       5       5       4       4       4       0 #> SPCS3_241_1       2       2       2       3       3       3       0 #> SPCS3_330_1       0       0       0       1       1       1       0 #> SPCS3_338_1       0       0       0       2       2       2       0 #> SPCS3_347_1       4       4       4       5       5       5       0 #> SPCS3_348_1       0       0       0       0       0       0       0 #> DHFR_260_2       60      60      60      21      21      21       0 #> DHFR_263_2       58      58      58      27      27      27       0 #> DHFR_291_2       54      54      54      30      30      30       2 #> DHFR_292_2       53      53      53      26      26      26       0 #> DHFR_309_2       56      56      56      29      29      29       0 #> DHFR_328_2       51      51      51      31      31      31       0 #> DHFR_354_2       47      47      47      28      28      28       0 #> DHFR_355_2       51      51      51      28      28      28       0 #> DHFR_361_2       43      43      43       4       4       4       0 #>             KO2_alt KO3_alt WT1_alt WT2_alt WT3_alt #> SSR3_176_2        0       0      16      16      16 #> SSR3_201_2        0       0       3       3       3 #> SSR3_207_2        0       0       4       4       4 #> SSR3_257_2        0       0       4       4       4 #> SSR3_258_2        8       8       6       6       6 #> SSR3_266_2        0       0       5       5       5 #> SSR3_279_2        0       0       4       4       4 #> SSR3_290_2        1       1       7       7       7 #> SSR3_360_2        0       0       3       3       3 #> SSR3_364_2        0       0       4       4       4 #> SSR3_367_2        0       0       1       1       1 #> SSR3_388_2        0       0       0       0       0 #> SSR3_502_2        0       0       0       0       0 #> SPCS3_241_1       0       0       1       1       1 #> SPCS3_330_1       0       0       2       2       2 #> SPCS3_338_1       0       0       1       1       1 #> SPCS3_347_1       0       0       0       0       0 #> SPCS3_348_1       0       0       0       0       0 #> DHFR_260_2        0       0      12      12      12 #> DHFR_263_2        0       0       6       6       6 #> DHFR_291_2        2       2       4       4       4 #> DHFR_292_2        0       0      10      10      10 #> DHFR_309_2        0       0       8       8       8 #> DHFR_328_2        0       0       4       4       4 #> DHFR_354_2        0       0       4       4       4 #> DHFR_355_2        0       0       6       6       6 #> DHFR_361_2        0       0      27      27      27 dse #> class: SummarizedExperiment  #> dim: 27 12  #> metadata(0): #> assays(1): counts #> rownames(27): SSR3_176_2 SSR3_201_2 ... DHFR_355_2 DHFR_361_2 #> rowData names(0): #> colnames(12): KO1_ref KO2_ref ... WT2_alt WT3_alt #> colData names(5): sample condition n_sites edit_idx count"},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":null,"dir":"Reference","previous_headings":"","what":"raer: RNA editing tools in R — raer","title":"raer: RNA editing tools in R — raer","text":"Toolkit identification statistical testing RNA editing signals within R. Provides support identifying sites bulk-RNA-seq, single cell RNA-seq datasets, general methods extraction allelic read counts alignment files.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raer: RNA editing tools in R — raer","text":"Maintainer: Kent Riemondy kent.riemondy@gmail.com (ORCID) Authors: Kristen Wells-Wrasman kristen.wells-wrasman@cuanschutz.edu (ORCID) contributors: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) [contributor] Jay Hesselberth jay.hesselberth@gmail.com (ORCID) [contributor] RNA Bioscience Initiative [copyright holder, funder]","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide working directory for raer example files. — raer_example","title":"Provide working directory for raer example files. — raer_example","text":"Provide working directory raer example files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(path)"},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide working directory for raer example files. — raer_example","text":"path path file","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(\"human.fasta\") #> [1] \"/__w/_temp/Library/raer/extdata/human.fasta\""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pileup, indexed by tabix — read_pileup","title":"Read pileup, indexed by tabix — read_pileup","text":"Read pileup, indexed tabix","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"read_pileup(tbx_fn, region = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pileup, indexed by tabix — read_pileup","text":"tbx_fn filename region region read file, samtools style region specifiers supported.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") plp_fn <- tempfile() plp <- get_pileup(bamfn, fafn, return_data = FALSE, outfile_prefix = plp_fn) read_pileup(plp) #> GRanges object with 1666 ranges and 9 metadata columns: #>          seqnames    ranges strand |         Ref         Var      nRef #>             <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>      [1]     SSR3         1      - |           C           -        13 #>      [2]     SSR3         2      - |           A           -        14 #>      [3]     SSR3         3      - |           A           -        14 #>      [4]     SSR3         4      - |           A           -        15 #>      [5]     SSR3         5      - |           G           -        15 #>      ...      ...       ...    ... .         ...         ...       ... #>   [1662]     DHFR       514      - |           T           -        33 #>   [1663]     DHFR       515      - |           A           -        36 #>   [1664]     DHFR       516      - |           A           -        33 #>   [1665]     DHFR       517      - |           A           -        35 #>   [1666]     DHFR       518      - |           G           -        34 #>               nVar        nA        nT        nC        nG        nN #>          <integer> <integer> <integer> <integer> <integer> <integer> #>      [1]         0         0         0        13         0         0 #>      [2]         0        14         0         0         0         0 #>      [3]         0        14         0         0         0         0 #>      [4]         0        15         0         0         0         0 #>      [5]         0         0         0         0        15         0 #>      ...       ...       ...       ...       ...       ...       ... #>   [1662]         0         0        33         0         0         0 #>   [1663]         0        36         0         0         0         0 #>   [1664]         0        33         0         0         0         0 #>   [1665]         0        35         0         0         0         0 #>   [1666]         0         0         0         0        34         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths unlink(c(plp, plp_fn, paste0(plp, \".tbi\")))"},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in tabix indexed file as a data.frame — read_tabix","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"Read tabix indexed file data.frame List chromosomes tabix index","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"","code":"read_tabix(   filename,   region = \".\",   numeric_cols = c(2, 6:12),   col_names = PILEUP_COLS )  get_tabix_chroms(filename)"},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"filename path indexed tabix file region samtools region query string (.e. chr1:100-1000) numeric_cols columns convert numeric integer vector (one-based index) col_names column names output data.frame","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_tabix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in tabix indexed file as a data.frame — read_tabix","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") plp_fn <- tempfile() plp <- get_pileup(bamfn, fafn, return_data = FALSE, outfile_prefix = plp_fn)  head(read_tabix(plp)) #>   seqnames pos strand Ref Var nRef nVar nA nT nC nG nN #> 1     SSR3   1      -   C   -   13    0  0  0 13  0  0 #> 2     SSR3   2      -   A   -   14    0 14  0  0  0  0 #> 3     SSR3   3      -   A   -   14    0 14  0  0  0  0 #> 4     SSR3   4      -   A   -   15    0 15  0  0  0  0 #> 5     SSR3   5      -   G   -   15    0  0  0  0 15  0 #> 6     SSR3   6      -   T   -   15    0  0 15  0  0  0  read_tabix(plp, region = \"SPCS3:498-500\") #>   seqnames pos strand Ref Var nRef nVar nA nT nC nG nN #> 1    SPCS3 498      +   A   -    5    0  5  0  0  0  0 #> 2    SPCS3 499      +   C   -    4    0  0  0  4  0  0 #> 3    SPCS3 500      +   C   -    4    0  0  0  4  0  0  get_tabix_chroms(plp) #> [1] \"SSR3\"  \"SPCS3\" \"DHFR\"   unlink(c(plp, plp_fn, paste0(plp, \".tbi\")))"},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate editing frequencies per cell or per cluster — sc_editing","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"Calculate editing frequencies per cell per cluster","code":""},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"","code":"sc_editing(   bamfile,   fafile,   bedfile,   cell_barcodes,   assay_cols = c(\"nA\", \"nG\"),   tag_index_args = list(tag = \"CB\"),   BPPARAM = SerialParam(),   batch_size = 50,   verbose = TRUE,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"bamfile BAM file name fafile FASTA file name bedfile BED file containing editing sites cell_barcodes list character vectors containing cell barcodes query single character vector single cells process. list supplied assumed alignments cell barcodes list element pooled. single character vector, assumed cell barcode processed independently. See examples specification. assay_cols assays store returned se. Set \"\" \"G\". Note storing multiple assays can require large amounts memory. tag_index_args arguments pass build_tag_index() BPPARAM BiocParallel instance. Parallel computation occurs across entry cell_barcodes list, across batches single cells specified batch_size. batch_size processing single cells, batch_size controls many individual cell bams process invocation get_pileup(). Batching cells reduces run time avoiding  loading sequences fasta file cell. Setting values 50 unlikely improve runtime. verbose Display messages ... additional arguments passed [get_pileup()].","code":""},{"path":"https://rnabioco.github.io/raer/reference/sc_editing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate editing frequencies per cell or per cluster — sc_editing","text":"","code":"suppressPackageStartupMessages(library(SummarizedExperiment))  # get vector of cell barcodes in bam file (for use in this example) # usually these would come from the single cell analysis  bamfn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") idxfn <- build_tag_index(bamfn) cbs <- show_tag_index(bamfn)$tag cbs[1:5] #> [1] \"AAACCCAGTCACTTAG-1\" \"AAACGAACAACTGAAA-1\" \"AAACGAAGTGAATATG-1\" #> [4] \"AAACGCTAGACTTGTC-1\" \"AAACGCTGTGGATTTC-1\"  # process each cell individually # will be slow with many sites and cells # bam file will be indexed by build_tag_index() if not already done. fp <- FilterParam(library_type = \"fr-second-strand\") se <- sc_editing(bamfile = bamfn,   fafile = raer_example(\"mouse_tiny.fasta\"),   bedfile = raer_example(\"5k_neuron_sites.bed.gz\"),   cell_barcodes = cbs[1:15],   verbose = FALSE,   filterParam = fp)  # pool cell barcodes across clusters # pass a named list, with each list entry corresponding to a vector # of cell barcodes from a cluster  # simulate 5 clusters cb_lst <- split(cbs, cut(seq_along(cbs), breaks = 5)) names(cb_lst) <- paste0(\"cluster\", 1:5)  se <- sc_editing(bamfile = bamfn,   fafile = raer_example(\"mouse_tiny.fasta\"),   bedfile = raer_example(\"5k_neuron_sites.bed.gz\"),   cell_barcodes = cb_lst,   verbose = FALSE,   filterParam = fp) assays(se)$nA #> 17 x 5 sparse Matrix of class \"dgCMatrix\" #>          cluster1 cluster2 cluster3 cluster4 cluster5 #> 2_548_2         1        2        1        3        2 #> 2_576_2        60       58       56       55       63 #> 2_591_2        94       92       99       96      105 #> 2_593_2        99       95      105      104      108 #> 2_609_2       161      152      162      168      159 #> 6_271_2         6        9        7        5       10 #> 6_331_2        34       40       34       34       54 #> 6_352_2        32       34       30       29       49 #> 6_361_2        23       26       25       24       39 #> 6_383_2        15       22       15       18       26 #> 6_393_2        13       15        8       10       12 #> 11_366_2        .        .        .        .        . #> 11_367_2        .        .        .        .        . #> 2_754_2         .        .        1        .        2 #> 2_755_2         .        .        1        .        2 #> 2_756_2         .        .        1        .        2 #> 2_792_2         .        .        .        .        2 assays(se)$nG #> 17 x 5 sparse Matrix of class \"dgCMatrix\" #>          cluster1 cluster2 cluster3 cluster4 cluster5 #> 2_548_2         .        .        1        .        . #> 2_576_2         1        .        .        1        . #> 2_591_2         .        1        1        1        . #> 2_593_2         .        1        .        .        . #> 2_609_2         1        .        .        .        . #> 6_271_2         .        1        .        .        . #> 6_331_2         1        1        .        .        . #> 6_352_2         .        .        .        2        . #> 6_361_2         4        2        .        2        2 #> 6_383_2         1        .        .        .        . #> 6_393_2         1        .        .        .        . #> 11_366_2        .        1        .        .        . #> 11_367_2        .        1        .        .        . #> 2_754_2         .        .        .        .        1 #> 2_755_2         .        .        .        .        1 #> 2_756_2         .        .        .        .        1 #> 2_792_2         .        .        1        .        1"},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Build index for tag sorted bam file — build_tag_index","title":"Build index for tag sorted bam file — build_tag_index","text":"Build index tag sorted bam file Show tags stored tag index Subset bam file contain certain tags (e.g. cell barcodes)","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build index for tag sorted bam file — build_tag_index","text":"","code":"build_tag_index(   bamfile,   tag = \"CB\",   n_records_to_check = 1e+06,   overwrite = TRUE )  show_tag_index(bamfile)  get_tag_bam(bamfile, barcodes, outbam = NULL, pos_sort_output = TRUE, ...)"},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build index for tag sorted bam file — build_tag_index","text":"bamfile input tag indexed bam file tag name tag bamfile used sorting. tag must type \"Z\". n_records_to_check number bam records query validate tag present correct type. Set 0 disable checks. overwrite TRUE, regenerate index already exists barcodes character vector tag values extract outbam optional output bam file name, supplied temporary file used pos_sort_output TRUE, sort output bamfile position generate samtools style index ... Additional arguments passed Rsamtools::sortBam()","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build index for tag sorted bam file — build_tag_index","text":"name index generated, bam file + \".bri\" Character vector tags Returns name output bam file. output bam file positionally sorted positionally indexed using Rsamtools.","code":""},{"path":"https://rnabioco.github.io/raer/reference/tag_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build index for tag sorted bam file — build_tag_index","text":"","code":"bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\"  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_ubsort.bam\") build_tag_index(bam_fn, tag = \"UB\") #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_ubsort.bam.bri\"  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\" show_tag_index(bam_fn) #>                     tag n #> 1    AAACCCAGTCACTTAG-1 1 #> 2    AAACGAACAACTGAAA-1 1 #> 3    AAACGAAGTGAATATG-1 1 #> 4    AAACGCTAGACTTGTC-1 1 #> 5    AAACGCTGTGGATTTC-1 1 #> 6    AAAGAACCACAAGGTG-1 1 #> 7    AAAGAACCATGTGGCC-1 1 #> 8    AAAGAACGTGCGTGCT-1 1 #> 9    AAAGGGCCACGCTGAC-1 2 #> 10   AAAGGGCTCCCGTGAG-1 1 #> 11   AAAGGTATCAGAGCGA-1 1 #> 12   AAAGGTATCGTTAGTG-1 1 #> 13   AAAGTCCAGATGTTCC-1 1 #> 14   AAAGTCCCACAAGGTG-1 1 #> 15   AAAGTCCCATCCGTGG-1 1 #> 16   AAAGTGAAGGAAACGA-1 1 #> 17   AAAGTGATCACTTCTA-1 2 #> 18   AAATGGACAGTGTACT-1 1 #> 19   AAATGGATCCTCTTTC-1 1 #> 20   AAATGGATCGTAACCA-1 1 #> 21   AACAAAGAGAATCGCG-1 1 #> 22   AACAACCTCCCTGTTG-1 1 #> 23   AACAAGAAGGGCAACT-1 1 #> 24   AACAAGACAACGGGTA-1 1 #> 25   AACAGGGAGTAGGTTA-1 1 #> 26   AACCAACCACTGAATC-1 1 #> 27   AACCAACCACTGCAAT-1 1 #> 28   AACCACAAGTGGAATT-1 1 #> 29   AACCACACAGAGATTA-1 1 #> 30   AACCATGCAGAGATTA-1 1 #> 31   AACCATGGTGACTGAG-1 1 #> 32   AACCATGTCTGAGAGG-1 1 #> 33   AACCCAAAGAAACCAT-1 1 #> 34   AACGAAAAGCCTGGAA-1 1 #> 35   AACGGGAAGAAACTGT-1 1 #> 36   AACGGGAAGCGCAATG-1 1 #> 37   AACGGGATCGGCGATC-1 1 #> 38   AACGTCAAGCCTGTCG-1 1 #> 39   AACGTCACATTAGGAA-1 1 #> 40   AACGTCATCATGCGGC-1 1 #> 41   AAGACAAAGGTAAGAG-1 1 #> 42   AAGACTCCAGGTCCCA-1 2 #> 43   AAGATAGAGGACATCG-1 2 #> 44   AAGCCATTCCCTCTAG-1 1 #> 45   AAGCGAGCAAATGCTC-1 1 #> 46   AAGCGAGGTTATAGAG-1 1 #> 47   AAGCGTTCAGGACATG-1 1 #> 48   AAGCGTTGTCCTATAG-1 1 #> 49   AAGCGTTTCTAGACAC-1 1 #> 50   AAGGTAACAGGTCCGT-1 1 #> 51   AAGGTAAGTGAGTTGG-1 1 #> 52   AAGTACCCACCGGCTA-1 1 #> 53   AAGTTCGAGGAATGTT-1 1 #> 54   AAGTTCGAGTATTGCC-1 1 #> 55   AATAGAGTCATTACGG-1 1 #> 56   AATCGACTCGGCCCAA-1 1 #> 57   AATCGTGCACTGAGTT-1 2 #> 58   AATGAAGTCGCAGTTA-1 1 #> 59   AATGGAAAGTGGTTAA-1 1 #> 60   AATGGCTAGTAGCATA-1 1 #> 61   AATGGCTTCTCCGAGG-1 1 #> 62   AATTCCTCATCCGCGA-1 1 #> 63   AATTTCCAGATGTAGT-1 1 #> 64   ACAAAGAGTAAGTAGT-1 1 #> 65   ACAAAGAGTCCACGCA-1 1 #> 66   ACACAGTAGCGCCTTG-1 1 #> 67   ACACAGTGTGCTATTG-1 1 #> 68   ACACCAAAGGCACAAC-1 1 #> 69   ACACCAACAGTGCGCT-1 1 #> 70   ACACCAAGTTGGCTAT-1 1 #> 71   ACACCAAGTTTGTGGT-1 2 #> 72   ACACCAATCAGCCTCT-1 1 #> 73   ACACGCGCATGGGAAC-1 1 #> 74   ACACGCGGTCCTTAAG-1 1 #> 75   ACAGAAATCCAAGGGA-1 1 #> 76   ACAGGGAAGCAAATCA-1 1 #> 77   ACATCCCCACTAACCA-1 2 #> 78   ACATCGACAACACTAC-1 2 #> 79   ACATCGACACAAGCAG-1 1 #> 80   ACATGCACAACAAAGT-1 1 #> 81   ACATTTCTCAGGAAAT-1 1 #> 82   ACCAAACAGCTGAGTG-1 1 #> 83   ACCAAACAGTTAGAAC-1 3 #> 84   ACCAACACAAGAAACT-1 1 #> 85   ACCATTTAGAAGCCAC-1 1 #> 86   ACCATTTAGCTAATCC-1 1 #> 87   ACCCTCAGTGTACGCC-1 1 #> 88   ACCGTTCAGTCGAAGC-1 1 #> 89   ACCGTTCTCGAACGCC-1 1 #> 90   ACCTACCAGCGAATGC-1 1 #> 91   ACCTACCGTTTGCAGT-1 2 #> 92   ACCTGAAAGCAGCCTC-1 1 #> 93   ACCTGAAGTCGAGTTT-1 1 #> 94   ACCTGAAGTTCCGTTC-1 1 #> 95   ACCTGAATCTCATTAC-1 1 #> 96   ACCTGTCCAGCTACTA-1 1 #> 97   ACCTGTCCATCTTAGG-1 1 #> 98   ACGATCACAACAAGTA-1 1 #> 99   ACGCACGGTCTGTGCG-1 1 #> 100  ACGGGTCAGCTGAGTG-1 2 #> 101  ACGGGTCCAGAGCTAG-1 1 #> 102  ACGGGTCCAGGCTACC-1 2 #> 103  ACGGGTCGTGGATTTC-1 1 #> 104  ACGGGTCTCTACGCGG-1 1 #> 105  ACGGTCGGTTCAAGTC-1 1 #> 106  ACGGTTAGTAAGCGGT-1 1 #> 107  ACGGTTAGTGGAGGTT-1 1 #> 108  ACGTAACTCCGATCGG-1 2 #> 109  ACGTACAGTCAGGTAG-1 1 #> 110  ACGTAGTAGCCATTCA-1 2 #> 111  ACTACGACAGTTAGAA-1 2 #> 112  ACTATCTCACTGGACC-1 1 #> 113  ACTCCCAAGTTACGGG-1 2 #> 114  ACTCCCAGTACTCCGG-1 2 #> 115  ACTGATGAGTAAACGT-1 1 #> 116  ACTGATGAGTAACGAT-1 1 #> 117  ACTGATGAGTGGTTCT-1 2 #> 118  ACTGATGCAAGCGGAT-1 1 #> 119  ACTGATGTCCCAACTC-1 1 #> 120  ACTGCAAAGCTCTTCC-1 2 #> 121  ACTGCAAGTGCATCTA-1 1 #> 122  ACTGTCCGTGAGTAAT-1 1 #> 123  ACTGTCCTCCAACTGA-1 1 #> 124  ACTGTGAAGGCCCACT-1 1 #> 125  ACTGTGAAGTTCCGGC-1 1 #> 126  ACTGTGATCAAATGAG-1 1 #> 127  ACTTAGGGTAGCCAGA-1 1 #> 128  ACTTATCCAGCCTATA-1 1 #> 129  ACTTCCGGTTTCGTGA-1 1 #> 130  ACTTCGCAGTAGCATA-1 1 #> 131  ACTTCGCCAGTACTAC-1 1 #> 132  ACTTTCAAGACTACGG-1 1 #> 133  ACTTTCAAGCTAGATA-1 1 #> 134  ACTTTCACAACTTCTT-1 2 #> 135  ACTTTCAGTCAGACTT-1 1 #> 136  ACTTTGTCAGCAGATG-1 1 #> 137  AGAAATGGTACGAAAT-1 1 #> 138  AGAACAATCCGTATGA-1 1 #> 139  AGAACCTGTACATACC-1 1 #> 140  AGAACCTTCCATAGAC-1 1 #> 141  AGAAGTACACAGCCTG-1 1 #> 142  AGACAAAAGTTATGGA-1 1 #> 143  AGACAAATCTCAATCT-1 1 #> 144  AGACACTAGCGTGTTT-1 1 #> 145  AGACACTCAACCAATC-1 1 #> 146  AGACACTGTATGACAA-1 1 #> 147  AGACACTGTGAATGAT-1 1 #> 148  AGACAGGAGAGTTGCG-1 1 #> 149  AGACAGGAGTATGCAA-1 2 #> 150  AGACAGGAGTGCAGCA-1 2 #> 151  AGACAGGCATGGCACC-1 1 #> 152  AGACAGGTCCTAGCCT-1 2 #> 153  AGACAGGTCTCTCAAT-1 1 #> 154  AGACCCGGTGAATTGA-1 2 #> 155  AGAGAGCCAACTCCAA-1 1 #> 156  AGAGCAGGTTCTTCAT-1 1 #> 157  AGAGCAGTCAAGCGTT-1 1 #> 158  AGAGCCCCAAACTAAG-1 1 #> 159  AGAGCCCCAGTTGTTG-1 1 #> 160  AGAGCCCGTCAGGTGA-1 1 #> 161  AGAGCCCGTTTACTGG-1 1 #> 162  AGAGCCCTCCACAAGT-1 1 #> 163  AGATCCACAAGAGTTA-1 1 #> 164  AGATCCATCAGTGGGA-1 2 #> 165  AGATCCATCTCGGCTT-1 1 #> 166  AGATCGTAGCTAAGTA-1 1 #> 167  AGATGAAAGAGCCATG-1 1 #> 168  AGATGCTGTTCTCGTC-1 1 #> 169  AGCATCATCCCTGTTG-1 1 #> 170  AGCATCATCGAAGGAC-1 1 #> 171  AGCCACGTCGCAGTCG-1 1 #> 172  AGCCAGCAGAATCCCT-1 1 #> 173  AGCCAGCAGGGAGAAT-1 1 #> 174  AGCGATTGTGGCTTGC-1 2 #> 175  AGCGATTTCAGAGTGG-1 1 #> 176  AGCGCCACATGGCTGC-1 1 #> 177  AGCGCTGAGCCTTTGA-1 1 #> 178  AGCGCTGGTGTCTCCT-1 1 #> 179  AGCGTATAGCGTTACT-1 3 #> 180  AGCGTCGGTTGCATGT-1 1 #> 181  AGCTACAAGAGAGGTA-1 1 #> 182  AGCTCAACACTTTAGG-1 2 #> 183  AGCTTCCAGCTATCCA-1 2 #> 184  AGCTTCCGTAGTGGCA-1 1 #> 185  AGCTTCCTCAACGCTA-1 2 #> 186  AGGAATACAGGCGTTC-1 1 #> 187  AGGAATATCCATCGTC-1 1 #> 188  AGGACGACAAATCGTC-1 1 #> 189  AGGACGACAACACAAA-1 1 #> 190  AGGACTTCAGTGGTGA-1 1 #> 191  AGGACTTGTGGATGAC-1 1 #> 192  AGGAGGTAGCGTTACT-1 1 #> 193  AGGAGGTGTTGGGCCT-1 1 #> 194  AGGATAATCTCAGAAC-1 4 #> 195  AGGCATTCAGGGATAC-1 1 #> 196  AGGCATTTCGCGTTTC-1 1 #> 197  AGGCCACGTCCTTGTC-1 1 #> 198  AGGCTGCAGGCTTCCG-1 1 #> 199  AGGCTGCCAGAATTCC-1 1 #> 200  AGGCTGCGTAAGCAAT-1 1 #> 201  AGGGAGTCAATAAGGT-1 1 #> 202  AGGGTCCCAATGTCAC-1 1 #> 203  AGGGTCCCAGCGGTTC-1 1 #> 204  AGGGTCCTCGATTGAC-1 1 #> 205  AGGGTGAAGACTCTAC-1 1 #> 206  AGGGTGACAGAGGTTG-1 1 #> 207  AGGGTTTTCCGTACGG-1 2 #> 208  AGGTAGGAGCTGACTT-1 2 #> 209  AGGTAGGAGGGTACAC-1 1 #> 210  AGGTAGGCAGAGAAAG-1 2 #> 211  AGGTAGGTCGTCAACA-1 1 #> 212  AGGTCTAGTAGGCAGT-1 1 #> 213  AGGTGTTCATCCGGTG-1 1 #> 214  AGGTGTTTCAAGCTGT-1 1 #> 215  AGGTTGTCAGACCAGA-1 2 #> 216  AGTAACCCAGCATCTA-1 1 #> 217  AGTAACCTCAACCCGG-1 1 #> 218  AGTACCAGTATCGTTG-1 1 #> 219  AGTACTGGTCCGATCG-1 1 #> 220  AGTAGTCCACACAGCC-1 1 #> 221  AGTAGTCCATCGATCA-1 1 #> 222  AGTCACATCCAGCAAT-1 1 #> 223  AGTCATGCAAGCTACT-1 1 #> 224  AGTCTCCCAACCCTCT-1 1 #> 225  AGTCTCCCAGAGTCTT-1 1 #> 226  AGTGACTAGACATCCT-1 2 #> 227  AGTGACTAGCATGAAT-1 2 #> 228  AGTGCCGGTAGGTTTC-1 1 #> 229  AGTGTTGAGCCTCACG-1 1 #> 230  AGTGTTGTCTGAGAGG-1 1 #> 231  AGTTAGCTCCCTTTGG-1 1 #> 232  AGTTAGCTCTGCTTAT-1 1 #> 233  AGTTCCCAGGTCGTGA-1 1 #> 234  AGTTCGACATCTCCCA-1 1 #> 235  AGTTCGATCAAAGAAC-1 1 #> 236  AGTTCGATCGCAGAGA-1 1 #> 237  ATACCGAGTACTTCCC-1 1 #> 238  ATACCGATCCCTCATG-1 1 #> 239  ATACCGATCTAGGCCG-1 1 #> 240  ATACCTTTCACCGCTT-1 1 #> 241  ATACCTTTCGCCAATA-1 1 #> 242  ATACTTCAGACCTGGA-1 2 #> 243  ATAGAGACAATCGCCG-1 1 #> 244  ATAGAGACATAACGGG-1 1 #> 245  ATAGGCTAGGACAGCT-1 1 #> 246  ATATCCTTCGTGGTAT-1 1 #> 247  ATCACAGCAGAGTGTG-1 1 #> 248  ATCACTTTCTCCCATG-1 1 #> 249  ATCAGGTTCACCTTGC-1 1 #> 250  ATCATTCAGTGCGTCC-1 1 #> 251  ATCCATTGTGGACCAA-1 1 #> 252  ATCCCTGAGTGATCGG-1 1 #> 253  ATCCGTCTCAAGGACG-1 1 #> 254  ATCCTATAGATGCTAA-1 1 #> 255  ATCCTATAGGAGGGTG-1 1 #> 256  ATCCTATGTCATCAGT-1 1 #> 257  ATCGCCTTCTATGTGG-1 1 #> 258  ATCGGCGCAACTCATG-1 1 #> 259  ATCGGCGTCAGTGATC-1 1 #> 260  ATCGTAGTCCTAAGTG-1 1 #> 261  ATCGTCCCAGATCATC-1 1 #> 262  ATCGTGAAGCCTAGGA-1 1 #> 263  ATCGTGAGTATACGGG-1 1 #> 264  ATCTCTAGTGTTGATC-1 1 #> 265  ATCTTCAGTCCAGCCA-1 2 #> 266  ATGACCACACGTACTA-1 1 #> 267  ATGACCAGTGCATACT-1 1 #> 268  ATGAGGGTCCTTACCG-1 1 #> 269  ATGCATGCATTGCTGA-1 1 #> 270  ATGCCTCCACAGCTTA-1 1 #> 271  ATGCCTCGTACCAGAG-1 1 #> 272  ATGCGATGTTTGGAAA-1 1 #> 273  ATGCGATTCAAGCCAT-1 1 #> 274  ATGGAGGCAACTCGAT-1 1 #> 275  ATGGAGGTCTACTCAT-1 1 #> 276  ATGGGAGGTGCACAAG-1 1 #> 277  ATGGGAGGTTCGGCGT-1 1 #> 278  ATGGGAGGTTGCGGCT-1 1 #> 279  ATGGGTTCACACGCCA-1 1 #> 280  ATGGGTTTCGCGGTAC-1 1 #> 281  ATGGTTGAGTCGAAAT-1 2 #> 282  ATGGTTGCAAATCGGG-1 1 #> 283  ATGGTTGCATCCGTGG-1 1 #> 284  ATGTCCCAGGGCTAAC-1 1 #> 285  ATGTCTTGTCTACGAT-1 1 #> 286  ATGTCTTTCATAGCAC-1 1 #> 287  ATTACCTAGTGGTTGG-1 1 #> 288  ATTACTCCACACCAGC-1 2 #> 289  ATTACTCCATGGGCAA-1 1 #> 290  ATTATCCAGTTCCGTA-1 1 #> 291  ATTCACTGTCCGTACG-1 1 #> 292  ATTCACTGTGCTCTTC-1 1 #> 293  ATTCAGGAGCTGTGCC-1 1 #> 294  ATTCATCCAGCTCTGG-1 1 #> 295  ATTCATCGTAGCTGTT-1 1 #> 296  ATTCATCGTAGGCTCC-1 1 #> 297  ATTCCATCAGGCATTT-1 1 #> 298  ATTCCATGTTTGCAGT-1 1 #> 299  ATTCCCGCATGACTTG-1 1 #> 300  ATTCCTAAGAGCATCG-1 1 #> 301  ATTCCTATCCATACTT-1 1 #> 302  ATTCGTTAGGCCTAAG-1 2 #> 303  ATTCGTTTCCGTCACT-1 1 #> 304  ATTGGGTCAGAGATGC-1 1 #> 305  ATTGGGTGTTTGGAGG-1 1 #> 306  ATTGTTCCACTATGTG-1 2 #> 307  ATTTACCGTCATAGTC-1 1 #> 308  CAACAACAGCTAAGTA-1 1 #> 309  CAACAACGTCGCACGT-1 1 #> 310  CAACAACTCATTCACT-1 1 #> 311  CAACAGTGTTAGGGAC-1 1 #> 312  CAACCAAGTGAGAGGG-1 2 #> 313  CAACCTCAGTCATGGG-1 1 #> 314  CAACCTCGTCATCCCT-1 1 #> 315  CAAGACTAGGTGCTTT-1 1 #> 316  CAAGAGGTCAGCTCTC-1 1 #> 317  CAAGCTAAGAGTTGTA-1 1 #> 318  CAAGGGATCACATTGG-1 1 #> 319  CAATCGATCTCTAGGA-1 1 #> 320  CAATGACAGATGAATC-1 1 #> 321  CAATTTCAGCCACTCG-1 1 #> 322  CAATTTCAGGCTTAGG-1 2 #> 323  CAATTTCCACGTCATA-1 1 #> 324  CAATTTCTCTGTTGGA-1 2 #> 325  CACAACATCGTTATCT-1 1 #> 326  CACACAAGTGTCATGT-1 1 #> 327  CACAGATGTGCTCTTC-1 1 #> 328  CACAGATGTGTGAGCA-1 1 #> 329  CACAGGCAGGGCAAGG-1 1 #> 330  CACATGAGTGTCATCA-1 1 #> 331  CACATGATCCTACACC-1 1 #> 332  CACCAAAGTACGAAAT-1 1 #> 333  CACCAAATCCACTGGG-1 2 #> 334  CACCAAATCCGCTGTT-1 1 #> 335  CACGAATCAAGTCGTT-1 2 #> 336  CACGAATCATGATAGA-1 2 #> 337  CACGAATGTCCTCCAT-1 1 #> 338  CACGAATGTCGAATTC-1 1 #> 339  CACGGGTCAATCGCAT-1 1 #> 340  CACGGGTGTTCATCTT-1 1 #> 341  CACTGGGGTAGCTAAA-1 1 #> 342  CACTGTCCAATACCTG-1 1 #> 343  CACTTCGTCGACCCAG-1 1 #> 344  CAGAGCCAGTCCGCGT-1 2 #> 345  CAGATCAAGCCATCCG-1 1 #> 346  CAGATTGTCGCTTTAT-1 1 #> 347  CAGCACGAGTGACACG-1 2 #> 348  CAGCACGTCGAGTGGA-1 1 #> 349  CAGCAGCAGCCTCAAT-1 1 #> 350  CAGCAGCGTGATACAA-1 1 #> 351  CAGCCAGAGAGGTATT-1 1 #> 352  CAGCCAGAGGGAGTTC-1 1 #> 353  CAGCGTGTCGGTATGT-1 1 #> 354  CAGGCCACAGAGATTA-1 1 #> 355  CAGGCCAGTGATTCTG-1 1 #> 356  CAGGGCTCAGGCACTC-1 1 #> 357  CAGGGCTGTTAGCGGA-1 1 #> 358  CAGGTATGTACCCAGC-1 1 #> 359  CAGTTAGCACACTGGC-1 1 #> 360  CATAAGCAGGTAACTA-1 1 #> 361  CATAAGCAGTGAGTTA-1 3 #> 362  CATAAGCGTTAAGGGC-1 1 #> 363  CATAAGCTCCTCACTG-1 2 #> 364  CATACAGAGCAGTACG-1 1 #> 365  CATACAGCATGCCATA-1 1 #> 366  CATACAGGTATCACGT-1 2 #> 367  CATACAGGTGTTACAC-1 1 #> 368  CATACAGTCAATGCAC-1 1 #> 369  CATACTTCAGACAAAT-1 1 #> 370  CATACTTGTCGCGTCA-1 1 #> 371  CATAGACAGTAGATCA-1 2 #> 372  CATCAAGCATCCGAAT-1 1 #> 373  CATCAAGGTATGCGGA-1 1 #> 374  CATCCACCAAGTATAG-1 1 #> 375  CATCCACTCAGACCTA-1 1 #> 376  CATCCACTCTCCCTAG-1 1 #> 377  CATCCCATCCTGTAAG-1 1 #> 378  CATCCGTTCGAATGCT-1 1 #> 379  CATCGCTCACCCTCTA-1 1 #> 380  CATCGGGAGAAGCGCT-1 1 #> 381  CATCGGGTCGTCGGGT-1 1 #> 382  CATCGGGTCTCGGTCT-1 1 #> 383  CATGAGTGTACGCTAT-1 1 #> 384  CATGAGTTCGGTAACT-1 1 #> 385  CATGCAAGTATCGCGC-1 1 #> 386  CATGCCTGTCCCTGTT-1 1 #> 387  CATGCCTTCGAACCAT-1 1 #> 388  CATGCGGCACAGTACT-1 1 #> 389  CATGCGGGTATGCGGA-1 1 #> 390  CATGCTCAGTCAGCCC-1 1 #> 391  CATGCTCCATTGTGCA-1 1 #> 392  CATGGATCAACAGAGC-1 1 #> 393  CATGGTACAGGGTCTC-1 1 #> 394  CATGGTACATATGGCT-1 1 #> 395  CATGGTACATGGAATA-1 1 #> 396  CATTCCGTCCAAGCAT-1 1 #> 397  CATTCTAGTATCGCGC-1 1 #> 398  CATTGCCCACTACGGC-1 1 #> 399  CATTGCCGTCCTACGG-1 1 #> 400  CATTGTTGTAGTACGG-1 1 #> 401  CCAAGCGAGTGGCGAT-1 1 #> 402  CCAATGAGTTAAGAAC-1 2 #> 403  CCAATTTGTGTCCACG-1 1 #> 404  CCACACTAGAGATGCC-1 1 #> 405  CCACACTAGCCGTCGT-1 1 #> 406  CCACACTAGGTCATCT-1 1 #> 407  CCACACTTCTCGGTAA-1 1 #> 408  CCACGAGAGGATGTTA-1 1 #> 409  CCACGAGTCCTACCGT-1 1 #> 410  CCACTTGTCTACCACC-1 1 #> 411  CCATCACCACATGAAA-1 2 #> 412  CCATCACGTAAGTAGT-1 1 #> 413  CCCAACTTCACTAGCA-1 2 #> 414  CCCAACTTCGCATAGT-1 1 #> 415  CCCATTGCAATGTGGG-1 1 #> 416  CCCATTGCATAGGTAA-1 1 #> 417  CCCGAAGGTGGTCTCG-1 1 #> 418  CCCGAAGGTTTGTTGG-1 1 #> 419  CCCGAAGTCGAAGCAG-1 1 #> 420  CCCGGAACAGAACTCT-1 1 #> 421  CCCTCAAGTATGAGGC-1 1 #> 422  CCCTCAATCACGGGAA-1 1 #> 423  CCCTCTCCAGACAAGC-1 1 #> 424  CCCTCTCCATATACCG-1 1 #> 425  CCCTCTCGTTTGGAGG-1 1 #> 426  CCCTCTCTCATGCTAG-1 1 #> 427  CCCTGATCAAAGACGC-1 1 #> 428  CCCTGATTCACGGGAA-1 1 #> 429  CCGAACGAGAGTACCG-1 2 #> 430  CCGAACGCACGGCACT-1 1 #> 431  CCGATCTAGGGCAATC-1 1 #> 432  CCGATCTCACAGTATC-1 1 #> 433  CCGATCTGTGGTCAAG-1 1 #> 434  CCGATGGTCAGCCCAG-1 1 #> 435  CCGCAAGAGAGCATCG-1 1 #> 436  CCGGTGAAGCGAAACC-1 1 #> 437  CCGGTGACATCCTAAG-1 1 #> 438  CCGGTGAGTACCGTCG-1 1 #> 439  CCGTAGGGTAGAGCTG-1 2 #> 440  CCGTGAGCACAACGTT-1 1 #> 441  CCGTTCATCCGCATAA-1 1 #> 442  CCTAACCAGTTGAAAC-1 1 #> 443  CCTAACCTCAGGAAGC-1 1 #> 444  CCTAAGAGTAGAATAC-1 1 #> 445  CCTAAGATCTTGGTCC-1 1 #> 446  CCTACGTCACGACGTC-1 1 #> 447  CCTACGTCACGAGAAC-1 1 #> 448  CCTACGTCATACAGAA-1 1 #> 449  CCTACGTTCGATACAC-1 1 #> 450  CCTATCGTCAAAGAAC-1 1 #> 451  CCTCAGTTCGAACGCC-1 1 #> 452  CCTCCAAAGCTTCATG-1 1 #> 453  CCTCCAAGTTGAGAGC-1 1 #> 454  CCTCCTCAGGCCCGTT-1 1 #> 455  CCTCCTCTCAAGCCGC-1 1 #> 456  CCTCTAGCAGTTTCGA-1 1 #> 457  CCTCTCCTCTAGTTCT-1 2 #> 458  CCTGCATAGGACTATA-1 1 #> 459  CCTGTTGCATGTTCAG-1 1 #> 460  CCTGTTGGTCTTGCTC-1 1 #> 461  CCTTCAGAGGGAACAA-1 1 #> 462  CCTTGTGTCGAACCAT-1 1 #> 463  CCTTTGGTCCTCTAAT-1 1 #> 464  CGAAGGACAGCGCTTG-1 1 #> 465  CGAAGGAGTCATGCAT-1 1 #> 466  CGAAGGATCTTCGGTC-1 1 #> 467  CGAAGTTTCCCAATAG-1 2 #> 468  CGAATTGAGGCTTTCA-1 1 #> 469  CGAGAAGGTTGTCTAG-1 1 #> 470  CGAGGAAGTACAGCGA-1 1 #> 471  CGAGGAATCACCATGA-1 1 #> 472  CGAGGCTGTAATCAGA-1 1 #> 473  CGAGGCTGTACCTTCC-1 3 #> 474  CGAGGCTTCGAGTACT-1 2 #> 475  CGAGTTAAGAGATGCC-1 1 #> 476  CGATCGGGTGCAATAA-1 1 #> 477  CGATGGCCAGATCACT-1 1 #> 478  CGCAGGTGTAGCGTAG-1 1 #> 479  CGCAGGTTCCCTGTTG-1 2 #> 480  CGCATAATCTTGTTAC-1 1 #> 481  CGCATGGCACCCTTAC-1 1 #> 482  CGCATGGCATGGCTAT-1 1 #> 483  CGCCAGACATGACTAC-1 1 #> 484  CGCCATTCACCGTGCA-1 1 #> 485  CGCCATTCAGCTAACT-1 1 #> 486  CGCCATTGTTCTATCT-1 1 #> 487  CGCGTGACATGAGGGT-1 1 #> 488  CGCGTGAGTACCGGAA-1 1 #> 489  CGCGTGATCCCAACTC-1 1 #> 490  CGCGTGATCTCACGAA-1 1 #> 491  CGGAACCCACAAATGA-1 1 #> 492  CGGAACCGTTAACCTG-1 1 #> 493  CGGAATTTCGACGAGA-1 2 #> 494  CGGACACAGGGCTGAT-1 1 #> 495  CGGACACCACTCTGCT-1 1 #> 496  CGGAGAAAGTTCATGC-1 2 #> 497  CGGAGAACAGTGTGGA-1 1 #> 498  CGGAGAAGTCAGGCAA-1 1 #> 499  CGGAGAAGTGTGGACA-1 1 #> 500  CGGAGAATCACGTAGT-1 1 #> 501  CGGAGAATCCAGTTCC-1 1 #> 502  CGGCAGTAGTGCAACG-1 1 #> 503  CGGGACTCATATCTGG-1 1 #> 504  CGGGCATCAGCATCTA-1 2 #> 505  CGGGCATGTTAGTCGT-1 1 #> 506  CGGGTCACACTGGCGT-1 4 #> 507  CGGGTGTCAAGAATGT-1 1 #> 508  CGGGTGTTCCGAGTGC-1 1 #> 509  CGGGTGTTCGAACTCA-1 1 #> 510  CGGTCAGAGACTTAAG-1 1 #> 511  CGGTCAGGTGCAAGAC-1 1 #> 512  CGGTCAGTCCACCCTA-1 1 #> 513  CGTAAGTAGGCATCTT-1 1 #> 514  CGTAAGTTCGGTGAAG-1 1 #> 515  CGTAATGGTGGCGCTT-1 1 #> 516  CGTGAATTCGGACAAG-1 1 #> 517  CGTGATAAGGTATTGA-1 1 #> 518  CGTGTCTAGACGATAT-1 1 #> 519  CGTGTCTAGCGTATGG-1 1 #> 520  CGTTGGGAGACCAGAC-1 1 #> 521  CGTTGGGCAGTATACC-1 1 #> 522  CTAACCCAGACCAGCA-1 1 #> 523  CTAACTTGTCCGGTCA-1 2 #> 524  CTAAGTGAGGGACCAT-1 2 #> 525  CTAAGTGTCATGCTAG-1 1 #> 526  CTACATTGTCGTCTCT-1 1 #> 527  CTACATTTCTGGGATT-1 1 #> 528  CTACCCACACCGGCTA-1 1 #> 529  CTACCTGCAGCAGTCC-1 1 #> 530  CTACTATAGGATAATC-1 1 #> 531  CTACTATCAATTGTGC-1 1 #> 532  CTAGACAAGGAAAGGT-1 1 #> 533  CTAGACAAGTCTGTAC-1 1 #> 534  CTAGACACATCATGAC-1 1 #> 535  CTATAGGAGCGCCTCA-1 1 #> 536  CTATAGGCAGCTACCG-1 1 #> 537  CTATAGGGTTCTCGTC-1 1 #> 538  CTATCTAAGCATCTTG-1 1 #> 539  CTATCTACATGACTTG-1 1 #> 540  CTATCTATCCTGTTAT-1 1 #> 541  CTCAAGAGTGTGCTTA-1 1 #> 542  CTCAATTAGAGAGCGG-1 1 #> 543  CTCAATTAGTAAGAGG-1 1 #> 544  CTCAATTGTTCTCGCT-1 1 #> 545  CTCAGAATCGCGTGCA-1 1 #> 546  CTCAGGGAGGTAGATT-1 1 #> 547  CTCAGGGGTCTCGACG-1 1 #> 548  CTCAGTCAGCAACCAG-1 1 #> 549  CTCAGTCCAATATCCG-1 1 #> 550  CTCAGTCGTTAAGCAA-1 1 #> 551  CTCATCGAGCTACTGT-1 1 #> 552  CTCATCGGTATGTCCA-1 1 #> 553  CTCATCGGTTCGATTG-1 1 #> 554  CTCATCGTCTCTCAAT-1 1 #> 555  CTCATGCCACTTACAG-1 1 #> 556  CTCATGCGTCTTGCGG-1 1 #> 557  CTCATGCTCGAGCACC-1 1 #> 558  CTCATTAAGAGAGGGC-1 1 #> 559  CTCATTAGTACCCAGC-1 1 #> 560  CTCATTAGTATGTCAC-1 1 #> 561  CTCCAACCAAACTCTG-1 1 #> 562  CTCCACAGTAATCAGA-1 1 #> 563  CTCCACATCGACCAAT-1 1 #> 564  CTCCATGGTACGTGAG-1 1 #> 565  CTCCCAAAGATTGAGT-1 1 #> 566  CTCCCAACAGTTTCGA-1 1 #> 567  CTCCCAATCAAGGAGC-1 1 #> 568  CTCCCTCCAAGCCTGC-1 2 #> 569  CTCCCTCCAGCTGGTC-1 2 #> 570  CTCCGATCACCAGGTC-1 1 #> 571  CTCCTCCGTTACGTAC-1 1 #> 572  CTCCTCCTCATAGCAC-1 2 #> 573  CTCCTTTCACAATCTG-1 1 #> 574  CTCCTTTCACATGTTG-1 1 #> 575  CTCGAGGAGGATATAC-1 1 #> 576  CTCGAGGCACTCCCTA-1 1 #> 577  CTCGAGGCAGTCTTCC-1 1 #> 578  CTCTCAGTCGTCCTCA-1 1 #> 579  CTCTCAGTCGTCGCTT-1 1 #> 580  CTCTCGACAGGCATGA-1 1 #> 581  CTCTCGAGTCTCGACG-1 1 #> 582  CTCTGGTAGGTACAGC-1 2 #> 583  CTGAGCGCAAGAATAC-1 2 #> 584  CTGAGCGCAGGTGTGA-1 2 #> 585  CTGAGCGCATGACTCA-1 2 #> 586  CTGAGGCAGTATGCAA-1 1 #> 587  CTGAGGCTCACACCCT-1 2 #> 588  CTGATCCGTCTCACGG-1 2 #> 589  CTGCAGGTCGCACGAC-1 1 #> 590  CTGCAGGTCTAGTTCT-1 1 #> 591  CTGCATCAGAGGTCGT-1 1 #> 592  CTGCATCCAAACGTGG-1 1 #> 593  CTGCCATTCGGTTGTA-1 1 #> 594  CTGCCTAAGGATACCG-1 2 #> 595  CTGCGAGAGGAAGAAC-1 1 #> 596  CTGCTCAAGATTGAGT-1 1 #> 597  CTGCTCATCCTAACAG-1 1 #> 598  CTGCTCATCGGTCGAC-1 2 #> 599  CTGGCAGCAAATAAGC-1 1 #> 600  CTGGCAGCACTTCTCG-1 1 #> 601  CTGGTCTCACCCTAAA-1 1 #> 602  CTGTATTGTGCACAAG-1 1 #> 603  CTGTCGTGTCGAGCAA-1 1 #> 604  CTGTGGGGTACTAGCT-1 1 #> 605  CTTACCGCAGATCATC-1 1 #> 606  CTTACCGTCGTGGACC-1 1 #> 607  CTTACCGTCTTCTGGC-1 1 #> 608  CTTAGGACACGACGCT-1 1 #> 609  CTTAGGACAGCGAGTA-1 2 #> 610  CTTCCGATCCTGTTAT-1 1 #> 611  CTTCCTTAGATAGGGA-1 1 #> 612  CTTCCTTCAACACACT-1 1 #> 613  CTTCCTTCAACCAATC-1 1 #> 614  CTTCCTTCAAGTTCGT-1 1 #> 615  CTTCCTTGTCAGATTC-1 1 #> 616  CTTCGGTCACCCGTAG-1 1 #> 617  CTTCTAACAGGAATCG-1 1 #> 618  CTTGATTAGTTACTCG-1 1 #> 619  CTTGATTCAGAGCTAG-1 1 #> 620  GAAACCTAGTATAACG-1 1 #> 621  GAAACCTAGTGATGGC-1 1 #> 622  GAAACCTGTACCATAC-1 2 #> 623  GAAACCTGTATGCAAA-1 2 #> 624  GAAACCTTCAACTGAC-1 1 #> 625  GAACACTAGGCATGCA-1 1 #> 626  GAACACTGTGCAATAA-1 1 #> 627  GAACGTTAGGTACATA-1 1 #> 628  GAACGTTTCTCGCTTG-1 1 #> 629  GAAGAATGTGGATCGA-1 1 #> 630  GAAGAATTCCTTATGT-1 3 #> 631  GAAGCCCAGCGTCAAG-1 1 #> 632  GAAGCCCGTGAAAGTT-1 1 #> 633  GAAGCCCGTGGCCTCA-1 1 #> 634  GAAGCGAAGGTTATAG-1 1 #> 635  GAAGGACAGCTCCACG-1 1 #> 636  GAAGGACAGTCGAAGC-1 2 #> 637  GAAGGACTCCGTGTAA-1 1 #> 638  GAAGGACTCGACCCAG-1 1 #> 639  GAAGTAAAGGATCACG-1 1 #> 640  GAATAGATCCATATGG-1 1 #> 641  GAATCACCACATAACC-1 1 #> 642  GAATCGTCACCTGCAG-1 1 #> 643  GACACGCCACAATGTC-1 1 #> 644  GACAGCCAGTCTACCA-1 2 #> 645  GACAGCCGTCGTATTG-1 1 #> 646  GACATCACAAGACGAC-1 1 #> 647  GACATCACAGTTCCAA-1 1 #> 648  GACCCAGGTGCAGTGA-1 1 #> 649  GACCCAGTCCAAACCA-1 1 #> 650  GACCCTTAGTGCTAGG-1 1 #> 651  GACCCTTTCGGCATTA-1 1 #> 652  GACCTTCAGTTGTAAG-1 1 #> 653  GACGTTAAGGGATCTG-1 1 #> 654  GACGTTACAAACCACT-1 2 #> 655  GACGTTATCTCCGAGG-1 1 #> 656  GACTATGAGGGACAGG-1 1 #> 657  GACTATGCACTAACGT-1 1 #> 658  GACTCAAGTGAGTTTC-1 1 #> 659  GACTCAATCATCTATC-1 1 #> 660  GACTCAATCCATTTAC-1 1 #> 661  GACTCTCCACGCTATA-1 1 #> 662  GACTGATAGGAGGTTC-1 2 #> 663  GACTGATCAACAGCTT-1 1 #> 664  GACTGATTCCTGTTAT-1 1 #> 665  GAGAAATCAGCCATTA-1 1 #> 666  GAGACCCTCTATGTGG-1 1 #> 667  GAGAGGTAGTTGTCAC-1 1 #> 668  GAGATGGAGTCGAGGT-1 1 #> 669  GAGATGGAGTTGCTCA-1 2 #> 670  GAGATGGCAAACTCTG-1 1 #> 671  GAGATGGCAAAGGCTG-1 1 #> 672  GAGATGGGTAACATAG-1 1 #> 673  GAGATGGTCATGGCCG-1 1 #> 674  GAGATGGTCGCTGCGA-1 1 #> 675  GAGCTGCGTATTAAGG-1 1 #> 676  GAGGGATCAGCCTACG-1 2 #> 677  GAGGGATGTATTCTCT-1 1 #> 678  GAGGGTAAGACAACAT-1 1 #> 679  GAGTCATAGCCGTCGT-1 1 #> 680  GAGTCTAGTTCGGCTG-1 1 #> 681  GAGTGTTGTCTAGGCC-1 1 #> 682  GAGTGTTGTGGAGAAA-1 1 #> 683  GAGTTACCATCCTTCG-1 2 #> 684  GAGTTACGTAATTGGA-1 1 #> 685  GAGTTTGAGTTCTACG-1 1 #> 686  GATAGAAAGAAGGATG-1 2 #> 687  GATAGCTAGTTACGGG-1 1 #> 688  GATAGCTCACGCTGCA-1 2 #> 689  GATAGCTTCACCATCC-1 1 #> 690  GATCAGTAGTCTGGAG-1 1 #> 691  GATCAGTCAACTAGAA-1 1 #> 692  GATCATGAGCATGAAT-1 1 #> 693  GATCATGCAGGAACCA-1 1 #> 694  GATCATGGTAGCTGAG-1 1 #> 695  GATCATGGTGGTTTGT-1 1 #> 696  GATCCCTAGAGAGTGA-1 1 #> 697  GATCCCTCACGGCGTT-1 1 #> 698  GATCCCTGTGGCCACT-1 1 #> 699  GATCGTAGTCACATTG-1 1 #> 700  GATCGTAGTCGTGCCA-1 1 #> 701  GATGACTGTAGTAAGT-1 1 #> 702  GATGAGGAGGGCCTCT-1 1 #> 703  GATGAGGTCTGACGCG-1 1 #> 704  GATGATCAGCCAGACA-1 1 #> 705  GATGATCTCATTGCTT-1 1 #> 706  GATGCTAGTAATGCTC-1 1 #> 707  GATGCTATCAAGCCAT-1 1 #> 708  GATGGAGCAAGTGGAC-1 1 #> 709  GATGTTGAGAAATTCG-1 1 #> 710  GATGTTGTCGTCCTTG-1 1 #> 711  GATTCGAGTACCAGAG-1 2 #> 712  GATTCTTAGTCTACCA-1 1 #> 713  GATTTCTTCGCTCCTA-1 1 #> 714  GCAACATCAACACGTT-1 2 #> 715  GCAACATCATTCACAG-1 1 #> 716  GCAACATGTGCCGGTT-1 1 #> 717  GCAACCGCAGGCAATG-1 1 #> 718  GCACATACATGTGGCC-1 1 #> 719  GCACGGTAGGCAGTCA-1 1 #> 720  GCACGGTCATCGGATT-1 3 #> 721  GCACGGTCATGTGTCA-1 1 #> 722  GCACGGTTCACTGTTT-1 1 #> 723  GCACGGTTCTCGTGGG-1 1 #> 724  GCACTAAGTATAGCTC-1 1 #> 725  GCACTAAGTGTAGTGG-1 1 #> 726  GCAGCTGCACATTGTG-1 1 #> 727  GCAGCTGTCACCGGTG-1 1 #> 728  GCAGCTGTCCATATGG-1 1 #> 729  GCAGGCTTCCTTCTTC-1 1 #> 730  GCAGTTACAGCATACT-1 1 #> 731  GCAGTTACATGAGAAT-1 1 #> 732  GCAGTTAGTCGACTGC-1 1 #> 733  GCAGTTAGTGCCTATA-1 1 #> 734  GCAGTTATCTGGCCTT-1 1 #> 735  GCATGATAGAAGTGTT-1 1 #> 736  GCATGATAGGTAAGAG-1 1 #> 737  GCATGATGTTGACTGT-1 1 #> 738  GCATTAGCAGACCTGC-1 2 #> 739  GCATTAGCAGAGTCAG-1 1 #> 740  GCATTAGGTTCTCGTC-1 1 #> 741  GCATTAGTCCACTTCG-1 2 #> 742  GCCAACGGTTTCCAAG-1 1 #> 743  GCCAGCAAGACGTCGA-1 1 #> 744  GCCAGCAAGGGAACAA-1 1 #> 745  GCCAGCAGTCTGTGGC-1 1 #> 746  GCCAGCAGTTTCGCTC-1 1 #> 747  GCCAGGTGTCCTTAAG-1 1 #> 748  GCCAGTGCACAACCGC-1 1 #> 749  GCCCAGATCCGAAATC-1 1 #> 750  GCCCGAAAGTCCCGAC-1 1 #> 751  GCCGATGGTATGGAAT-1 1 #> 752  GCCTGTTCAAACTAGA-1 1 #> 753  GCGAGAAGTATGCTTG-1 1 #> 754  GCGATCGAGCTGTCCG-1 2 #> 755  GCGATCGGTATACCTG-1 1 #> 756  GCGGAAAGTGAGTGAC-1 1 #> 757  GCGGATCCACAGTGTT-1 1 #> 758  GCGTTTCAGGACGGAG-1 1 #> 759  GCGTTTCCATCGAGCC-1 2 #> 760  GCTACAAGTCCTTGTC-1 1 #> 761  GCTACCTAGTGTAGTA-1 1 #> 762  GCTACCTCACATGAAA-1 1 #> 763  GCTCAAACAGAGATGC-1 1 #> 764  GCTCAAACATTCACCC-1 1 #> 765  GCTCAAAGTATGTGTC-1 1 #> 766  GCTGAATGTGTCTTCC-1 1 #> 767  GCTGCAGAGTATCTGC-1 1 #> 768  GCTGCAGGTCTTGGTA-1 1 #> 769  GCTGCAGTCGGAAGGT-1 1 #> 770  GCTGGGTTCACCCATC-1 3 #> 771  GCTTCACCACTTGGGC-1 1 #> 772  GCTTCACTCCGTAGGC-1 1 #> 773  GCTTGGGAGAACAGGA-1 1 #> 774  GCTTGGGAGTCCTGCG-1 1 #> 775  GCTTGGGTCAACTGGT-1 1 #> 776  GCTTTCGCAACAGAGC-1 2 #> 777  GGAACCCAGTAAATGC-1 1 #> 778  GGAAGTGAGTCCGCCA-1 1 #> 779  GGAATGGGTGTATTGC-1 1 #> 780  GGAGAACTCTGCTGAA-1 1 #> 781  GGAGGATAGATTAGAC-1 1 #> 782  GGAGGATGTCTACTGA-1 1 #> 783  GGAGGTACACGGCGTT-1 1 #> 784  GGATGTTCAACCCTCT-1 1 #> 785  GGCAGTCCACCCGTAG-1 1 #> 786  GGCTGTGAGTGGTGGT-1 2 #> 787  GGCTTGGAGATCCCGC-1 1 #> 788  GGCTTGGGTATCCTCC-1 1 #> 789  GGCTTGGGTCTTCATT-1 1 #> 790  GGCTTGGGTGGATGAC-1 1 #> 791  GGCTTGGGTTAAAGTG-1 1 #> 792  GGCTTGGTCACGAACT-1 1 #> 793  GGCTTGGTCAGTGTGT-1 1 #> 794  GGCTTGGTCCATTGTT-1 1 #> 795  GGCTTTCAGTGGACGT-1 1 #> 796  GGCTTTCCAAGCACAG-1 1 #> 797  GGGAAGTAGAGAGGTA-1 1 #> 798  GGGAAGTAGTTCCATG-1 1 #> 799  GGGAAGTTCGCTGTTC-1 1 #> 800  GGGACAACATAGGAGC-1 1 #> 801  GGGACAACATGGGCAA-1 1 #> 802  GGGACTCGTTGTAAAG-1 1 #> 803  GGGAGATAGAGATCGC-1 1 #> 804  GGGAGATGTTGAAGTA-1 2 #> 805  GGGATCCGTAGAATGT-1 1 #> 806  GGGATCCGTGGCAACA-1 1 #> 807  GGGATCCTCAGGACGA-1 1 #> 808  GGGATGATCTGCGGAC-1 1 #> 809  GGGCCATCACGTGTGC-1 1 #> 810  GGGCCATCAGCACCCA-1 1 #> 811  GGGCGTTAGTACCATC-1 2 #> 812  GGGCTACCAATTTCCT-1 1 #> 813  GGGTATTAGGTGATCG-1 1 #> 814  GGGTCTGTCAAGTGGG-1 1 #> 815  GGGTGTCTCCCATGGG-1 1 #> 816  GGGTGTCTCCGGTAAT-1 1 #> 817  GGGTTTATCGCTCTCA-1 1 #> 818  GGTAATCAGACTTCCA-1 1 #> 819  GGTAATCCAGCTATAC-1 1 #> 820  GGTAATCCAGGATTCT-1 1 #> 821  GGTAATCGTTTGACAC-1 1 #> 822  GGTAGAGAGAGTCAGC-1 1 #> 823  GGTAGAGTCACAAGGG-1 1 #> 824  GGTCACGAGTATTCCG-1 1 #> 825  GGTCTGGCAGCTACAT-1 1 #> 826  GGTCTGGTCTCCGTGT-1 1 #> 827  GGTGAAGAGTAGGCCA-1 1 #> 828  GGTGGCTCAACCGACC-1 1 #> 829  GGTGGCTGTAATGATG-1 1 #> 830  GGTGTCGTCGGATTAC-1 1 #> 831  GGTGTTAAGCCAGTAG-1 1 #> 832  GGTGTTACACCATATG-1 2 #> 833  GGTGTTACATGTGGCC-1 1 #> 834  GGTGTTATCTTACCAT-1 2 #> 835  GGTTCTCCAGCGCGTT-1 1 #> 836  GTAACACAGCTCGAAG-1 1 #> 837  GTAACCAAGCCGTTGC-1 1 #> 838  GTAACCATCTTACTGT-1 1 #> 839  GTAATCGGTCGGTAAG-1 2 #> 840  GTAATCGTCGCCTATC-1 1 #> 841  GTAATGCCATGATAGA-1 1 #> 842  GTACAGTCAAAGCTCT-1 2 #> 843  GTACAGTCACCCTAAA-1 1 #> 844  GTACAGTCACTACACA-1 1 #> 845  GTAGAAAAGAGTGGCT-1 1 #> 846  GTAGAGGTCTGGTTGA-1 1 #> 847  GTAGGAGGTGTGGACA-1 1 #> 848  GTAGGAGTCACCGGTG-1 1 #> 849  GTAGTACTCCTTTAGT-1 1 #> 850  GTATTGGAGTCCCAAT-1 1 #> 851  GTATTTCGTCAACCTA-1 1 #> 852  GTATTTCGTTGTCTAG-1 1 #> 853  GTCAAACTCGACATTG-1 1 #> 854  GTCAAGTGTATGACAA-1 2 #> 855  GTCACTCTCAAGCCCG-1 1 #> 856  GTCAGCGGTCATCGGC-1 1 #> 857  GTCATCCCAGAGTTCT-1 2 #> 858  GTCATCCCAGCGCTTG-1 1 #> 859  GTCATCCCAGCTATAC-1 1 #> 860  GTCATCCGTCTCAGAT-1 1 #> 861  GTCATGACAGATTAAG-1 1 #> 862  GTCATGAGTGTGATGG-1 1 #> 863  GTCCACTGTAATGCTC-1 1 #> 864  GTCCACTGTACCAGAG-1 1 #> 865  GTCCACTGTACGATTC-1 1 #> 866  GTCCCATAGTGTTCCA-1 1 #> 867  GTCCCATGTTAAGGGC-1 1 #> 868  GTCCTCAGTACACTCA-1 1 #> 869  GTCCTCAGTCCACACG-1 1 #> 870  GTCCTCAGTTAGAAGT-1 1 #> 871  GTCGCGATCGTGGAAG-1 1 #> 872  GTCTACCTCTCCTGAC-1 1 #> 873  GTCTAGACAAATGGCG-1 1 #> 874  GTCTCACCAATGGGTG-1 1 #> 875  GTCTTTACACCTGTCT-1 1 #> 876  GTGACGCCAGCATTGT-1 1 #> 877  GTGAGCCCAAAGGCTG-1 1 #> 878  GTGAGCCCATTGTCGA-1 2 #> 879  GTGAGGAGTGTATTCG-1 1 #> 880  GTGAGGATCTCTGCCA-1 1 #> 881  GTGATGTCATAACTCG-1 1 #> 882  GTGATGTTCAGTGGGA-1 1 #> 883  GTGCAGCAGCACTCCG-1 1 #> 884  GTGCAGCAGTAGGATT-1 2 #> 885  GTGCAGCAGTTCCAGT-1 1 #> 886  GTGCAGCTCGATTTCT-1 2 #> 887  GTGCGTGAGATGTTAG-1 1 #> 888  GTGCGTGAGGTGCCAA-1 1 #> 889  GTGGAAGCAGGAGGTT-1 1 #> 890  GTGGAAGTCGCCAATA-1 1 #> 891  GTGGGAAAGTTGGAAT-1 1 #> 892  GTGGGAATCGGACTGC-1 1 #> 893  GTGGTTATCTTGATTC-1 1 #> 894  GTGTAACAGTCTAACC-1 1 #> 895  GTGTGGCGTGTAACGG-1 1 #> 896  GTGTGGCTCTGGCCGA-1 1 #> 897  GTGTTAGAGTATCTGC-1 1 #> 898  GTGTTAGGTTCGCGTG-1 1 #> 899  GTGTTAGTCAGCTTCC-1 1 #> 900  GTGTTAGTCAGTGCGC-1 2 #> 901  GTGTTCCCAGACAAAT-1 1 #> 902  GTGTTCCCATGGCGCT-1 1 #> 903  GTTACCCAGGTTGTTC-1 1 #> 904  GTTACCCTCGATACTG-1 1 #> 905  GTTACGAAGCTATCTG-1 1 #> 906  GTTAGACAGTTGGCGA-1 1 #> 907  GTTAGACGTCAATCTG-1 1 #> 908  GTTAGTGTCGGTAAGG-1 1 #> 909  GTTATGGCATCCGTTC-1 1 #> 910  GTTCCGTAGTCACGCC-1 1 #> 911  GTTCTATTCTGTAAGC-1 1 #> 912  GTTGCGGAGCTTGTTG-1 1 #> 913  GTTGCGGCAAATCGGG-1 1 #> 914  GTTGCGGCATCTAACG-1 1 #> 915  GTTGCGGTCTTAGCAG-1 1 #> 916  GTTGTAGTCCCATGGG-1 1 #> 917  GTTGTGACAACATCGT-1 1 #> 918  GTTTACTAGCTTAAGA-1 1 #> 919  GTTTGGATCGCCAATA-1 2 #> 920  TAACACGAGAATACAC-1 1 #> 921  TAACACGAGATTCGCT-1 2 #> 922  TAACACGGTGACAACG-1 1 #> 923  TAACACGTCCCTCGTA-1 1 #> 924  TAACACGTCTTCACAT-1 1 #> 925  TAACCAGCAGCCTATA-1 1 #> 926  TAACCAGGTGTCCGGT-1 1 #> 927  TAACGACAGTTCGCAT-1 2 #> 928  TAACGACCACAGCGCT-1 1 #> 929  TAAGCACCAGAGGTAC-1 1 #> 930  TAAGCACGTTCCTAAG-1 1 #> 931  TAAGCACTCAGCTGTA-1 1 #> 932  TAAGCCACAAAGCTCT-1 1 #> 933  TAAGCCAGTAGTGGCA-1 1 #> 934  TAAGCCAGTTGCAACT-1 1 #> 935  TAAGCGTTCTAAGGAA-1 1 #> 936  TAATCTCAGGAGTATT-1 1 #> 937  TAATCTCTCTACGGTA-1 1 #> 938  TAATTCCTCCGTTGAA-1 1 #> 939  TACAACGGTGACATCT-1 1 #> 940  TACAACGTCCGAACGC-1 1 #> 941  TACACCCAGGCCATAG-1 1 #> 942  TACACCCCACGGGTAA-1 1 #> 943  TACACCCTCCGATAGT-1 2 #> 944  TACAGGTAGCCAGTAG-1 1 #> 945  TACAGGTCACCAATTG-1 1 #> 946  TACCCACGTAGATTAG-1 2 #> 947  TACCCGTCACTTGTCC-1 1 #> 948  TACCGAAAGCTCAGAG-1 1 #> 949  TACCGGGCAAGCACCC-1 1 #> 950  TACCGGGTCCTACTGC-1 1 #> 951  TACCGGGTCTAGTGTG-1 2 #> 952  TACCTCGAGCTACGTT-1 1 #> 953  TACCTCGAGTCTAACC-1 1 #> 954  TACGGGCGTCTTTCAT-1 1 #> 955  TACGGTACACGTAACT-1 1 #> 956  TACGTCCGTACGATTC-1 1 #> 957  TACTGCCAGTAGAGTT-1 1 #> 958  TACTTACAGAACTCCT-1 1 #> 959  TACTTACGTTACTCAG-1 1 #> 960  TACTTCAAGGTAGTCG-1 2 #> 961  TACTTGTTCACGTCCT-1 1 #> 962  TAGACCACAGAGGTTG-1 1 #> 963  TAGACCAGTGTTATCG-1 1 #> 964  TAGACCATCAACCCGG-1 1 #> 965  TAGACTGAGTATTCCG-1 1 #> 966  TAGAGTCCAGTTCACA-1 1 #> 967  TAGAGTCCATGTGGTT-1 1 #> 968  TAGAGTCTCGCCTTGT-1 1 #> 969  TAGATCGCACAATGTC-1 1 #> 970  TAGATCGGTGCATGAG-1 1 #> 971  TAGATCGTCTACGCGG-1 1 #> 972  TAGATCGTCTGATGGT-1 1 #> 973  TAGCACAAGGCATCGA-1 1 #> 974  TAGGTACCAGGCACAA-1 1 #> 975  TAGGTACGTATCACGT-1 1 #> 976  TAGGTACGTCAGGTAG-1 1 #> 977  TAGGTACTCATAAGGA-1 1 #> 978  TAGGTTGAGTAAATGC-1 2 #> 979  TAGGTTGCAGCGACAA-1 1 #> 980  TAGTGCAGTCCTTAAG-1 1 #> 981  TAGTGCATCACAACCA-1 1 #> 982  TATACCTGTAACTAAG-1 1 #> 983  TATACCTGTGGCTGAA-1 2 #> 984  TATCAGGGTGCTGTCG-1 1 #> 985  TATCCTAAGAGAGTTT-1 1 #> 986  TATCCTAAGGTCATTC-1 1 #> 987  TATCGCCAGTTACTCG-1 1 #> 988  TATCGCCCACGACGCT-1 2 #> 989  TATCGCCTCTAGACAC-1 1 #> 990  TATCTGTCAACGGCCT-1 1 #> 991  TATCTGTTCACGGGCT-1 1 #> 992  TATCTTGCACCGCTGA-1 1 #> 993  TATCTTGGTCTTGAAC-1 1 #> 994  TATGTTCGTCTCCCTA-1 1 #> 995  TATGTTCGTTATAGCC-1 1 #> 996  TATTCCAGTGAAAGTT-1 1 #> 997  TATTGCTAGAGTCTGG-1 1 #> 998  TATTTCGAGCGCACAA-1 1 #> 999  TCAAGACGTGTGAGCA-1 1 #> 1000 TCAAGTGTCCATCGTC-1 1 #> 1001 TCAATCTAGCCATTTG-1 1 #> 1002 TCAATCTAGTCACTGT-1 1 #> 1003 TCAATTCAGGAAGTGA-1 1 #> 1004 TCACAAGCAACAGAGC-1 1 #> 1005 TCACACCCAGCCGGTT-1 1 #> 1006 TCACATTAGCCTCCAG-1 1 #> 1007 TCACGCTGTTCTAACG-1 1 #> 1008 TCACGGGCAGTCTTCC-1 1 #> 1009 TCACGGGGTCACAGTT-1 1 #> 1010 TCACTATAGCGAAACC-1 1 #> 1011 TCACTCGAGTCCGCGT-1 1 #> 1012 TCACTCGCAGGCAATG-1 1 #> 1013 TCAGCAAAGTTGTACC-1 1 #> 1014 TCAGCAAGTCACTGAT-1 1 #> 1015 TCAGCAATCTGCTGAA-1 1 #> 1016 TCAGCCTAGTAAAGCT-1 1 #> 1017 TCAGCCTGTTCAGGTT-1 1 #> 1018 TCAGGGCCATGAGGGT-1 1 #> 1019 TCAGGGCCATTGGCAT-1 2 #> 1020 TCAGGGCTCAACTTTC-1 1 #> 1021 TCAGGGCTCTCTCAAT-1 1 #> 1022 TCAGGTACAGCATACT-1 1 #> 1023 TCAGGTAGTGGCTTAT-1 1 #> 1024 TCAGTTTGTAAGATAC-1 1 #> 1025 TCAGTTTGTCGAATTC-1 1 #> 1026 TCAGTTTTCGCAGAGA-1 1 #> 1027 TCAGTTTTCGGCTGAC-1 2 #> 1028 TCATATCTCTGAACGT-1 1 #> 1029 TCATCATAGCATCAAA-1 1 #> 1030 TCATCCGAGGAAGTCC-1 1 #> 1031 TCATGAGCACAAATGA-1 1 #> 1032 TCATGAGCACATTGTG-1 1 #> 1033 TCATGCCAGACTACGG-1 1 #> 1034 TCATGCCCAGCCCAGT-1 1 #> 1035 TCATGCCTCGACACCG-1 1 #> 1036 TCATGCCTCTGGCCGA-1 1 #> 1037 TCATGGACAACTTGGT-1 1 #> 1038 TCATTACAGTCACTCA-1 1 #> 1039 TCATTACCAACAGCTT-1 2 #> 1040 TCATTACTCTGGAGAG-1 1 #> 1041 TCATTCATCTACACTT-1 1 #> 1042 TCATTGTAGCCTGCCA-1 1 #> 1043 TCATTGTGTCTCTCCA-1 1 #> 1044 TCATTTGAGCCTCAAT-1 1 #> 1045 TCCACGTCAACCTATG-1 2 #> 1046 TCCAGAAAGGTTCCAT-1 1 #> 1047 TCCAGAACATGACACT-1 1 #> 1048 TCCAGAATCTAGCAAC-1 2 #> 1049 TCCATCGTCATGAGGG-1 1 #> 1050 TCCATCGTCTGGCCGA-1 1 #> 1051 TCCATGCAGTATGCAA-1 1 #> 1052 TCCATGCTCACTCACC-1 1 #> 1053 TCCATGCTCGAACCTA-1 1 #> 1054 TCCCACAGTCCCGCAA-1 1 #> 1055 TCCCAGTAGGCTTTCA-1 1 #> 1056 TCCCATGCATCGGCCA-1 1 #> 1057 TCCGATCAGTAGGCCA-1 1 #> 1058 TCCGGGAGTGGACCTC-1 2 #> 1059 TCCGGGAGTTCTAACG-1 2 #> 1060 TCCGTGTCAAGATGTA-1 1 #> 1061 TCCGTGTCATACTGAC-1 1 #> 1062 TCCTAATAGTATGATG-1 2 #> 1063 TCCTAATTCTCTTCAA-1 1 #> 1064 TCCTAATTCTTACGGA-1 1 #> 1065 TCCTCCCCAACGATCT-1 1 #> 1066 TCCTCCCCACAGTCAT-1 1 #> 1067 TCCTCTTAGAGTGACC-1 2 #> 1068 TCCTGCAAGCAACAAT-1 1 #> 1069 TCCTGCACAATGCAGG-1 1 #> 1070 TCCTGCACAGTTACCA-1 1 #> 1071 TCCTGCATCGCCTCTA-1 1 #> 1072 TCCTTCTCACCCAACG-1 1 #> 1073 TCCTTCTCATACGCAT-1 1 #> 1074 TCCTTTCAGACCTGGA-1 1 #> 1075 TCCTTTCCACCGCTAG-1 1 #> 1076 TCGAACAAGTAAACGT-1 2 #> 1077 TCGAACAGTACTCAAC-1 1 #> 1078 TCGACGGAGTCGTCTA-1 1 #> 1079 TCGACGGTCGCCTTTG-1 1 #> 1080 TCGATTTAGAGCAGTC-1 1 #> 1081 TCGATTTAGTAGTCAA-1 1 #> 1082 TCGATTTCAGGCAATG-1 1 #> 1083 TCGATTTGTAGATCGG-1 1 #> 1084 TCGATTTTCAAATAGG-1 2 #> 1085 TCGCACTCAGCTTCGG-1 1 #> 1086 TCGCAGGAGGCTTAGG-1 1 #> 1087 TCGCAGGGTGTAGGAC-1 1 #> 1088 TCGGGACTCGTTACCC-1 2 #> 1089 TCGGGTGTCGCAGTTA-1 1 #> 1090 TCGGTCTAGTCAATCC-1 1 #> 1091 TCGGTCTTCATCACCC-1 1 #> 1092 TCGTAGAGTACCTTCC-1 1 #> 1093 TCGTGCTTCATCCTGC-1 1 #> 1094 TCTAACTCACATTCGA-1 1 #> 1095 TCTAACTGTCGCAACC-1 1 #> 1096 TCTAACTTCCTCACTG-1 1 #> 1097 TCTACATAGGGTTAAT-1 1 #> 1098 TCTACATAGGTTCATC-1 1 #> 1099 TCTACCGCACAGAGCA-1 1 #> 1100 TCTATACCAAACTAAG-1 2 #> 1101 TCTATACCAGTCTGGC-1 1 #> 1102 TCTATACCATATGAAG-1 1 #> 1103 TCTATACTCGATTCCC-1 1 #> 1104 TCTATACTCGTAACTG-1 1 #> 1105 TCTCACGTCTCACGAA-1 1 #> 1106 TCTCAGCAGCCGAATG-1 1 #> 1107 TCTCCGAAGCTGGAGT-1 1 #> 1108 TCTCCGATCGTTACCC-1 1 #> 1109 TCTCCGATCTTACACT-1 1 #> 1110 TCTGCCAAGTAACCTC-1 1 #> 1111 TCTGGCTAGCTTAAGA-1 1 #> 1112 TCTGGCTGTACCATAC-1 1 #> 1113 TCTGGCTGTTCTAACG-1 1 #> 1114 TCTGTCGGTTGTCTAG-1 1 #> 1115 TCTTAGTGTGAGACCA-1 1 #> 1116 TCTTCCTAGCGGACAT-1 1 #> 1117 TCTTCCTTCCCTCATG-1 1 #> 1118 TCTTCCTTCTCATAGG-1 1 #> 1119 TCTTGCGCAGGCCTGT-1 2 #> 1120 TCTTGCGTCCGTACGG-1 1 #> 1121 TCTTTGAAGGAGGTTC-1 1 #> 1122 TCTTTGAAGGGAGTTC-1 1 #> 1123 TCTTTGACAGGCGTTC-1 1 #> 1124 TGAATGCCAACCGTGC-1 1 #> 1125 TGACAGTAGTTCCTGA-1 1 #> 1126 TGACAGTTCGGTCACG-1 1 #> 1127 TGACCCTAGCCTCCAG-1 1 #> 1128 TGACCCTCATGACCCG-1 1 #> 1129 TGACCCTCATGACGGA-1 1 #> 1130 TGACGCGCAAGATTGA-1 1 #> 1131 TGACTCCAGTACCCTA-1 1 #> 1132 TGACTCCCAATGTCAC-1 2 #> 1133 TGACTCCGTCAAGCCC-1 1 #> 1134 TGACTCCGTCATCGGC-1 1 #> 1135 TGAGACTAGCAGGCAT-1 1 #> 1136 TGAGACTCACAAGCTT-1 2 #> 1137 TGAGACTCACTTACAG-1 1 #> 1138 TGAGACTGTCGCCTAG-1 1 #> 1139 TGAGACTGTTGGAGAC-1 1 #> 1140 TGAGCGCTCAAGGACG-1 1 #> 1141 TGAGGAGCAAGGACAC-1 2 #> 1142 TGAGGAGCATGACTTG-1 1 #> 1143 TGAGGAGCATGGGATG-1 1 #> 1144 TGAGGGACACGCGTCA-1 1 #> 1145 TGAGTCACAAGGAGTC-1 1 #> 1146 TGAGTCACAGCATACT-1 1 #> 1147 TGATCAGAGTTTCGAC-1 1 #> 1148 TGATCAGGTACTAAGA-1 1 #> 1149 TGATCTTAGTTTCGAC-1 1 #> 1150 TGATGGTTCCCTGGTT-1 1 #> 1151 TGATTCTAGTATGACA-1 1 #> 1152 TGATTCTGTACCGCGT-1 1 #> 1153 TGATTCTGTCGTATTG-1 1 #> 1154 TGATTCTTCGTCACCT-1 1 #> 1155 TGATTTCTCCGTAGGC-1 1 #> 1156 TGCAGATAGGATGCGT-1 1 #> 1157 TGCAGATTCGGCTGTG-1 1 #> 1158 TGCAGGCCACGACAAG-1 1 #> 1159 TGCATCCGTGCGAGTA-1 1 #> 1160 TGCATCCGTTACACAC-1 1 #> 1161 TGCATGAAGACCGTTT-1 1 #> 1162 TGCATGAAGAGATCGC-1 1 #> 1163 TGCATGATCCTAACAG-1 2 #> 1164 TGCATGATCTAGCCAA-1 1 #> 1165 TGCCGAGAGCCTCACG-1 1 #> 1166 TGCCGAGAGCCTCCAG-1 1 #> 1167 TGCGACGGTAACCAGG-1 1 #> 1168 TGCGGCACAAGTAGTA-1 1 #> 1169 TGCGGCATCGTAGTCA-1 1 #> 1170 TGCGGGTAGTTCGCAT-1 1 #> 1171 TGCGGGTCAGACCAAG-1 2 #> 1172 TGCGGGTCATGACTCA-1 1 #> 1173 TGCGGGTCATTGACTG-1 1 #> 1174 TGCTCCACAGTATACC-1 1 #> 1175 TGCTCCAGTGTGCTTA-1 1 #> 1176 TGCTCGTAGCGATGGT-1 2 #> 1177 TGCTCGTCAGCAGTTT-1 1 #> 1178 TGCTGAATCACCCATC-1 1 #> 1179 TGCTTCGAGACTTCAC-1 1 #> 1180 TGCTTCGCACTTACAG-1 1 #> 1181 TGCTTCGGTACCAGAG-1 1 #> 1182 TGCTTCGGTCTACTGA-1 1 #> 1183 TGCTTCGGTTCGTGCG-1 1 #> 1184 TGCTTCGTCTTTCCAA-1 1 #> 1185 TGCTTGCGTAAGTCAA-1 1 #> 1186 TGGAACTAGGGCAGGA-1 1 #> 1187 TGGAGAGCATGCACTA-1 1 #> 1188 TGGATCAAGGTTGGAC-1 1 #> 1189 TGGATGTTCCGTTGGG-1 1 #> 1190 TGGCGTGCAGGAATCG-1 1 #> 1191 TGGCGTGTCTACTTCA-1 1 #> 1192 TGGGAAGAGGTGAGCT-1 1 #> 1193 TGGGAAGTCCAAATGC-1 2 #> 1194 TGGGAGAGTATGAAGT-1 1 #> 1195 TGGGATTTCACTCGAA-1 1 #> 1196 TGGGATTTCATGTCTT-1 1 #> 1197 TGGGATTTCTACGCGG-1 1 #> 1198 TGGGCGTAGATTGACA-1 2 #> 1199 TGGGCGTCAAGGCCTC-1 1 #> 1200 TGGGTTACACCAATTG-1 1 #> 1201 TGGTACAAGGTACCTT-1 1 #> 1202 TGGTAGTTCGAGTTGT-1 1 #> 1203 TGGTGATCACTACTTT-1 1 #> 1204 TGGTGATCACTCGATA-1 1 #> 1205 TGGTGATTCTGACGCG-1 1 #> 1206 TGGTTAGGTCATCCGG-1 1 #> 1207 TGGTTAGGTTAGAGTA-1 1 #> 1208 TGTAAGCAGACCGCCT-1 2 #> 1209 TGTAAGCGTGGCCTCA-1 1 #> 1210 TGTAAGCGTGTCTAAC-1 1 #> 1211 TGTAGACTCACCGGTG-1 1 #> 1212 TGTAGACTCGTGAGAG-1 2 #> 1213 TGTCAGATCGAACCTA-1 1 #> 1214 TGTCCACCACTTCTCG-1 2 #> 1215 TGTCCACTCTATGTGG-1 1 #> 1216 TGTCCCAAGGTATTGA-1 1 #> 1217 TGTCCCAAGTCTGTAC-1 1 #> 1218 TGTCCCAGTAAGTAGT-1 1 #> 1219 TGTCCTGAGAAATCCA-1 1 #> 1220 TGTGCGGAGTCTAACC-1 1 #> 1221 TGTGCGGCATACAGGG-1 1 #> 1222 TGTGTGAGTCTTGAAC-1 1 #> 1223 TGTTACTGTCATACCA-1 1 #> 1224 TGTTCATAGAGCCTGA-1 1 #> 1225 TGTTCTAGTTACCGTA-1 1 #> 1226 TGTTGAGGTCTCTCTG-1 1 #> 1227 TGTTGAGTCGACACTA-1 1 #> 1228 TGTTGGACACATGACT-1 1 #> 1229 TGTTTGTTCTGGGAGA-1 1 #> 1230 TTAATCCGTTTGTTCT-1 1 #> 1231 TTAATCCTCGCGAAGA-1 1 #> 1232 TTACCATGTCTGCAAT-1 1 #> 1233 TTACGCCCAATTCTTC-1 2 #> 1234 TTACGTTAGACCAACG-1 1 #> 1235 TTACGTTAGATGCGAC-1 1 #> 1236 TTACGTTTCAGGGATG-1 2 #> 1237 TTACTGTGTCTGTCAA-1 1 #> 1238 TTACTGTTCAGAGTTC-1 2 #> 1239 TTAGTCTCAATACCTG-1 1 #> 1240 TTAGTCTGTCCAAGAG-1 1 #> 1241 TTAGTCTTCCTCCACA-1 1 #> 1242 TTATTGCTCACCCTGT-1 1 #> 1243 TTCAATCGTGGGACAT-1 1 #> 1244 TTCATGTAGGAACGCT-1 1 #> 1245 TTCCACGTCAAGTGGG-1 1 #> 1246 TTCCACGTCGCATTAG-1 1 #> 1247 TTCCACGTCTTGAGCA-1 1 #> 1248 TTCCGGTAGTTGGGAC-1 1 #> 1249 TTCCGGTGTCAATCTG-1 1 #> 1250 TTCCGGTTCTCCATAT-1 1 #> 1251 TTCCGTGAGCGCCTTG-1 1 #> 1252 TTCCTAAAGCAACAAT-1 2 #> 1253 TTCCTAAAGGAACGAA-1 1 #> 1254 TTCCTAACACCACATA-1 2 #> 1255 TTCCTAAGTGCTATTG-1 1 #> 1256 TTCCTTCCAAACTGCT-1 1 #> 1257 TTCCTTCCAAGTGGAC-1 2 #> 1258 TTCGATTCAGGTCAGA-1 1 #> 1259 TTCGATTGTCAGGTAG-1 2 #> 1260 TTCGATTGTGTGATGG-1 1 #> 1261 TTCGATTTCCCGAGGT-1 3 #> 1262 TTCGCTGAGACTTCGT-1 1 #> 1263 TTCGCTGCAGAGGTTG-1 1 #> 1264 TTCGGTCAGAAAGTCT-1 1 #> 1265 TTCTAGTAGAATCTAG-1 1 #> 1266 TTCTAGTAGGGAGGAC-1 1 #> 1267 TTCTAGTCAGTTGGTT-1 1 #> 1268 TTCTAGTGTCGAGTGA-1 1 #> 1269 TTCTGTACAGAGTCTT-1 1 #> 1270 TTCTTCCCACTGCATA-1 1 #> 1271 TTCTTCCCAGTTCACA-1 1 #> 1272 TTCTTCCTCGCGTGAC-1 1 #> 1273 TTGAACGAGGGCGAGA-1 1 #> 1274 TTGACCCAGGCCTGCT-1 1 #> 1275 TTGACCCTCAGTCTTT-1 1 #> 1276 TTGCATTGTGACTCTA-1 1 #> 1277 TTGCATTTCCTCACCA-1 1 #> 1278 TTGCATTTCGGCATTA-1 2 #> 1279 TTGCCTGCACCCTTAC-1 1 #> 1280 TTGCCTGCATCATCCC-1 1 #> 1281 TTGCCTGTCGGTAGAG-1 1 #> 1282 TTGCTGCCATGACTTG-1 1 #> 1283 TTGGATGAGTCATACC-1 1 #> 1284 TTGGGATGTCATGGCC-1 1 #> 1285 TTGGGATTCATAGCAC-1 1 #> 1286 TTGGGTACACAGCCTG-1 1 #> 1287 TTGGTTTGTCTTCGAA-1 1 #> 1288 TTGGTTTTCAGGTAAA-1 1 #> 1289 TTGGTTTTCGTCGGGT-1 1 #> 1290 TTGTGGAAGTGCAGCA-1 1 #> 1291 TTGTGGAAGTGGTGAC-1 1 #> 1292 TTGTTGTAGAGTGTGC-1 2 #> 1293 TTGTTGTAGCGTCGAA-1 1 #> 1294 TTGTTGTAGGATATGT-1 1 #> 1295 TTGTTGTGTAGCTAAA-1 1 #> 1296 TTGTTGTTCGGAAACG-1 1 #> 1297 TTGTTTGAGACAACAT-1 1 #> 1298 TTGTTTGGTCGTCAGC-1 1 #> 1299 TTGTTTGTCCGTTTCG-1 1 #> 1300 TTTACCAGTGCACGCT-1 1 #> 1301 TTTACCAGTTAGGGAC-1 1 #> 1302 TTTACGTCAGGGAGAG-1 1 #> 1303 TTTACTGAGGTACAGC-1 1 #> 1304 TTTACTGCACTCCGAG-1 1 #> 1305 TTTACTGCATCCTATT-1 1 #> 1306 TTTACTGCATGAGGGT-1 1 #> 1307 TTTACTGGTCATCTAG-1 1 #> 1308 TTTAGTCGTCGGTGAA-1 1 #> 1309 TTTCAGTGTCGGTGTC-1 1 #> 1310 TTTCAGTGTTCATCTT-1 2 #> 1311 TTTCATGCAAACTAAG-1 1 #> 1312 TTTCATGTCGCTGTCT-1 1 #> 1313 TTTCCTCAGATGTAGT-1 1 #> 1314 TTTCCTCCAGAATTCC-1 1 #> 1315 TTTCCTCGTCTAACGT-1 1 #> 1316 TTTCGATCACTTGTCC-1 1 #> 1317 TTTGACTTCTCTATAC-1 2 #> 1318 TTTGTTGAGGCACGAT-1 1  library(GenomicAlignments)  bam_fn <- raer_example(\"5k_neuron_mouse_xf25_1pct_cbsort.bam\") build_tag_index(bam_fn) #> [1] \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_xf25_1pct_cbsort.bam.bri\"  cbs <- c(\"AGGATAATCTCAGAAC-1\", \"TTCGATTTCCCGAGGT-1\") bam_out <- get_tag_bam(bam_fn, barcodes = cbs) readGAlignments(bam_out, param = ScanBamParam(tag = \"CB\")) #> GAlignments object with 7 alignments and 1 metadata column: #>       seqnames strand       cigar    qwidth     start       end     width #>          <Rle>  <Rle> <character> <integer> <integer> <integer> <integer> #>   [1]        2      -       1S90M        91       576       665        90 #>   [2]        2      -         91M        91       595       685        91 #>   [3]        2      -       85M6S        91       618       702        85 #>   [4]        2      -      73M18S        91       626       698        73 #>   [5]        2      -      74M17S        91       629       702        74 #>   [6]        6      - 62M1D16M13S        91       270       348        79 #>   [7]        6      - 48M1I13M29S        91       321       381        61 #>           njunc |                 CB #>       <integer> |        <character> #>   [1]         0 | TTCGATTTCCCGAGGT-1 #>   [2]         0 | AGGATAATCTCAGAAC-1 #>   [3]         0 | AGGATAATCTCAGAAC-1 #>   [4]         0 | AGGATAATCTCAGAAC-1 #>   [5]         0 | TTCGATTTCCCGAGGT-1 #>   [6]         0 | TTCGATTTCCCGAGGT-1 #>   [7]         0 | AGGATAATCTCAGAAC-1 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome"}]
