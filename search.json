[{"path":"https://rnabioco.github.io/raer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 raer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introducing the raer package","text":"raer (RNA Adenosine editing R) package provides tools characterize --editing single cell bulk RNA-sequencing datasets. novel known editing sites can detected quantified beginning BAM alignment files. ’s core raer package uses pileup routines HTSlib C library (Bonfield et al. (2021)) identify candidate RNA editing sites, leverages annotation resources Bioconductor ecosystem characterize identify high-confidence RNA editing sites. demonstrate use raer package ) quantify known RNA editing droplet scRNA-seq dataset, b) identify editing sites condition specific editing bulk RNA-seq data, c) predict novel editing sites bulk RNA-seq.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"characterizing-rna-editing-sites-in-scrna-seq-data","dir":"Articles","previous_headings":"","what":"Characterizing RNA editing sites in scRNA-seq data","title":"Introducing the raer package","text":"use raer package examine RNA editing droplet-based single cell RNA-seq data. example examine scRNA-seq dataset human PBMC cells provided 10x Genomics. single cell data aligned processed using 10x Genomics cellranger pipeline. PBMC scRNA-seq dataset 10x Genomics, along needed files downloaded cached using pbmc_10x()raerdata ExperimentHub package. vignette, BAM file subset retain 2 million alignments overlap human RNA editing sites chromosome 16. pbmc_10x() returns list containing BamFile object, GRanges object known RNA editing sites REDIportal database, SingleCellExperiment populated gene expression data cell type annotations.","code":"library(raer) library(raerdata) library(scater) library(SingleCellExperiment) library(TxDb.Hsapiens.UCSC.hg38.knownGene) library(AnnotationHub) library(SNPlocs.Hsapiens.dbSNP144.GRCh38) library(ComplexHeatmap) pbmc <- pbmc_10x()  pbmc_bam <- pbmc$bam editing_sites <- pbmc$sites sce <- pbmc$sce plotUMAP(sce, colour_by = \"celltype\")"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"specifying-sites-to-quantify","dir":"Articles","previous_headings":"Characterizing RNA editing sites in scRNA-seq data","what":"Specifying sites to quantify","title":"Introducing the raer package","text":"Next ’ll select editing sites query. analysis use RNA editing sites cataloged REDIportal database Mansi et al. (2021). sites quantify specified using custom formatted GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named REF ALT containing reference alternate base query. case interested ->editing, set ref alt G. Note REF ALT bases reference strand. - strand interval bases complement + strand bases. Also note bases can stored traditional character vectors Rle() objects save memory.","code":"editing_sites ## GRanges object with 15638648 ranges and 0 metadata columns: ##              seqnames    ranges strand ##                 <Rle> <IRanges>  <Rle> ##          [1]     chr1     87158      - ##          [2]     chr1     87168      - ##          [3]     chr1     87171      - ##          [4]     chr1     87189      - ##          [5]     chr1     87218      - ##          ...      ...       ...    ... ##   [15638644]     chrY  56885715      + ##   [15638645]     chrY  56885716      + ##   [15638646]     chrY  56885728      + ##   [15638647]     chrY  56885841      + ##   [15638648]     chrY  56885850      + ##   ------- ##   seqinfo: 44 sequences from hg38 genome; no seqlengths editing_sites$REF <- Rle(\"A\") editing_sites$ALT <- Rle(\"G\") editing_sites ## GRanges object with 15638648 ranges and 2 metadata columns: ##              seqnames    ranges strand |   REF   ALT ##                 <Rle> <IRanges>  <Rle> | <Rle> <Rle> ##          [1]     chr1     87158      - |     A     G ##          [2]     chr1     87168      - |     A     G ##          [3]     chr1     87171      - |     A     G ##          [4]     chr1     87189      - |     A     G ##          [5]     chr1     87218      - |     A     G ##          ...      ...       ...    ... .   ...   ... ##   [15638644]     chrY  56885715      + |     A     G ##   [15638645]     chrY  56885716      + |     A     G ##   [15638646]     chrY  56885728      + |     A     G ##   [15638647]     chrY  56885841      + |     A     G ##   [15638648]     chrY  56885850      + |     A     G ##   ------- ##   seqinfo: 44 sequences from hg38 genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"quantifying-sites-in-single-cells-using-pileup_cells","dir":"Articles","previous_headings":"Characterizing RNA editing sites in scRNA-seq data","what":"Quantifying sites in single cells using pileup_cells","title":"Introducing the raer package","text":"pileup_cells() quantifies edited non-edited UMI counts per cell barcode, organizes site counts SingleCellExperiment object. pileup_cells() accepts FilterParam() object specifies parameters multiple read-level site-level filtering processing options. Note pileup_cells() strand sensitive default, important ensure strand input sites correctly annotated, library-type set correctly strandedness sequencing library. 10x Genomics data, library type set fr-second-strand, indicating strand BAM alignments strand RNA. See quantifying smart-seq scRNA-seq libraries example using pileup_cells() handle unstranded data data libraries produce 1 BAM file cell. exclude duplicate reads derived PCR, pileup_cells() can use UMI sequence, supplied via umi_tag argument, count 1 read CB-UMI pair editing site position. Note however default bam_flags argument FilterParam class set include duplicate reads using pileup_cells(). Droplet single cell libraries produce multiple cDNA fragments single reverse transcription event. cDNA fragments different alignment positions due fragmentation despite derived single RNA molecule. scRNA-seq data processed cellranger 10x Genomics set “primary alignment” bam flag every read except one read UMI. duplicates removed based bam flag, 1 representative fragment single UMI examined, exclude many valid regions. reduce processing time many functions raer package operate parallel across multiple chromosomes. enable parallel processing, BiocParallel backend can supplied via BPPARAM argument (e.g. MultiCoreParam()). outputs pileup_cells() SingleCellExperiment object populated nRef nAlt assays containing base counts reference (unedited) alternate (edited) alleles position. sparseMatrices also written files, directory specified output_directory, can loaded R using read_sparray() function. Next ’ll filter single cell editing dataset find sites editing event least 5 cells add editing counts gene expression SingleCellExperiment altExp(). editing sites added gene expression SingleCellExperiment can use plotting methods previously developed single cell analysis. ’ll visualize editing sites highest edited read counts.      Alternatively can view top edited sites Heatmap, showing average number edited reads per site cell type.  raer provides additional tools examine cell type specific editing. find_scde_sites() perform statistical testing identify sites different editing frequencies clusters/cell types. calc_scAEI() calculate Alu Editing Index (AEI) metric single cells. editing sites interest known, recommend following approach. First, treat single cell data bulk RNA-seq experiment, follow bulk RNA-seq workflow identify putative editing sites. query sites single cell mode using pileup_cells()","code":"outdir <- file.path(tempdir(), \"sc_edits\") cbs <- colnames(sce)  params <- FilterParam(min_mapq = 255, # required alignment MAPQ score                       library_type = \"fr-second-strand\", #library type                       min_variant_reads = 1)  e_sce <- pileup_cells(     bamfile = pbmc_bam,     sites = editing_sites,     cell_barcodes = cbs,     output_directory = outdir,     cb_tag = \"CB\",     umi_tag = \"UB\",      param = params ) e_sce ## class: SingleCellExperiment  ## dim: 3849 500  ## metadata(0): ## assays(2): nRef nAlt ## rownames(3849): site_chr16_83540_1_AG site_chr16_83621_1_AG ... ##   site_chr16_31453268_2_AG site_chr16_31454303_2_AG ## rowData names(2): REF ALT ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(0): ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): dir(outdir) ## [1] \"barcodes.txt.gz\" \"counts.mtx.gz\"   \"sites.txt.gz\" read_sparray(file.path(outdir, \"counts.mtx.gz\"),              file.path(outdir, \"sites.txt.gz\"),              file.path(outdir, \"barcodes.txt.gz\")) ## class: SingleCellExperiment  ## dim: 3849 500  ## metadata(0): ## assays(2): nRef nAlt ## rownames(3849): site_chr16_83540_1_AG site_chr16_83621_1_AG ... ##   site_chr16_31453268_2_AG site_chr16_31454303_2_AG ## rowData names(2): REF ALT ## colnames(500): TGTTTGTCAGTTAGGG-1 ATCTCTACAAGCTACT-1 ... ##   GGGCGTTTCAGGACGA-1 CTATAGGAGATTGTGA-1 ## colData names(0): ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): e_sce <- e_sce[rowSums(assays(e_sce)$nAlt > 0) >= 5, ] e_sce <- calc_edit_frequency(e_sce, edit_from = \"Ref\", edit_to = \"Alt\", replace_na = FALSE) altExp(sce) <- e_sce[, colnames(sce)] to_plot <- rownames(altExp(sce))[order(rowSums(assay(altExp(sce), \"nAlt\")), decreasing = TRUE)]  lapply(to_plot[1:5], function(x) {     plotUMAP(sce, colour_by = x, by_exprs_values = \"nAlt\") }) ## [[1]] ##  ## [[2]] ##  ## [[3]] ##  ## [[4]] ##  ## [[5]] altExp(sce)$celltype <- sce$celltype  plotGroupedHeatmap(altExp(sce),     features = to_plot[1:25],     group = \"celltype\",     exprs_values = \"nAlt\" )"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"ss2","dir":"Articles","previous_headings":"Characterizing RNA editing sites in scRNA-seq data","what":"Quantifying sites in Smart-seq libaries","title":"Introducing the raer package","text":"pileup_cells() can also process Smart-seq style single cell libraries. datasets typically store data cell separate BAM files library type alignments generally unstranded. process datasets library-type set unstranded, reference editing sites need reported + strand. example, editing sites minus strand need complemented (set T -> C rather -> G). Additionally umi_tag cb_tag arguments set follows disable UMI cell barcode detection.","code":"# Note these steps are not run  is_minus <- strand(editing_sites) == \"-\" editing_sites[is_minus]$REF <- \"T\"  editing_sites[is_minus]$ALT <- \"C\" strand(editing_sites[is_minus]) <- \"+\"  vector_of_bam_files <- c(\"cell1.bam\", \"cell2.bam\", \"cell3.bam\") vector_of_cell_ids <- c(\"cell1\", \"cell2\", \"cell3\")  pileup_cells(bamfiles = vector_of_bam_files,              cell_barcodes = vector_of_cell_ids,               sites = editing_sites,               umi_tag = NULL,  # no UMI tag in most smart-seq libraries              cb_tag = NULL)   # no cell barcode in most smart-seq libraries"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"bulk","dir":"Articles","previous_headings":"","what":"Quantifying RNA editing sites in bulk RNA-Seq","title":"Introducing the raer package","text":"Next perform reanalysis published bulk RNA-seq dataset, GSE99249, consists ADAR1 mutants control human cell lines, conditionally treated Interferon-Beta. examine data two genotypes, ADAR1 WT KO, treated Ifn-B, triplicate samples. Aligned BAM files necessary files preprocessed vignette available using GSE99249() raerdata package. Calling GSE99249() downloaded cache necessary files return list containing data. bams contains vector BamFile objects paths BAM file. BAM files subset full BAM files, containing alignments chromosome 18. quantify editing sites need FASTA file compare read alignments reference sequence. space reasons ’ll use FASTA file containing chromosome 18 demo. use database known human editing sites REDIPortal, processing chr18.","code":"ifnb <- GSE99249() names(ifnb) ## [1] \"bams\"  \"fasta\" \"sites\" bam_files <- ifnb$bams names(bam_files) ## [1] \"SRR5564260\" \"SRR5564261\" \"SRR5564269\" \"SRR5564270\" \"SRR5564271\" ## [6] \"SRR5564277\" fafn <- ifnb$fasta editing_sites <- ifnb$sites chr_18_editing_sites <- keepSeqlevels(editing_sites, \"chr18\", pruning.mode=\"coarse\")"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"generate-editing-site-read-counts-using-pileup_sites","dir":"Articles","previous_headings":"Quantifying RNA editing sites in bulk RNA-Seq","what":"Generate editing site read counts using pileup_sites","title":"Introducing the raer package","text":"pileup_sites() function process BAM files calculate base counts supplied position. FilterParam() used specify parameters exclude reads bases based commonly used filters detecting RNA-editing events. Specific regions can also queried using region argument accepts samtools style region specification string (e.g. chr chr:start-end). Pileup data stored RangedSummarizedExperiment object facilitates comparisons across samples conveniently stores genomic coordinate information. rowData() rowRanges() slots populated reference base (REF) information related editing site, similarly colData() slot can used store sample metadata. base counts information stored different assays within object. REF ALT bases base count data provided stand specific fashion depending supplied library-type parameter. REF ALT bases reference strand. Next ’ll add sample information needed identify sites differential editing frequencies across genotypes.","code":"fp <- FilterParam(     only_keep_variants = TRUE,        # only report sites with variants     trim_5p = 5,                      # bases to remove from 5' or 3' end      trim_3p = 5,     min_base_quality = 30,           # minimum base quality score     min_mapq = 255,                  # minimum MAPQ read score     library_type = \"fr-first-strand\", # library type     min_splice_overhang = 10          # minimum required splice site overhang )  rse <- pileup_sites(bam_files,     fasta = fafn,     sites = chr_18_editing_sites,     chroms = \"chr18\",     param = fp )  rse ## class: RangedSummarizedExperiment  ## dim: 6192 6  ## metadata(0): ## assays(7): ALT nRef ... nC nG ## rownames(6192): site_chr18_178100_1 site_chr18_184553_1 ... ##   site_chr18_80172518_2 site_chr18_80174441_2 ## rowData names(4): REF rpbz vdb sor ## colnames(6): SRR5564260 SRR5564261 ... SRR5564271 SRR5564277 ## colData names(1): sample assays(rse) ## List of length 7 ## names(7): ALT nRef nAlt nA nT nC nG assay(rse, \"nA\")[1:5, ] ##                     SRR5564260 SRR5564261 SRR5564269 SRR5564270 ## site_chr18_178100_1          2          0          0          1 ## site_chr18_184553_1          0          1          1          2 ## site_chr18_184659_1          2          0          1          1 ## site_chr18_184747_1          1          4          2          4 ## site_chr18_185203_1          1          0          1          1 ##                     SRR5564271 SRR5564277 ## site_chr18_178100_1          1          2 ## site_chr18_184553_1          3          3 ## site_chr18_184659_1          2          1 ## site_chr18_184747_1          3          2 ## site_chr18_185203_1          1          0 assay(rse, \"nG\")[1:5, ] ##                     SRR5564260 SRR5564261 SRR5564269 SRR5564270 ## site_chr18_178100_1          0          0          0          0 ## site_chr18_184553_1          0          0          0          0 ## site_chr18_184659_1          0          0          0          0 ## site_chr18_184747_1          0          0          0          0 ## site_chr18_185203_1          0          0          0          0 ##                     SRR5564271 SRR5564277 ## site_chr18_178100_1          1          0 ## site_chr18_184553_1          1          0 ## site_chr18_184659_1          1          0 ## site_chr18_184747_1          0          1 ## site_chr18_185203_1          0          0 colData(rse)$treatment <- \"Interferon beta\" colData(rse)$genotype <- factor(rep(c(\"ADAR1KO\",\"Wildtype\"), each = 3)) colData(rse) ## DataFrame with 6 rows and 3 columns ##                 sample       treatment genotype ##            <character>     <character> <factor> ## SRR5564260  SRR5564260 Interferon beta ADAR1KO  ## SRR5564261  SRR5564261 Interferon beta ADAR1KO  ## SRR5564269  SRR5564269 Interferon beta ADAR1KO  ## SRR5564270  SRR5564270 Interferon beta Wildtype ## SRR5564271  SRR5564271 Interferon beta Wildtype ## SRR5564277  SRR5564277 Interferon beta Wildtype"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"prepare-for-differential-editing","dir":"Articles","previous_headings":"Quantifying RNA editing sites in bulk RNA-Seq","what":"Prepare for differential editing","title":"Introducing the raer package","text":"raer provides calc_edit_frequency function calculate editing percentage read depth position. drop = TRUE argument also exclude non-adenosine sites. editing frequencies used differential editing analysis, conducted using raw counts, however useful filtering visualization. calc_edit_frequency add two additional assays object, editing frequency (edit_freq) read depth, computed based edit_to edit_from counts. ’ll next filter exclude low frequency editing events. analysis require editing site shows editing least 1 sample least 5 counts sample. object filtered, transform alternative data structure differential editing analysis contains assay read counts ALT REF alleles single matrix.","code":"rse <- calc_edit_frequency(rse,     edit_from = \"A\",     edit_to = \"G\",     drop = TRUE ) has_editing <- rowSums(assay(rse, \"edit_freq\") > 0) >= 1 has_depth <- rowSums(assay(rse, \"depth\") >= 5) == ncol(rse)  rse <- rse[has_editing & has_depth, ] rse ## class: RangedSummarizedExperiment  ## dim: 612 6  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(612): site_chr18_204626_1 site_chr18_212426_1 ... ##   site_chr18_79984359_2 site_chr18_79984760_2 ## rowData names(4): REF rpbz vdb sor ## colnames(6): SRR5564260 SRR5564261 ... SRR5564271 SRR5564277 ## colData names(5): sample treatment genotype n_sites edit_idx deobj <- make_de_object(rse, min_prop = 0.05, min_samples = 3)  assay(deobj, \"counts\")[1:3, c(1,7,2,8)] ##                     SRR5564260_ref SRR5564260_alt SRR5564261_ref ## site_chr18_691546_2              8              0              6 ## site_chr18_691578_2              8              0              7 ## site_chr18_692372_2              6              0              9 ##                     SRR5564261_alt ## site_chr18_691546_2              0 ## site_chr18_691578_2              0 ## site_chr18_692372_2              0"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing","dir":"Articles","previous_headings":"Quantifying RNA editing sites in bulk RNA-Seq","what":"Run differential editing","title":"Introducing the raer package","text":"stage, can use object perform differential use find_de_sites() use edgeR DESeq2 identify condition specific editing events. differential editing, use design design <- ~0 + condition:sample + condition:count perform testing compare edited read counts unedited read counts. returns list containing dds object, full results, significant results, model matrix.  anticipated top identified sites greatly reduced editing ADAR1KO samples.","code":"deobj$sample <- factor(deobj$sample) de_results <- find_de_sites(deobj,      test = \"DESeq2\",     sample_col = \"sample\",     condition_col = \"genotype\",     condition_control = \"Wildtype\",     condition_treatment = \"ADAR1KO\" ) de_results$sig_results[1:5, ] ##                        baseMean log2FoldChange     lfcSE      stat ## site_chr18_23296417_2 15.500000      -2.450652 0.8459822 -2.896813 ## site_chr18_32070144_1  6.666667      -2.631946 1.0760283 -2.445983 ## site_chr18_21632030_1 10.000000      -3.377617 1.4959882 -2.257783 ## site_chr18_21631237_1  6.666667      -3.381984 1.5541279 -2.176130 ## site_chr18_35263230_2  9.333333      -3.403508 1.4894626 -2.285057 ##                            pvalue        padj ## site_chr18_23296417_2 0.003769742 0.008216103 ## site_chr18_32070144_1 0.014445798 0.024557856 ## site_chr18_21632030_1 0.023959185 0.036474262 ## site_chr18_21631237_1 0.029545546 0.044059148 ## site_chr18_35263230_2 0.022309459 0.035633191 top_sites <- rownames(de_results$sig_results)[1:20]  Heatmap(assay(rse, \"edit_freq\")[top_sites, ],          name = \"editing frequency\",         column_labels = paste0(rse$genotype, \"-\", rse$treatment) )"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"examine-overall-editing-activites-using-the-alu-editing-index","dir":"Articles","previous_headings":"Quantifying RNA editing sites in bulk RNA-Seq","what":"Examine overall editing activites using the Alu Editing Index","title":"Introducing the raer package","text":"studies informative assess overall ADAR editing activity addition examining individual editing sites. Alu Editing Index (AEI), developed Roth, Levanon, Eisenberg (2019), metric summarizes amount editing occurring ALU elements account vast majority --editing (> 99%) humans. raer provides calc_AEI(), based approach, calculate AEI metric. Many parameters used pileup_sites() available calc_AEI(). First use AnnotationHub package obtain coordinates ALU elements human genome. example examine subset ALUs chr18. also use SNPlocs package, based dbSNP database, exclude SNPs overlapping ALU elements AEI calculation. SNP coordinates NCBI based, whereas ALU elements based hg38, therefore convert two needed obtain SNP ALU element coordinates based hg38. calc_AEI() returns matrix containing AEI calculated allelic combinations detailed table containing values chromosome.  AEI Wildtype samples highest --G, sharply reduced ADAR1KO samples expected.","code":"ah <- AnnotationHub() rmsk_hg38 <- ah[[\"AH99003\"]]  alus <- rmsk_hg38[rmsk_hg38$repFamily == \"Alu\", ] alus <- alus[seqnames(alus) == \"chr18\", ] alus <- keepStandardChromosomes(alus)  alus <- alus[1:1000, ]  seqlevelsStyle(alus) <- \"NCBI\" genome(alus) <- \"GRCh38.p2\"  alu_snps <- get_overlapping_snps(alus, SNPlocs.Hsapiens.dbSNP144.GRCh38)  seqlevelsStyle(alu_snps) <- \"UCSC\" alu_snps[1:3, ] ## UnstitchedGPos object with 3 positions and 0 metadata columns: ##       seqnames       pos strand ##          <Rle> <integer>  <Rle> ##   [1]    chr18     21651      * ##   [2]    chr18     21654      * ##   [3]    chr18     21667      * ##   ------- ##   seqinfo: 25 sequences (1 circular) from hg38 genome seqlevelsStyle(alus) <- \"UCSC\" alus[1:3, ] ## GRanges object with 3 ranges and 11 metadata columns: ##       seqnames      ranges strand |   swScore  milliDiv  milliDel ##          <Rle>   <IRanges>  <Rle> | <integer> <numeric> <numeric> ##   [1]    chr18 21645-21819      + |      1319       114         0 ##   [2]    chr18 26052-26327      + |      1539       199         7 ##   [3]    chr18 31708-32021      + |      2192       140         0 ##        milliIns  genoLeft     repName    repClass   repFamily  repStart ##       <numeric> <integer> <character> <character> <character> <integer> ##   [1]         0 -80351466      AluSq2        SINE         Alu       136 ##   [2]         0 -80346958       AluJr        SINE         Alu         1 ##   [3]         3 -80341264       AluSp        SINE         Alu         1 ##          repEnd   repLeft ##       <integer> <integer> ##   [1]       310        -3 ##   [2]       278       -34 ##   [3]       313         0 ##   ------- ##   seqinfo: 25 sequences (1 circular) from hg38 genome alu_index <- calc_AEI(bam_files,                        fasta = fafn,                        snp_db = alu_snps,                       alu_ranges = alus,                        param = fp) names(alu_index) ## [1] \"AEI\"           \"AEI_per_chrom\" Heatmap(alu_index$AEI,          name = \"AEI\",         row_labels = rse$genotype[match(rownames(alu_index$AEI), rse$sample)] )"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"novel-rna-editing-site-detection","dir":"Articles","previous_headings":"","what":"Novel RNA editing site detection","title":"Introducing the raer package","text":"Next demonstrate identify novel RNA editing sites using raer package. analysis published RNA-seq whole genome sequencing dataset analyzed. High coverage whole-genome sequencing conducted ERR262997 along paired-end RNA-seq SRR1258218 human cell line (NA12878). Aligned BAM files, genome fasta file, GRanges object containing SNPs corresponding first 1Mb region chr4 prepared vignette can downloaded cached using NA12878(). Additionally use following additional annotation resources: database known SNPs, example SNPlocs.Hsapiens.dbSNP155.GRCh38 package. Due space memory constraints vignette examine SNPs first 1Mb region chr4. TxDb.Hsapiens.UCSC.hg38.knownGene, database transcript models. Alternatively can generated .gtf file using makeTxDbFromGRanges() GenomicFeatures package. RepeatMasker annotations, can obtained AnnotationHub() hg38, shown bulk RNA-seq tutorial. pileup_sites() function accept multiple bam files, supply one RNA-seq, one whole genome sequencing. subset filtering parameters (FilterParam()) can accept multiple arguments matched input bam files. allows us distinct settings WGS RNA-seq BAM files. Next filter keep sites variant RNA-seq, variant DNA-seq, minimum 5 reads covering site DNA-seq. DNA-seq data unstranded, therefore reported “+” strand whereas RNA-seq data reported expressing RNA strand. therefore use subsetByOverlaps(..., ignore.strand = TRUE) retain sites passing DNA-seq based filters independent strand. Next filter remove multiallelic sites. sites stored comma-separated strings ALT assay (e.g. G,C). Non-variant sites stored -. filter_multiallelic() remove sites multiple variants samples present summarizedExperiment object. add new column rowData() indicate variant site, calculate edit_freq assay variant allele frequencies sample. Next ’ll remove sites simple repeat regions. add repeat information rowData() using annot_from_gr() function. Next ’ll remove sites adjacent sites different variant types. example ->G variant located proximal C->T variant variants removed. Next, ’ll annotate site known SNP remove known SNPs. using SNPlocs package can use annot_snps() function, also allows one compare variant base SNP variant base. use annot_from_gr() function annotate using chr4snps object coarsely remove editing sites overlapping position SNP. Lastly, ’ll filter edit sites require editing frequency > 0.05 least 2 reads support editing site. filtering approach obtain set putative editing sites. specificity filtering can estimated examining number --G changes relative variants. --RNA editing common types editing (e.g. C->U editing APOBEC enzymes) human datasets majority variants --G. vignette data identified sites --G. Finally set sites identified, additional packges bioconductor ecosystem, VariantAnnotation package, can used determine genomic context potential molecular consequences editing event.","code":"rna_wgs <- NA12878() names(rna_wgs) ## [1] \"bams\"  \"fasta\" \"snps\" txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene chr4snps <- rna_wgs$snps bams <- rna_wgs$bams names(bams) <- c(\"rna\", \"dna\") fp <- FilterParam(     min_depth = 1,               # minimum read depth across all samples     min_base_quality = 30,       # minimum base quality     min_mapq = c(255, 30),       # minimum MAPQ for each bam file     library_type = c(\"fr-first-strand\", \"unstranded\"), # library-type for each bam file     trim_5p = 5,                 # bases to trim from 5' end of alignment     trim_3p = 5,                 # bases to trim from 3' end of alignment     indel_dist = 4,              # ignore read if contains an indel within distance from site     min_splice_overhang = 10,    # required alignment overhang in order to count read with splice      read_bqual = c(0.25, 20),    # minimum fraction of the read (0.25) that must have base quality of (20)     only_keep_variants = c(TRUE, FALSE), # report site if rnaseq bam has variant     report_multiallelic = FALSE, # do not report sites with multiple variant alleles )  rse <- pileup_sites(bams,                     fasta = rna_wgs$fasta,                     chroms = \"chr4\",                     param = fp )  rse ## class: RangedSummarizedExperiment  ## dim: 1035 2  ## metadata(0): ## assays(7): ALT nRef ... nC nG ## rownames(1035): site_chr4_40244_2 site_chr4_44338_2 ... ##   site_chr4_995145_1 site_chr4_998975_1 ## rowData names(4): REF rpbz vdb sor ## colnames(2): rna dna ## colData names(1): sample to_keep <- (assay(rse, \"nRef\")[, \"dna\"] >= 5 & assay(rse, \"ALT\")[, \"dna\"] == \"-\") rse <- subsetByOverlaps(rse, rse[to_keep, ], ignore.strand = TRUE) nrow(rse) ## [1] 339 rse <- filter_multiallelic(rse) rse <- calc_edit_frequency(rse) rowData(rse) ## DataFrame with 260 rows and 5 columns ##                            REF      rpbz       vdb       sor         ALT ##                    <character> <numeric> <numeric> <numeric> <character> ## site_chr4_124551_1           G -1.138153       Inf   1.42563           A ## site_chr4_124611_1           T -0.266758       Inf   1.60944           G ## site_chr4_124781_1           T -1.656293       Inf   1.45499           G ## site_chr4_124820_1           C -0.600205       Inf   1.51787           A ## site_chr4_124940_1           C -0.754898       Inf   1.24398           G ## ...                        ...       ...       ...       ...         ... ## site_chr4_992535_1           G -0.661008       Inf  1.499465           T ## site_chr4_993342_1           A  0.802887       Inf  0.260455           G ## site_chr4_994239_1           A  1.412126       Inf  1.425634           G ## site_chr4_995144_1           A  0.387298       Inf  1.491655           G ## site_chr4_995145_1           A  0.522233       Inf  1.464766           G # subset both to chromosome 4 to avoid warning about different seqlevels seqlevels(rse, pruning.mode = \"coarse\") <- \"chr4\" seqlevels(rmsk_hg38, pruning.mode = \"coarse\") <- \"chr4\"  rse <- annot_from_gr(rse, rmsk_hg38, cols_to_map = c(c(\"repName\", \"repClass\", \"repFamily\")))  rowData(rse)[c(\"repName\", \"repFamily\")] ## DataFrame with 260 rows and 2 columns ##                    repName repFamily ##                      <Rle>     <Rle> ## site_chr4_124551_1      NA        NA ## site_chr4_124611_1      NA        NA ## site_chr4_124781_1      NA        NA ## site_chr4_124820_1      NA        NA ## site_chr4_124940_1      NA        NA ## ...                    ...       ... ## site_chr4_992535_1      NA        NA ## site_chr4_993342_1      NA        NA ## site_chr4_994239_1   AluJr       Alu ## site_chr4_995144_1      NA        NA ## site_chr4_995145_1      NA        NA rse <- rse[!rowData(rse)$repFamily %in% c(\"Simple_repeat\", \"Low_complexity\")] seqlevels(txdb, pruning.mode = \"coarse\") <- \"chr4\" rse <- filter_clustered_variants(rse, txdb, variant_dist = 100) rse ## class: RangedSummarizedExperiment  ## dim: 159 2  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(159): site_chr4_124940_1 site_chr4_126885_1 ... ##   site_chr4_995144_1 site_chr4_995145_1 ## rowData names(8): REF rpbz ... repClass repFamily ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx rse <- annot_from_gr(rse, chr4snps, \"name\") rowData(rse)[c(\"name\")] ## DataFrame with 159 rows and 1 column ##                            name ##                           <Rle> ## site_chr4_124940_1 rs1361822847 ## site_chr4_126885_1           NA ## site_chr4_126955_1           NA ## site_chr4_133310_1           NA ## site_chr4_133971_1  rs998760640 ## ...                         ... ## site_chr4_992535_1 rs1714447589 ## site_chr4_993342_1           NA ## site_chr4_994239_1           NA ## site_chr4_995144_1 rs1217215121 ## site_chr4_995145_1           NA rse <- rse[is.na(rowData(rse)$name), ] rse ## class: RangedSummarizedExperiment  ## dim: 100 2  ## metadata(0): ## assays(9): ALT nRef ... depth edit_freq ## rownames(100): site_chr4_126885_1 site_chr4_126955_1 ... ##   site_chr4_994239_1 site_chr4_995145_1 ## rowData names(9): REF rpbz ... repFamily name ## colnames(2): rna dna ## colData names(3): sample n_sites edit_idx to_keep <- assay(rse, \"edit_freq\")[, 1] > 0.05 rse <- rse[to_keep, ]  rse <- rse[assay(rse, \"nAlt\")[, 1] >= 2] rowRanges(rse) ## GRanges object with 10 ranges and 9 metadata columns: ##                      seqnames    ranges strand |         REF      rpbz ##                         <Rle> <IRanges>  <Rle> | <character> <numeric> ##   site_chr4_126885_1     chr4    126885      + |           A  0.342818 ##   site_chr4_134353_1     chr4    134353      + |           A -0.264728 ##   site_chr4_348458_1     chr4    348458      + |           A -0.252166 ##   site_chr4_378548_1     chr4    378548      + |           A  1.406115 ##   site_chr4_379540_1     chr4    379540      + |           A -1.949107 ##   site_chr4_379558_1     chr4    379558      + |           A -0.803727 ##   site_chr4_380392_1     chr4    380392      + |           A -0.207575 ##   site_chr4_380573_1     chr4    380573      + |           A -1.918805 ##   site_chr4_778739_2     chr4    778739      - |           A  1.109806 ##   site_chr4_778780_2     chr4    778780      - |           A -1.469323 ##                            vdb       sor         ALT repName repClass ##                      <numeric> <numeric> <character>   <Rle>    <Rle> ##   site_chr4_126885_1 0.7000000  1.061473           G    <NA>     <NA> ##   site_chr4_134353_1 0.4310148  0.252306           G    <NA>     <NA> ##   site_chr4_348458_1 0.8000000  0.168623           G  AluSx1     SINE ##   site_chr4_378548_1 0.2800000  2.833213           G    <NA>     <NA> ##   site_chr4_379540_1 0.2200000  1.243978           G    <NA>     <NA> ##   site_chr4_379558_1 0.0200000  0.446287           G    <NA>     <NA> ##   site_chr4_380392_1 0.5689852  0.910414           G  AluSq2     SINE ##   site_chr4_380573_1 0.1000000  2.285077           G  AluSq2     SINE ##   site_chr4_778739_2 0.1918587  0.604657           G   AluSg     SINE ##   site_chr4_778780_2 0.0490877  2.821974           G   AluSg     SINE ##                      repFamily  name ##                          <Rle> <Rle> ##   site_chr4_126885_1      <NA>  <NA> ##   site_chr4_134353_1      <NA>  <NA> ##   site_chr4_348458_1       Alu  <NA> ##   site_chr4_378548_1      <NA>  <NA> ##   site_chr4_379540_1      <NA>  <NA> ##   site_chr4_379558_1      <NA>  <NA> ##   site_chr4_380392_1       Alu  <NA> ##   site_chr4_380573_1       Alu  <NA> ##   site_chr4_778739_2       Alu  <NA> ##   site_chr4_778780_2       Alu  <NA> ##   ------- ##   seqinfo: 1 sequence from an unspecified genome sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] Rsamtools_2.17.0                         ##  [2] ComplexHeatmap_2.17.0                    ##  [3] SNPlocs.Hsapiens.dbSNP144.GRCh38_0.99.20 ##  [4] BSgenome_1.69.0                          ##  [5] rtracklayer_1.61.1                       ##  [6] Biostrings_2.69.2                        ##  [7] XVector_0.41.1                           ##  [8] AnnotationHub_3.9.2                      ##  [9] BiocFileCache_2.9.1                      ## [10] dbplyr_2.3.4                             ## [11] TxDb.Hsapiens.UCSC.hg38.knownGene_3.18.0 ## [12] GenomicFeatures_1.53.2                   ## [13] AnnotationDbi_1.63.2                     ## [14] scater_1.29.4                            ## [15] ggplot2_3.4.3                            ## [16] scuttle_1.11.2                           ## [17] SingleCellExperiment_1.23.0              ## [18] SummarizedExperiment_1.31.1              ## [19] Biobase_2.61.0                           ## [20] GenomicRanges_1.53.1                     ## [21] GenomeInfoDb_1.37.4                      ## [22] IRanges_2.35.2                           ## [23] S4Vectors_0.39.2                         ## [24] BiocGenerics_0.47.0                      ## [25] MatrixGenerics_1.13.1                    ## [26] matrixStats_1.0.0                        ## [27] raerdata_0.99.2                          ## [28] raer_0.99.14                             ## [29] BiocStyle_2.29.2                         ##  ## loaded via a namespace (and not attached): ##   [1] later_1.3.1                   BiocIO_1.11.0                 ##   [3] bitops_1.0-7                  filelock_1.0.2                ##   [5] tibble_3.2.1                  R.oo_1.25.0                   ##   [7] XML_3.99-0.14                 lifecycle_1.0.3               ##   [9] doParallel_1.0.17             rprojroot_2.0.3               ##  [11] lattice_0.21-8                magrittr_2.0.3                ##  [13] sass_0.4.7                    rmarkdown_2.25                ##  [15] jquerylib_0.1.4               yaml_2.3.7                    ##  [17] httpuv_1.6.11                 DBI_1.1.3                     ##  [19] RColorBrewer_1.1-3            abind_1.4-5                   ##  [21] zlibbioc_1.47.0               purrr_1.0.2                   ##  [23] R.utils_2.12.2                RCurl_1.98-1.12               ##  [25] rappdirs_0.3.3                circlize_0.4.15               ##  [27] GenomeInfoDbData_1.2.10       ggrepel_0.9.3                 ##  [29] irlba_2.3.5.1                 pheatmap_1.0.12               ##  [31] pkgdown_2.0.7                 DelayedMatrixStats_1.23.4     ##  [33] codetools_0.2-19              DelayedArray_0.27.10          ##  [35] xml2_1.3.5                    tidyselect_1.2.0              ##  [37] shape_1.4.6                   farver_2.1.1                  ##  [39] ScaledMatrix_1.9.1            viridis_0.6.4                 ##  [41] GenomicAlignments_1.37.0      jsonlite_1.8.7                ##  [43] GetoptLong_1.0.5              BiocNeighbors_1.19.0          ##  [45] ellipsis_0.3.2                iterators_1.0.14              ##  [47] systemfonts_1.0.4             foreach_1.5.2                 ##  [49] tools_4.3.1                   progress_1.2.2                ##  [51] ragg_1.2.5                    Rcpp_1.0.11                   ##  [53] glue_1.6.2                    gridExtra_2.3                 ##  [55] SparseArray_1.1.12            xfun_0.40                     ##  [57] DESeq2_1.41.11                dplyr_1.1.3                   ##  [59] withr_2.5.1                   BiocManager_1.30.22           ##  [61] fastmap_1.1.1                 fansi_1.0.4                   ##  [63] digest_0.6.33                 rsvd_1.0.5                    ##  [65] R6_2.5.1                      mime_0.12                     ##  [67] textshaping_0.3.6             colorspace_2.1-0              ##  [69] Cairo_1.6-1                   biomaRt_2.57.1                ##  [71] RSQLite_2.3.1                 R.methodsS3_1.8.2             ##  [73] utf8_1.2.3                    generics_0.1.3                ##  [75] data.table_1.14.8             prettyunits_1.2.0             ##  [77] httr_1.4.7                    S4Arrays_1.1.6                ##  [79] pkgconfig_2.0.3               gtable_0.3.4                  ##  [81] blob_1.2.4                    htmltools_0.5.6               ##  [83] bookdown_0.35                 clue_0.3-65                   ##  [85] scales_1.2.1                  png_0.1-8                     ##  [87] knitr_1.44                    rjson_0.2.21                  ##  [89] curl_5.0.2                    cachem_1.0.8                  ##  [91] GlobalOptions_0.1.2           stringr_1.5.0                 ##  [93] BiocVersion_3.18.0            parallel_4.3.1                ##  [95] vipor_0.4.5                   restfulr_0.0.15               ##  [97] desc_1.4.2                    pillar_1.9.0                  ##  [99] vctrs_0.6.3                   promises_1.2.1                ## [101] BiocSingular_1.17.1           beachmat_2.17.16              ## [103] xtable_1.8-4                  cluster_2.1.4                 ## [105] beeswarm_0.4.0                evaluate_0.21                 ## [107] cli_3.6.1                     locfit_1.5-9.8                ## [109] compiler_4.3.1                rlang_1.1.1                   ## [111] crayon_1.5.2                  labeling_0.4.3                ## [113] fs_1.6.3                      ggbeeswarm_0.7.2              ## [115] stringi_1.7.12                viridisLite_0.4.2             ## [117] BiocParallel_1.35.4           munsell_0.5.0                 ## [119] Matrix_1.6-1.1                ExperimentHub_2.9.1           ## [121] hms_1.1.3                     sparseMatrixStats_1.13.4      ## [123] bit64_4.0.5                   KEGGREST_1.41.4               ## [125] shiny_1.7.5                   interactiveDisplayBase_1.39.0 ## [127] memoise_2.0.1                 bslib_0.5.1                   ## [129] bit_4.0.5"},{"path":"https://rnabioco.github.io/raer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Riemondy. Author, maintainer. Kristen Wells-Wrasman. Author. Ryan Sheridan. Contributor. Jay Hesselberth. Contributor. . Copyright holder, funder.","code":""},{"path":"https://rnabioco.github.io/raer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemondy K, Wells-Wrasman K (2023). raer: RNA editing tools R. https://rnabioco.github.io/raer, https://github.com/rnabioco/raer.","code":"@Manual{,   title = {raer: RNA editing tools in R},   author = {Kent Riemondy and Kristen Wells-Wrasman},   year = {2023},   note = {https://rnabioco.github.io/raer, https://github.com/rnabioco/raer}, }"},{"path":"https://rnabioco.github.io/raer/index.html","id":"raer-","dir":"","previous_headings":"","what":"RNA editing tools in R","title":"RNA editing tools in R","text":"raer facilitates analysis RNA adenosine editing Bioconductor ecosystem.","code":""},{"path":"https://rnabioco.github.io/raer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RNA editing tools in R","text":"can install development version raer GitHub : package submitted Bioconductor. accepted, please use BiocManager::install(\"raer\") install package","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version='devel')  BiocManager::install(\"rnabioco/raer\")"},{"path":"https://rnabioco.github.io/raer/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"RNA editing tools in R","text":"raer provides methods compute per site read count summaries BAM alignment files, either known editing sites, detected sites. facilitate comparisons across groups, base count data genomic coordinates stored RangedSummarizedExperiment. FilterParam() class holds multiple options customizing output pileup_sites(). pileup_cells() provides support quantifying editing sites single cell libraries.","code":"library(raer) bam1fn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  bams <- c(\"ko\" = bam1fn, \"wt\" = bam2fn)  rse <- pileup_sites(bams, fafn) suppressMessages(library(SummarizedExperiment)) rse #> class: RangedSummarizedExperiment  #> dim: 1695 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(1695): site_SSR3_1_2 site_SSR3_2_2 ... site_DHFR_517_2 #>   site_DHFR_518_2 #> rowData names(4): REF rpbz vdb sor #> colnames(2): ko wt #> colData names(1): sample assays(rse) #> List of length 7 #> names(7): ALT nRef nAlt nA nT nC nG colData(rse) #> DataFrame with 2 rows and 1 column #>         sample #>    <character> #> ko          ko #> wt          wt assays(rse)$nRef[1:4, ] #>               ko wt #> site_SSR3_1_2 13 12 #> site_SSR3_2_2 14 12 #> site_SSR3_3_2 14 12 #> site_SSR3_4_2 15 12 assays(rse)$nAlt[1:4, ] #>               ko wt #> site_SSR3_1_2  0  0 #> site_SSR3_2_2  0  0 #> site_SSR3_3_2  0  0 #> site_SSR3_4_2  0  0 fp <- FilterParam(     only_keep_variants = TRUE,     library_type = \"fr-first-strand\",     min_depth = 2 )  rse <- pileup_sites(bams, fafn, param = fp) rse #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(2): ko wt #> colData names(1): sample scbam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\") outdir <- tempdir(\"sc_editing\")  editing_sites <- GRanges(     c(         \"2:579:-\",         \"2:625:-\",         \"2:589:-\"     ),     REF = \"A\",     ALT = \"G\" )  cbs <- c(     \"CACCAAACAACAACAA-1\",     \"TATTCCACACCCTCTA-1\",     \"GACCTTCAGTTGTAAG-1\" )  sce <- pileup_cells(scbam_fn,     sites = editing_sites,     cell_barcodes = cbs,     param = fp,     output_directory = outdir ) sce #> class: SingleCellExperiment  #> dim: 3 3  #> metadata(0): #> assays(2): nRef nAlt #> rownames(3): site_2_579_2_AG site_2_589_2_AG site_2_625_2_AG #> rowData names(2): REF ALT #> colnames(3): CACCAAACAACAACAA-1 TATTCCACACCCTCTA-1 GACCTTCAGTTGTAAG-1 #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): assays(sce)$nRef #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>                 CACCAAACAACAACAA-1 TATTCCACACCCTCTA-1 GACCTTCAGTTGTAAG-1 #> site_2_579_2_AG                  0                  0                  1 #> site_2_589_2_AG                  1                  1                  2 #> site_2_625_2_AG                  0                  0                  0 assays(sce)$nAlt #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>                 CACCAAACAACAACAA-1 TATTCCACACCCTCTA-1 GACCTTCAGTTGTAAG-1 #> site_2_579_2_AG                  1                  1                  1 #> site_2_589_2_AG                  0                  0                  0 #> site_2_625_2_AG                  1                  1                  1"},{"path":"https://rnabioco.github.io/raer/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"RNA editing tools in R","text":"Core routines raer implemented using htslib library methods samtools bcftools. raer builds approaches RNA editing detection tools: REDItools Picardi E, Pesole G JACUSA2 Piechotta M et al deNovo-Detect Gabay O et al RNAEditingIndexer Roth SH et al SAILOR Washburn MC et al","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate sites using GRanges object — annot_from_gr","title":"Annotate sites using GRanges object — annot_from_gr","text":"Utility function map annotations GRanges rowData SummarizedExperiment mcols GRanges object. multiple features overlap concatenated comma separated values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate sites using GRanges object — annot_from_gr","text":"","code":"annot_from_gr(obj, gr, cols_to_map, RLE = TRUE, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate sites using GRanges object — annot_from_gr","text":"obj RangedSummarizedExperiment GRanges object gr GRanges annotations map obj cols_to_map character vector columns gr map obj. vector names, names column names output obj RLE TRUE, columns added returned S4Vectors::Rle() vectors reduce memory ... additional arguments pass GenomicRanges::findOverlaps()","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate sites using GRanges object — annot_from_gr","text":"Either SummarizedExperiment GRanges object additional annotations provided supplied GRanges object.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate sites using GRanges object — annot_from_gr","text":"","code":"library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, #>     append, as.data.frame, basename, cbind, colnames, dirname, #>     do.call, duplicated, eval, evalq, get, grep, grepl, #>     intersect, is.unsorted, lapply, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, rank, rbind, rownames, #>     sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians rse_adar_ifn <- mock_rse() gr <- GRanges(rep(c(\"SSR3\", \"SPCS3\"), c(5, 15)),     IRanges(seq(1, 500, by = 25), width = 50),     strand = \"+\" )  gr$feature <- sample(1:100, size = 20) gr$id <- sample(LETTERS, size = 20)  rse <- annot_from_gr(rse_adar_ifn, gr, c(feature_set = \"feature\", \"id\")) rowData(rse) #> DataFrame with 74 rows and 6 columns #>                         REF       rpbz        vdb       sor feature_set #>                 <character>  <numeric>  <numeric> <numeric>       <Rle> #> site_SSR3_102_2           T   1.489645        Inf  1.403164          NA #> site_SSR3_125_2           C   0.356711        Inf  0.165499          NA #> site_SSR3_156_2           C   1.073919        Inf  1.442924          NA #> site_SSR3_176_2           A  -0.387238 0.00686469  1.987570          NA #> site_SSR3_198_2           A   1.040581        Inf  1.483784          NA #> ...                     ...        ...        ...       ...         ... #> site_DHFR_397_2           A -1.5715051        Inf   1.39896          NA #> site_DHFR_399_2           G -0.1203878        Inf   0.09602          NA #> site_DHFR_423_2           T -0.0468703        Inf   1.38985          NA #> site_DHFR_430_2           A -1.5389404        Inf   1.39019          NA #> site_DHFR_513_2           T -0.7160074        Inf   1.38637          NA #>                    id #>                 <Rle> #> site_SSR3_102_2    NA #> site_SSR3_125_2    NA #> site_SSR3_156_2    NA #> site_SSR3_176_2    NA #> site_SSR3_198_2    NA #> ...               ... #> site_DHFR_397_2    NA #> site_DHFR_399_2    NA #> site_DHFR_423_2    NA #> site_DHFR_430_2    NA #> site_DHFR_513_2    NA"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate known SNP positions — annot_snps","title":"Annotate known SNP positions — annot_snps","text":"function annotate GRanges rowRanges SummarizedExperiment SNPs SNP package.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate known SNP positions — annot_snps","text":"","code":"annot_snps(obj, ...)  # S3 method for GRanges annot_snps(   obj,   dbsnp,   chrom = NULL,   col_to_aggr = \"RefSNP_id\",   drop = FALSE,   genome = NULL,   RLE = TRUE,   ... )  # S3 method for SummarizedExperiment annot_snps(obj, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate known SNP positions — annot_snps","text":"obj GRanges SummarizedExperiment  object ... generic, arguments pass specific methods. Unused now. dbsnp SNPlocs package, see available packages BSgenome::available.SNPs() chrom operate specified chromosome col_to_aggr column SNPlocs package add input. multiple SNPs overlap values concatenated comma separated values. drop TRUE, remove sites overlapping SNPs genome BSgenome object, supplied, used provide additional snp_ref_allele snp_alt_alleles columns containing reference alt allele sequences, respect positive strand. Additionally snp sequences checked allele site column named ALT present object. strand site used determine ALT allele needs complemented prior comparing SNP db (always returns sequences w.r.t plus strand). RLE TRUE, columns added returned S4Vectors::Rle() vectors reduce memory","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate known SNP positions — annot_snps","text":"Either GRanges SummarizedExperiment object new column added information col_to_aggr optionally snp_ref_allele, snp_alt_alleles, snp_matches_site annotations.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate known SNP positions — annot_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {     gr <- GRanges(rep(\"22\", 10),         IRanges(             seq(10510077,                 10610077,                 by = 1000             )[1:10],             width = 250         ),         strand = \"+\"     )     genome(gr) <- \"GRCh38.p2\"     annot_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> Loading required package: SNPlocs.Hsapiens.dbSNP144.GRCh38 #> Loading required package: BSgenome #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #> Loading required package: rtracklayer #> Warning: replacing previous import ‘utils::findMatches’ by ‘S4Vectors::findMatches’ when loading ‘SNPlocs.Hsapiens.dbSNP144.GRCh38’ #> GRanges object with 10 ranges and 1 metadata column: #>        seqnames            ranges strand | RefSNP_id #>           <Rle>         <IRanges>  <Rle> |     <Rle> #>    [1]       22 10510077-10510326      + |           #>    [2]       22 10511077-10511326      + | rs4022986 #>    [3]       22 10512077-10512326      + |           #>    [4]       22 10513077-10513326      + |           #>    [5]       22 10514077-10514326      + |           #>    [6]       22 10515077-10515326      + |           #>    [7]       22 10516077-10516326      + |           #>    [8]       22 10517077-10517326      + |           #>    [9]       22 10518077-10518326      + |           #>   [10]       22 10519077-10519326      + |           #>   ------- #>   seqinfo: 1 sequence from GRCh38.p2 genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function perform pileup specified repeat regions return summary AEI metric.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"calc_AEI(   bamfiles,   fasta,   alu_ranges = NULL,   txdb = NULL,   snp_db = NULL,   param = FilterParam(),   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"bamfiles character vector paths indexed bam files. named character vector supplied names used output. fasta fasta filename alu_ranges GRanges regions query calculating AEI, typically ALU repeats. txdb TxDb object, supplied, used subset alu_ranges found overlapping genes. Alternatively GRanges object gene coordinates.  library_type, specified FilterParam, unstranded TxDb used correct strandness relative reference required parameter. snp_db either SNPlocs, GPos, GRanges object. supplied, used exclude polymorphic positions prior calculating AEI. calc_AEI() used many times, one save time first identifying SNPs overlap supplied alu_ranges, passing GRanges snp_db rather supplying known SNPs (see get_overlapping_snps()). param object class FilterParam() specify various filters apply reads sites pileup. BPPARAM BiocParallelParam object specifying parallel options operating chromosomes. verbose report progress chromosome?","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"named list containing: AEI: matrix AEI index values computed allelic combinations, one row supplied bam file. AEI_per_chrom: data.frame containing values computed chromosome","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"suppressPackageStartupMessages(library(Rsamtools))  bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") bams <- c(bamfn, bam2fn) names(bams) <- c(\"ADAR1KO\", \"WT\")  fafn <- raer_example(\"human.fasta\") mock_alu_ranges <- scanFaIndex(fafn)  res <- calc_AEI(bams, fafn, mock_alu_ranges) res$AEI #>                A_C       A_G       A_T       C_A        C_G       C_T #> ADAR1KO 0.00927902 0.1019746 0.0278319 0.1237964 0.00000000 0.1100564 #> WT      0.00000000 2.2985864 0.1292293 0.2142033 0.01650982 0.2635046 #>               G_A        G_C        G_T       T_A        T_C        T_G #> ADAR1KO 0.2364360 0.01247194 0.04986909 0.0108272 0.03247456 0.03247456 #> WT      0.3170769 0.00000000 0.00000000 0.0000000 0.01161980 0.01161980"},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence score for observing editing — calc_confidence","title":"Calculate confidence score for observing editing — calc_confidence","text":"Calculate confidence score based Bayesian inverse probability model described Washburn et al. Cell Reports. 2015, implemented SAILOR pipeline.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence score for observing editing — calc_confidence","text":"","code":"calc_confidence(   se,   edit_to = \"G\",   edit_from = \"A\",   per_sample = FALSE,   exp_fraction = 0.01 )"},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence score for observing editing — calc_confidence","text":"se SummarizedExperiment::SummarizedExperiment containing editing sites edit_to edited base edit_from non-edited base per_sample TRUE, calculate confidence per sample, otherwise edited non-edited counts summed across samples. exp_fraction Numeric, confidence margin parameter ","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence score for observing editing — calc_confidence","text":"SummarizedExperiment::SummarizedExperiment either new assay rowData column named \"confidence\" depending whether confidence calculated per_sample.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate confidence score for observing editing — calc_confidence","text":"Washburn MC, Kakaradov B, Sundararaman B, Wheeler E, Hoon S, Yeo GW, Hundley HA. dsRBP inactive editor ADR-1 utilizes dsRNA binding regulate --RNA editing across C. elegans transcriptome. Cell Rep. 2014 Feb 27;6(4):599-607. doi: 10.1016/j.celrep.2014.01.011. Epub 2014 Feb 6. PMID: 24508457; PMCID: PMC3959997. SAILOR pipeline: https://github.com/YeoLab/sailor","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_confidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence score for observing editing — calc_confidence","text":"","code":"rse_adar_ifn <- mock_rse() calc_confidence(rse_adar_ifn) #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(5): REF rpbz vdb sor confidence #> colnames(2): wt adar1_ko #> colData names(1): sample calc_confidence(rse_adar_ifn, per_sample = TRUE) #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(8): ALT nRef ... nG confidence #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds editing frequencies — calc_edit_frequency","title":"Adds editing frequencies — calc_edit_frequency","text":"Adds editing frequencies existing RangedSummarizedExperiment object (created pileup_sites()). RangedSummarizedExperiment new assay editing frequencies site (edit_freq), depth coverage computed using indicated edited nucleotides (depth) new colData columns number edited sites (n_sites) fraction edits (edit_idx) returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"calc_edit_frequency(   rse,   edit_from = \"A\",   edit_to = \"G\",   drop = FALSE,   replace_na = TRUE,   edit_frequency = 0,   min_count = 1 )"},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds editing frequencies — calc_edit_frequency","text":"rse RangedSummarizedExperiment object created pileup_sites() edit_from correspond nucleotide assay (, C, G, T, Ref, Alt) expect reference. Ex. editing events, . edit_to correspond nucleotide assay (, C, G, T, Ref, Alt)  expect editing site. Ex. editing events, G. drop TRUE, RangedSummarizedExperiment returned retain sites matching specified edit_from edit_to bases. replace_na TRUE, NA NaN editing frequencies coerced 0. edit_frequency edit frequency cutoff used calculating number sites. Set 0 require non-zero editing frequency. number sites stored n_sites colData. min_count minimum number reads required enumerating number editing sites detected.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds editing frequencies — calc_edit_frequency","text":"RangedSummarizedExperiment supplemented edit_freq depth assay.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_edit_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds editing frequencies — calc_edit_frequency","text":"","code":"library(SummarizedExperiment) rse_adar_ifn <- mock_rse() rse <- calc_edit_frequency(rse_adar_ifn) #> ℹ 6 sites had no coverage for calculating editing assay(rse, \"edit_freq\")[1:5, ] #>                        wt adar1_ko #> site_SSR3_102_2 0.0000000        1 #> site_SSR3_125_2 1.0000000        0 #> site_SSR3_156_2 0.0000000        0 #> site_SSR3_176_2 0.6666667        0 #> site_SSR3_198_2 0.0400000        0"},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function examine potential editing sites return summary AEI metric per cell.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"","code":"calc_scAEI(   bamfiles,   sites,   cell_barcodes,   param = FilterParam(),   edit_from = \"A\",   edit_to = \"G\",   output_dir = NULL,   return_sce = FALSE,   ... )  get_scAEI_sites(fasta, genes, alus, edit_from = \"A\", edit_to = \"G\")"},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"bamfiles path BAM file (10x libraries), vector paths BAM files (smart-seq2). Can supplied character vector, BamFile, BamFileList. sites GRanges object produced get_scAEI_sites() containing sites process. cell_barcodes character vector single cell barcodes process. processing multiple BAM files (e.g. smart-seq-2), provide character vector unique identifiers input BAM, name BAM file output files. param object class FilterParam() specify various filters apply reads sites pileup. edit_from correspond base (, C, G, T) expect reference. Ex. editing events, . edit_to correspond base (, C, G, T) expect edited site. Ex. editing events, G. output_dir Output directory nRef nAlt sparseMatrix files. NULL, temporary directory used. return_sce TRUE, data returned SingleCellExperiment, FALSE DataFrame containing computed AEI values returned. ... additional arguments pileup_cells() fasta Path genome fasta file genes GRanges object gene coordinates.Alternatively TxDb object, supplied, used extract gene coordinates. alus GRanges repeat regions query calculating AEI, typically ALU repeats. strand supplied intervals ignored defining repeat regions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"DataFrame containing computed AEI values, count editing events (n_alt), count reference events (n_ref) per cell. return_sce TRUE, SingleCellExperiment returned AEI values stored colData.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_scAEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) in single cells — calc_scAEI","text":"","code":"suppressPackageStartupMessages(library(Rsamtools)) library(GenomicRanges)  bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\") indexBam(bam_fn) #>       /__w/_temp/Library/raer/extdata/5k_neuron_mouse_possort.bam  #> \"/__w/_temp/Library/raer/extdata/5k_neuron_mouse_possort.bam.bai\"   # cell barcodes to query cbs <- c(\"TGTTTGTTCCATCCGT-1\", \"CAACCAACATAATCGC-1\", \"TGGAACTCAAGCTGTT-1\")  # genes used to infer transcribed strand genes_gr <- GRanges(c(     \"2:100-400:-\",     \"2:500-605:-\",     \"2:600-680:+\" ))  # alu intervals alus_gr <-  GRanges(c(     \"2:110-380\",     \"2:510-600\",     \"2:610-670\" ))  # genome fasta file, used to find A bases fa_fn <- raer_example(\"mouse_tiny.fasta\")  # get positions of potential A -> G changes in alus sites <- get_scAEI_sites(fa_fn, genes_gr, alus_gr)  fp <- FilterParam(library_type = \"fr-second-strand\",                   min_mapq = 255) #calc_scAEI(bam_fn, sites, cbs, fp)"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply strand correction using gene annotations — correct_strand","title":"Apply strand correction using gene annotations — correct_strand","text":"Gene annotations used infer likely strand editing sites. function operate unstranded datasets processed using \"unstranded\" library type reports variants respect + strand sites. strand editing site assigned strand overlapping features genes_gr object. Sites -overlap, overlapping features conflicting strands (+ -) removed.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"correct_strand(rse, genes_gr)"},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply strand correction using gene annotations — correct_strand","text":"rse RangedSummarizedExperiment object containing editing sites processed \"unstranded\" setting genes_gr GRanges object containing reference features annotate strand editing sites.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply strand correction using gene annotations — correct_strand","text":"RangedSummarizedExperiment object containing pileup assays, strand corrected based supplied genomic intervals.","code":""},{"path":"https://rnabioco.github.io/raer/reference/correct_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply strand correction using gene annotations — correct_strand","text":"","code":"suppressPackageStartupMessages(library(\"GenomicRanges\"))  bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\") fp <- FilterParam(library_type = \"unstranded\") rse <- pileup_sites(bamfn, fafn, param = fp)  genes <- GRanges(c(     \"DHFR:200-400:+\",     \"SPCS3:100-200:-\",     \"SSR3:3-10:-\",     \"SSR3:6-12:+\" ))  correct_strand(rse, genes) #> class: RangedSummarizedExperiment  #> dim: 307 1  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(307): site_SSR3_3_1 site_SSR3_4_1 ... site_DHFR_399_1 #>   site_DHFR_400_1 #> rowData names(4): REF rpbz vdb sor #> colnames(1): SRR5564269_Aligned.sortedByCoord.out.md.bam #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out clustered sequence variants — filter_clustered_variants","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"Sequence variants multiple allele types (e.g., >G, >C) nearby regions can due mis-alignment. Remove variants multiple allele types present within given distance genomic transcriptome coordinate space.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"filter_clustered_variants(   rse,   txdb,   regions = c(\"transcript\", \"genome\"),   variant_dist = 100 )"},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"rse SummarizedExperiment::SummarizedExperiment containing editing sites txdb GenomicFeatures::TxDb regions One transcript genome, specifying coordinate system calculating distances variants. variant_dist distance nucleotides determining clustered variants","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"SummarizedExperiment::SummarizedExperiment sites removed object dependent filtering applied.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_clustered_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out clustered sequence variants — filter_clustered_variants","text":"","code":"library(GenomicFeatures) #> Loading required package: AnnotationDbi  rse_adar_ifn <- mock_rse() rse <- rse_adar_ifn[seqnames(rse_adar_ifn) == \"SPCS3\"]  # mock up a txdb with genes gr <- GRanges(c(     \"SPCS3:100-120:-\",     \"SPCS3:325-350:-\" )) gr$source <- \"raer\" gr$type <- \"exon\" gr$source <- NA gr$phase <- NA_integer_ gr$gene_id <- c(1, 2) gr$transcript_id <- c(\"1.1\", \"2.1\") txdb <- makeTxDbFromGRanges(gr)  rse <- filter_multiallelic(rse) #> ℹ `filter_multiallelic()`: removed 0 sites from 8 (8 remain) filter_clustered_variants(rse, txdb, variant_dist = 10) #> ℹ `filter_clustered_variants()`: removed 3 sites from 8 (5 remain) #> class: RangedSummarizedExperiment  #> dim: 5 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(5): site_SPCS3_99_1 site_SPCS3_227_1 site_SPCS3_241_1 #>   site_SPCS3_329_1 site_SPCS3_330_1 #> rowData names(5): REF rpbz vdb sor ALT #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out multi-allelic sites — filter_multiallelic","title":"Filter out multi-allelic sites — filter_multiallelic","text":"Remove sites multiple variant bases SummarizedExperiment. rowData() gains new column, ALT, contains variant allele detected site.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"filter_multiallelic(se)"},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out multi-allelic sites — filter_multiallelic","text":"se SummarizedExperiment::SummarizedExperiment","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out multi-allelic sites — filter_multiallelic","text":"SummarizedExperiment::SummarizedExperiment multiallelic sites removed.  new column,ALT added rowData() indicating single allele present site.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_multiallelic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out multi-allelic sites — filter_multiallelic","text":"","code":"rse_adar_ifn <- mock_rse() filter_multiallelic(rse_adar_ifn) #> ℹ `filter_multiallelic()`: removed 2 sites from 74 (72 remain) #> class: RangedSummarizedExperiment  #> dim: 72 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(72): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(5): REF rpbz vdb sor ALT #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out sites near splice sites — filter_splice_variants","title":"Filter out sites near splice sites — filter_splice_variants","text":"Remove editing sites found regions proximal annotated splice junctions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"filter_splice_variants(rse, txdb, splice_site_dist = 4, ignore.strand = FALSE)"},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out sites near splice sites — filter_splice_variants","text":"rse SummarizedExperiment::SummarizedExperiment editing sites txdb GenomicFeatures::TxDb splice_site_dist distance splice site ignore.strand TRUE, ignore strand comparing editing sites splice sites","code":""},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out sites near splice sites — filter_splice_variants","text":"SummarizedExperiment::SummarizedExperiment sites adjacent splice sites removed.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/filter_splice_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out sites near splice sites — filter_splice_variants","text":"","code":"library(GenomicFeatures) rse_adar_ifn <- mock_rse()  # mock up a txdb with genes gr <- GRanges(c(     \"DHFR:310-330:-\",     \"DHFR:410-415:-\",     \"SSR3:100-155:-\",     \"SSR3:180-190:-\" )) gr$source <- \"raer\" gr$type <- \"exon\" gr$source <- NA gr$phase <- NA_integer_ gr$gene_id <- c(1, 1, 2, 2) gr$transcript_id <- rep(c(\"1.1\", \"2.1\"), each = 2) txdb <- makeTxDbFromGRanges(gr)  filter_splice_variants(rse_adar_ifn, txdb) #> ℹ `filter_splice_variants()`: removed 5 sites from 74 (69 remain) #> class: RangedSummarizedExperiment  #> dim: 69 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(69): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/find_de_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing — find_de_sites","title":"Perform differential editing — find_de_sites","text":"Use edgeR DESeq2 perform differential editing analysis. work simple designs 1 treatment 1 control. complex designs, suggest perform . moment, function find editing events specific treatment.","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_de_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing — find_de_sites","text":"","code":"find_de_sites(   deobj,   test = c(\"edgeR\", \"DESeq2\"),   sample_col = \"sample\",   condition_col = \"condition\",   condition_control = NULL,   condition_treatment = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/find_de_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing — find_de_sites","text":"deobj RangedSummarizedExperiment object prepared differential editing analysis make_de_object() test Indicate edgeR DESeq2 run. sample_col name column colData(deobj) contains sample information. Default sample. column named \"sample\", must provide appropriate sample column condition_col name column colData(deobj) contains treatment information. Default condition, column named \"condition\", must provide appropriate condition column condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_de_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential editing — find_de_sites","text":"named list: de_obj: edgeR deseq object used differential editing analysis results_full: Unfiltered differential editing results sig_results: Filtered differential editing (FDR < 0.05) model_matrix: model matrix used generating DE results","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_de_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential editing — find_de_sites","text":"","code":"library(SummarizedExperiment) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) names(bams) <- sample_ids  fp <- FilterParam(only_keep_variants = TRUE) rse <- pileup_sites(bams, fafn, param = fp) rse$condition <- substr(rse$sample, 1, 2)  rse <- calc_edit_frequency(rse) #> ℹ 6 sites had no coverage for calculating editing dse <- make_de_object(rse) res <- find_de_sites(dse, condition_control = \"WT\", condition_treatment = \"KO\") #> Using classic mode. res$sig_results[1:3, ] #>                      logFC   logCPM        LR      PValue        FDR #> site_SSR3_244_2 -11.108016 21.06907 13.122188 0.000291819 0.01984369 #> site_DHFR_361_2 -11.147610 21.96719 11.531065 0.000684428 0.02327055 #> site_SSR3_254_2  -7.938091 21.10149  9.926435 0.001629218 0.03692893"},{"path":"https://rnabioco.github.io/raer/reference/find_mispriming_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Find regions with oligodT mispriming — find_mispriming_sites","title":"Find regions with oligodT mispriming — find_mispriming_sites","text":"OligodT prime -rich regions RNA. Reverse transcription internal priming sites install oligodT sequence 3' end cDNA. Sequence variants within internal priming sites enriched variants converting genomic sequence encoded oligodT primer. Trimming poly() 3' ends reads reduces eliminate signals function identify regions enriched mispriming events. Reads trimmed remove poly() (encoded pa tag 10x genomics) identified. aligned 3' positions reads counted, sites passing thresholds (least 2 reads) retained possible sites mispriming. default regions 5 bases upstream 20 bases downstream putative mispriming sites returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_mispriming_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find regions with oligodT mispriming — find_mispriming_sites","text":"","code":"find_mispriming_sites(   bamfile,   fasta,   pos_5p = 5,   pos_3p = 20,   min_reads = 2,   tag = \"pa\",   tag_values = 3:300,   n_reads_per_chunk = 1e+06,   verbose = TRUE )"},{"path":"https://rnabioco.github.io/raer/reference/find_mispriming_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find regions with oligodT mispriming — find_mispriming_sites","text":"bamfile path bamfile fasta path fasta file pos_5p distance 5' mispriming site define mispriming region pos_3p distance 3' mispriming site define mispriming region min_reads minimum required number reads mispriming site tag bam tag containing number poly() bases trimmed tag_values range values required read considered n_reads_per_chunk number reads process memory, see Rsamtools::BamFile() verbose true report progress","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_mispriming_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find regions with oligodT mispriming — find_mispriming_sites","text":"GenomicsRanges containing regions enriched putative mispriming events. n_reads column specifies number polyA trimmed reads overlapping mispriming region. mean_pal indicates mean length polyA sequence trimmed reads overlapping region. n_regions column specifies number overlapping independent regions found chunk (dictated n_reads_per_chunk). A_freq column indicates frequency bases within region.","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_mispriming_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find regions with oligodT mispriming — find_mispriming_sites","text":"","code":"bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\") fa_fn <- raer_example(\"mouse_tiny.fasta\") find_mispriming_sites(bam_fn, fa_fn) #> working on 2:580-633:- to 2:580-633:- #> GRanges object with 1 range and 4 metadata columns: #>       seqnames    ranges strand |  mean_pal   n_reads n_regions    A_freq #>          <Rle> <IRanges>  <Rle> | <numeric> <integer> <integer> <numeric> #>   [1]        2   560-585      - |   34.6667         6         1  0.615385 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome"},{"path":"https://rnabioco.github.io/raer/reference/find_scde_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","title":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","text":"Compare editing frequencies clusters celltypes. REF ALT counts cluster pooled create pseudobulk estimates. pair clusters compared using fisher exact tests. Statistics aggregated across pairwise comparison using scran::combineMarkers.","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_scde_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","text":"","code":"find_scde_sites(sce, group, BPPARAM = SerialParam(), ...)"},{"path":"https://rnabioco.github.io/raer/reference/find_scde_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","text":"sce SingleCellExperiment object nRef nAlt assays. group column name colData used define groups compare. BPPARAM BiocParallel backend control paralllel computations performed. ... Additional arguments passed scran::combineMarkers","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_scde_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","text":"named list DataFrames containing results cluster specified group. difference editing frequencies cluster pairs denoted dEF. See scran::combineMarkers description additional output fields.","code":""},{"path":"https://rnabioco.github.io/raer/reference/find_scde_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify sites with differential editing between cells in single cell datasets — find_scde_sites","text":"","code":"### generate example data ###  library(Rsamtools) library(GenomicRanges) bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\")  gr <- GRanges(c(\"2:579:-\", \"2:625:-\", \"2:645:-\", \"2:589:-\", \"2:601:-\")) gr$REF <- c(rep(\"A\", 4), \"T\") gr$ALT <- c(rep(\"G\", 4), \"C\")  cbs <- unique(scanBam(bam_fn, param = ScanBamParam(tag = \"CB\"))[[1]]$tag$CB) cbs <- na.omit(cbs)  outdir <- tempdir() bai <- indexBam(bam_fn)  fp <- FilterParam(library_type = \"fr-second-strand\") sce <- pileup_cells(bam_fn, gr, cbs, outdir, param = fp)  # mock some clusters set.seed(42) sce$clusters <- paste0(\"cluster_\", sample(1:3, ncol(sce), replace = TRUE)) res <- find_scde_sites(sce, \"clusters\") #> → 244 cells had no REF or ALT counts and were excluded from the analysis res[[1]] #> DataFrame with 4 rows and 10 columns #>                 self.average other.average self.detected other.detected #>                    <numeric>     <numeric>     <numeric>      <numeric> #> site_2_579_2_AG     0.690208      0.653495      0.727273       0.707399 #> site_2_589_2_AG     0.862085      0.831895      0.868687       0.861512 #> site_2_601_2_TC     0.838316      0.850864      0.858586       0.871928 #> site_2_625_2_AG     0.926220      0.991736      0.838384       0.901309 #>                       Top   p.value       FDR summary.dEF dEF.cluster_2 #>                 <integer> <numeric> <numeric>   <numeric>     <numeric> #> site_2_579_2_AG         1  0.872535         1 -0.01784427   -0.02257960 #> site_2_589_2_AG         1  1.000000         1  0.03537552    0.03537552 #> site_2_601_2_TC         2  1.000000         1  0.00772495    0.00772495 #> site_2_625_2_AG         3  1.000000         1  0.00121012    0.00121012 #>                 dEF.cluster_3 #>                     <numeric> #> site_2_579_2_AG  -0.017844268 #> site_2_589_2_AG   0.008314991 #> site_2_601_2_TC   0.000749251 #> site_2_625_2_AG  -0.000124844"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SNPs overlapping intervals — get_overlapping_snps","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"function find SNPs overlapping supplied intervals using SNPlocs package. SNPs can returned memory (GPos objects) written disk bed-file (optionally compressed).","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"get_overlapping_snps(gr, snpDb, output_file = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"gr Intervals query snpDb reference ot SNPlocs database output_file path output file. supplied file can optionally compressed including \".gz\" suffix. supplied, SNPS returned GenomicRanges::GPos object","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"GPos object containing SNPs overlapping supplied genomic intervals","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_overlapping_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve SNPs overlapping intervals — get_overlapping_snps","text":"","code":"if (require(SNPlocs.Hsapiens.dbSNP144.GRCh38)) {     gr <- GRanges(rep(\"22\", 10),         IRanges(seq(10510077, 10610077, by = 1000)[1:10], width = 250),         strand = \"+\"     )     get_overlapping_snps(gr, SNPlocs.Hsapiens.dbSNP144.GRCh38) } #> UnstitchedGPos object with 1 position and 0 metadata columns: #>       seqnames       pos strand #>          <Rle> <integer>  <Rle> #>   [1]       22  10511116      * #>   ------- #>   seqinfo: 25 sequences (1 circular) from GRCh38.p2 genome"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract regions surrounding splice sites — get_splice_sites","title":"Extract regions surrounding splice sites — get_splice_sites","text":"Find intervals containing splice sites adjacent regions.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"get_splice_sites(txdb, slop = 4)"},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract regions surrounding splice sites — get_splice_sites","text":"txdb GenomicFeatures::TxDb slop number bases upstream downstream splice site extract","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract regions surrounding splice sites — get_splice_sites","text":"GenomicRanges::GRanges containing positions splice sites, flanking bases.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_splice_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract regions surrounding splice sites — get_splice_sites","text":"","code":"if (require(TxDb.Hsapiens.UCSC.hg38.knownGene)) {     txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene     res <- get_splice_sites(txdb)     res[1:5] } #> Loading required package: TxDb.Hsapiens.UCSC.hg38.knownGene #> GRanges object with 5 ranges and 0 metadata columns: #>       seqnames      ranges strand #>          <Rle>   <IRanges>  <Rle> #>   [1]     chr1 12054-12061      + #>   [2]     chr1 12175-12182      + #>   [3]     chr1 12224-12231      + #>   [4]     chr1 12224-12231      + #>   [5]     chr1 12609-12616      + #>   ------- #>   seqinfo: 711 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/make_de_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Make summarized experiment object for differential editing analysis — make_de_object","title":"Make summarized experiment object for differential editing analysis — make_de_object","text":"Generates RangedSummarizedExperiment object use edgeR DESeq2 . generate counts assay matrix formatted 2 columns per sample, representing reference editing allele counts.","code":""},{"path":"https://rnabioco.github.io/raer/reference/make_de_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make summarized experiment object for differential editing analysis — make_de_object","text":"","code":"make_de_object(   rse,   edit_from = \"A\",   edit_to = \"G\",   min_prop = 0,   max_prop = 1,   min_samples = 1 )"},{"path":"https://rnabioco.github.io/raer/reference/make_de_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make summarized experiment object for differential editing analysis — make_de_object","text":"rse RangedSummarizedExperiment object edit_from correspond nucleotide assay (, C, G, T, Ref, Alt) expect reference. Ex. editing events, . edit_to correspond nucleotide assay (, C, G, T, Ref, Alt) expect editing site. Ex. editing events, G. min_prop minimum required proportion reads edited site. least min_samples need pass keep site. max_prop maximum allowable proportion reads edited site. least min_samples need pass keep site. min_samples minimum number samples passing min_prop max_prop cutoffs keep site.","code":""},{"path":"https://rnabioco.github.io/raer/reference/make_de_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make summarized experiment object for differential editing analysis — make_de_object","text":"RangedSummarizedExperiment use edgeR DESeq2. Contains counts assay matrix formatted 2 columns per sample (ref alt counts).","code":""},{"path":"https://rnabioco.github.io/raer/reference/make_de_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make summarized experiment object for differential editing analysis — make_de_object","text":"","code":"library(SummarizedExperiment) rse_adar_ifn <- mock_rse() rse <- calc_edit_frequency(rse_adar_ifn) #> ℹ 6 sites had no coverage for calculating editing dse <- make_de_object(rse, min_samples = 1) assay(dse, \"counts\")[1:5, ] #>                 wt_ref adar1_ko_ref wt_alt adar1_ko_alt #> site_SSR3_102_2      0            0      0            1 #> site_SSR3_125_2      0            0      1            0 #> site_SSR3_156_2      1            0      0            0 #> site_SSR3_176_2      8           16     16            0 #> site_SSR3_198_2     24           15      1            0 dse #> class: RangedSummarizedExperiment  #> dim: 68 4  #> metadata(0): #> assays(1): counts #> rownames(68): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_399_2 #>   site_DHFR_430_2 #> rowData names(4): REF rpbz vdb sor #> colnames(4): wt_ref adar1_ko_ref wt_alt adar1_ko_alt #> colData names(4): sample n_sites edit_idx count"},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"RangedSummarizedExperiment containing subset data RNA-seq experiment measure effects IFN treatment cell lines wild-type ADAR1-KO.","code":""},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"","code":"mock_rse()"},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"https://www.ncbi.nlm.nih.gov/bioproject/PRJNA386593","code":""},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"RangedSummarizedExperiment populated pileup data","code":""},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"https://pubmed.ncbi.nlm.nih.gov/29395325/","code":""},{"path":"https://rnabioco.github.io/raer/reference/mock_rse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a small RangedSummarizedExperiment object for tests and examples — mock_rse","text":"","code":"mock_rse() #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(2): wt adar1_ko #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Pileup sites per cell — pileup_cells","title":"Pileup sites per cell — pileup_cells","text":"function performs pileup operation specified sites, returning counts Reference (e.g. unedited) Alternate (e.g. edited) bases. pileup_cells can process either 10x Genomic's style library, aligned BAM file containing tag cell-barcode tag UMI, smart-seq style libraries without cell-barcodes. sites parameter specifies sites pileup. must GRanges object 1 base intervals, strand (+ -), supplemented metadata columns named REF ALT containing reference alternate base query. See examples example format. site, bases overlapping reads examined, counts ref alt base enumerated cell-barcode present. single base counted UMI sequence present cell.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pileup sites per cell — pileup_cells","text":"","code":"pileup_cells(   bamfiles,   sites,   cell_barcodes,   output_directory,   chroms = NULL,   umi_tag = \"UB\",   cb_tag = \"CB\",   paired_end = FALSE,   param = FilterParam(),   BPPARAM = SerialParam(),   return_sce = TRUE,   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pileup sites per cell — pileup_cells","text":"bamfiles path BAM file (10x libraries), vector paths BAM files (smart-seq2). Can supplied character vector, BamFile, BamFileList. sites GRanges object containing sites process. See examples valid formatting. cell_barcodes character vector single cell barcodes process. processing multiple BAM files (e.g. smart-seq-2), provide character vector unique identifiers input BAM, name BAM file output files. output_directory Output directory output matrix files. directory generated exist. chroms character vector chromosomes process. supplied, sites present listed chromosomes processed umi_tag tag BAM containing UMI sequence cb_tag tag BAM containing cell-barcode sequence paired_end set TRUE data paired-end prevent double counting overlapping read pairs. param object class FilterParam() specify various filters apply reads sites pileup. Note min_depth min_variant_reads parameters set > 0 specify number reads cell required order report site. E.g. min_variant_reads set 2, least 2 reads (cell) must variant order report site. Setting min_depth min_variant_reads 0 reports sites present sites object. following options enabled pileup_cells(): max_mismatch_type, homopolymer_len, min_allelic_freq. BPPARAM BiocParallel instance. Parallel computation occurs across chromosomes. return_sce TRUE, data returned SingleCellExperiment, FALSE character vector output files, specified outfile_prefix, returned. verbose Display messages","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pileup sites per cell — pileup_cells","text":"Returns either SingleCellExperiment character vector paths sparseMatrix files produced. SingleCellExperiment object populated two assays, nRef nAlt, represent base counts reference alternate alleles. rowRanges() contain genomic interval site, along REF ALT columns. rownames populated format site_[seqnames]_[position(1-based)]_[strand]_[allele], strand encoded 1 = +, 2 = -, 3 = *, allele REF + ALT. return_sce FALSE character vector paths sparseMatrix files (barcodes.txt.gz, sites.txt.gz, counts.mtx.gz), returned. files can imported using read_sparray().","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/pileup_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pileup sites per cell — pileup_cells","text":"","code":"library(Rsamtools) library(GenomicRanges) bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\")  gr <- GRanges(c(\"2:579:-\", \"2:625:-\", \"2:645:-\", \"2:589:-\", \"2:601:-\")) gr$REF <- c(rep(\"A\", 4), \"T\") gr$ALT <- c(rep(\"G\", 4), \"C\")  cbs <- unique(scanBam(bam_fn, param = ScanBamParam(tag = \"CB\"))[[1]]$tag$CB) cbs <- na.omit(cbs)  outdir <- tempdir() bai <- indexBam(bam_fn)  fp <- FilterParam(library_type = \"fr-second-strand\") sce <- pileup_cells(bam_fn, gr, cbs, outdir, param = fp) sce #> class: SingleCellExperiment  #> dim: 4 556  #> metadata(0): #> assays(2): nRef nAlt #> rownames(4): site_2_579_2_AG site_2_589_2_AG site_2_601_2_TC #>   site_2_625_2_AG #> rowData names(2): REF ALT #> colnames(556): TGGAACTCAAGCTGTT-1 TACTTCAGTAACCCTA-1 ... #>   TGTACAGTCTTCGTGC-1 TGTTGAGGTGACTGAG-1 #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # example of processing multiple smart-seq2 style libraries  many_small_bams <- rep(bam_fn, 10) bam_ids <- LETTERS[1:10] pileup_cells(many_small_bams,     sites = gr,     cell_barcodes = bam_ids,     cb_tag = NULL,     umi_tag = NULL,     paired_end = TRUE,     outdir,     param = fp ) #> class: SingleCellExperiment  #> dim: 40 10  #> metadata(0): #> assays(2): nRef nAlt #> rownames(40): site_2_579_2_AG site_2_589_2_AG ... site_2_601_2_TC #>   site_2_625_2_AG #> rowData names(2): REF ALT #> colnames(10): A B ... I J #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  unlink(c(outdir, bai))"},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate base counts using pileup — pileup_sites","title":"Generate base counts using pileup — pileup_sites","text":"Generate base counts using pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate base counts using pileup — pileup_sites","text":"","code":"pileup_sites(   bamfiles,   fasta,   sites = NULL,   region = NULL,   chroms = NULL,   param = FilterParam(),   BPPARAM = SerialParam(),   umi_tag = NULL,   verbose = FALSE )  FilterParam(   max_depth = 10000,   min_depth = 1L,   min_base_quality = 20L,   min_mapq = 0L,   library_type = \"fr-first-strand\",   bam_flags = NULL,   only_keep_variants = FALSE,   trim_5p = 0L,   trim_3p = 0L,   ftrim_5p = 0,   ftrim_3p = 0,   indel_dist = 0L,   splice_dist = 0L,   min_splice_overhang = 0L,   homopolymer_len = 0L,   max_mismatch_type = c(0L, 0L),   read_bqual = c(0, 0),   min_variant_reads = 0L,   min_allelic_freq = 0,   report_multiallelic = TRUE,   remove_overlaps = TRUE )"},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate base counts using pileup — pileup_sites","text":"bamfiles character vector, BamFile BamFileList indicating 1 BAM files process. named, names included colData RangedSummarizedExperiment sample column, otherwise names taken basename BAM file. fasta path genome fasta file used read alignment. Can gzip bgzip format. sites GRanges object containing regions sites process. region samtools region query string (.e. chr1:100-1000). Can combined sites, case sites filtered keep sites within region. chroms chromosomes process, used region. param object class FilterParam() specify various filters apply reads sites pileup. BPPARAM BiocParallel class control parallel execution. Parallel processing occurs per chromosome disabled run single region. umi_tag bam tag containing UMI sequence. supplied, multiple reads UMI sequence counted per position. verbose TRUE, report progress warnings. max_depth maximum read depth considered site min_depth min read depth needed report site min_base_quality min base quality score consider read pileup min_mapq minimum required MAPQ score. Values input BAM file can provided vector. library_type read orientation, one fr-first-strand, fr-second-strand, unstranded. Unstranded library type reported variants w.r.t + strand. Values input BAM file can provided vector. bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() generate. only_keep_variants TRUE, variant sites reported (FALSE default). Values input BAM file can provided vector. trim_5p Bases trim 5' end read alignments trim_3p Bases trim 3' end read alignments ftrim_5p Fraction bases trim 5' end read alignments ftrim_3p Fraction bases trim 3' end read alignments indel_dist Exclude read site occurs within given distance indel event read splice_dist Exclude read site occurs within given distance splicing event read min_splice_overhang Exclude read site located adjacent splice site overhang less given length. homopolymer_len Exclude site occurs within homopolymer given length max_mismatch_type Exclude read X different mismatch types (e.g --G, G--C, C--G, 3 mismatch types) Y # mismatches, must supplied integer vector length 2. e.g. c(X, Y). read_bqual Exclude read X percent bases base qualities less Y. Numeric vector length 2. e.g. c(0.25, 20) min_variant_reads Required number reads containing variant site reported. Calculated per bam file, 1 bam file >= min_variant_reads, site reported. min_allelic_freq minimum allelic frequency required variant reported ALT assay. report_multiallelic TRUE, report sites multiple variants passing filters. FALSE, site reported. remove_overlaps TRUE, enable read pair overlap detection, count 1 read regions read pairs overlap using htslib algorithm. brief overlapping base pair base quality base lower quality set 0, discards counted.","code":""},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate base counts using pileup — pileup_sites","text":"RangedSummarizedExperiment object populated multiple assays: ALT:  Alternate base(s) found position nRef: # reads supporting reference base nAlt: # reads supporting alternate base nA: # reads nT: # reads T nC: # reads C nG: # reads G rowRanges() contains genomic interval site, along : REF: reference base rpbz: Mann-Whitney U test Read Position Bias bcftools, extreme negative positive values indicate bias. vdb: Variant Distance Bias filtering splice-site artefacts bcftools, lower values indicate bias. sor Strand Odds Ratio Score, strand bias estimated Symmetric Odds Ratio test, based GATK code. Higher values indicate bias. rownames populated format site_[seqnames]_[position(1-based)]_[strand], strand encoded 1 = +, 2 = -, 3 = *.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/pileup_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate base counts using pileup — pileup_sites","text":"","code":"library(SummarizedExperiment) bamfn <- raer_example(\"SRR5564269_Aligned.sortedByCoord.out.md.bam\") bam2fn <- raer_example(\"SRR5564277_Aligned.sortedByCoord.out.md.bam\") fafn <- raer_example(\"human.fasta\")  rse <- pileup_sites(bamfn, fafn)  fp <- FilterParam(only_keep_variants = TRUE, min_depth = 55) pileup_sites(bamfn, fafn, param = fp) #> class: RangedSummarizedExperiment  #> dim: 7 1  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(7): site_DHFR_207_2 site_DHFR_208_2 ... site_DHFR_300_2 #>   site_DHFR_332_2 #> rowData names(4): REF rpbz vdb sor #> colnames(1): SRR5564269_Aligned.sortedByCoord.out.md.bam #> colData names(1): sample   # using multiple bam files  bams <- rep(c(bamfn, bam2fn), each = 3) sample_ids <- paste0(rep(c(\"KO\", \"WT\"), each = 3), 1:3) names(bams) <- sample_ids  fp <- FilterParam(only_keep_variants = TRUE) rse <- pileup_sites(bams, fafn, param = fp) rse #> class: RangedSummarizedExperiment  #> dim: 74 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse$condition <- substr(rse$sample, 1, 2) assays(rse) #> List of length 7 #> names(7): ALT nRef nAlt nA nT nC nG  colData(rse) #> DataFrame with 6 rows and 2 columns #>          sample   condition #>     <character> <character> #> KO1         KO1          KO #> KO2         KO2          KO #> KO3         KO3          KO #> WT1         WT1          WT #> WT2         WT2          WT #> WT3         WT3          WT  rowRanges(rse) #> GRanges object with 74 ranges and 4 metadata columns: #>                   seqnames    ranges strand |         REF       rpbz #>                      <Rle> <IRanges>  <Rle> | <character>  <numeric> #>   site_SSR3_102_2     SSR3       102      - |           T   2.611800 #>   site_SSR3_125_2     SSR3       125      - |           C   0.623238 #>   site_SSR3_156_2     SSR3       156      - |           C   1.875144 #>   site_SSR3_176_2     SSR3       176      - |           A  -0.676423 #>   site_SSR3_198_2     SSR3       198      - |           A   1.817678 #>               ...      ...       ...    ... .         ...        ... #>   site_DHFR_397_2     DHFR       397      - |           A -2.7341600 #>   site_DHFR_399_2     DHFR       399      - |           G -0.2094944 #>   site_DHFR_423_2     DHFR       423      - |           T -0.0815516 #>   site_DHFR_430_2     DHFR       430      - |           A -2.6781858 #>   site_DHFR_513_2     DHFR       513      - |           T -1.2475213 #>                           vdb       sor #>                     <numeric> <numeric> #>   site_SSR3_102_2 2.21621e-02  2.776147 #>   site_SSR3_125_2 2.21621e-02  0.478641 #>   site_SSR3_156_2 2.21621e-02  2.786335 #>   site_SSR3_176_2 2.00523e-05  2.154124 #>   site_SSR3_198_2 2.21621e-02  2.797103 #>               ...         ...       ... #>   site_DHFR_397_2   0.0221621  2.775538 #>   site_DHFR_399_2   0.0221621  0.306541 #>   site_DHFR_423_2   0.0221621  2.773352 #>   site_DHFR_430_2   0.0221621  2.773426 #>   site_DHFR_513_2   0.0221621  2.772591 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome  # specifying regions to query using GRanges object  sites <- rowRanges(rse) rse <- pileup_sites(bams, fafn, sites = sites) rse #> class: RangedSummarizedExperiment  #> dim: 74 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(74): site_SSR3_102_2 site_SSR3_125_2 ... site_DHFR_430_2 #>   site_DHFR_513_2 #> rowData names(4): REF rpbz vdb sor #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse <- pileup_sites(bams, fafn, chroms = c(\"SPCS3\", \"DHFR\")) rse #> class: RangedSummarizedExperiment  #> dim: 1166 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(1166): site_SPCS3_1_1 site_SPCS3_2_1 ... site_DHFR_517_2 #>   site_DHFR_518_2 #> rowData names(4): REF rpbz vdb sor #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample  rse <- pileup_sites(bams, fafn, region = \"DHFR:100-101\") rse #> class: RangedSummarizedExperiment  #> dim: 2 6  #> metadata(0): #> assays(7): ALT nRef ... nC nG #> rownames(2): site_DHFR_100_2 site_DHFR_101_2 #> rowData names(4): REF rpbz vdb sor #> colnames(6): KO1 KO2 ... WT2 WT3 #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":null,"dir":"Reference","previous_headings":"","what":"raer: RNA editing tools in R — raer","title":"raer: RNA editing tools in R — raer","text":"Toolkit identification statistical testing RNA editing signals within R. Provides support identifying sites bulk-RNA single cell RNA-seq datasets, general methods extraction allelic read counts alignment files. Facilitates annotation exploratory analysis editing signals using Bioconductor packages resources.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raer: RNA editing tools in R — raer","text":"Maintainer: Kent Riemondy kent.riemondy@gmail.com (ORCID) Authors: Kristen Wells-Wrasman kristen.wells-wrasman@cuanschutz.edu (ORCID) contributors: Ryan Sheridan ryan.sheridan@cuanschutz.edu (ORCID) [contributor] Jay Hesselberth jay.hesselberth@gmail.com (ORCID) [contributor] RNA Bioscience Initiative [copyright holder, funder]","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide working directory for raer example files. — raer_example","title":"Provide working directory for raer example files. — raer_example","text":"Provide working directory raer example files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(path)"},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide working directory for raer example files. — raer_example","text":"path path file","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide working directory for raer example files. — raer_example","text":"Character vector path internal package file.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide working directory for raer example files. — raer_example","text":"","code":"raer_example(\"human.fasta\") #> [1] \"/__w/_temp/Library/raer/extdata/human.fasta\""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sparseMatrix produced by pileup_cells() — read_sparray","title":"Read sparseMatrix produced by pileup_cells() — read_sparray","text":"Read tables produced pileup_cells() extension matrixMarket sparse matrix format store values 1 matrix. .mtx.gz files formatted columns: row index (0 based) column index (0 based) values sparseMatrix #1 (nRef) values sparseMatrix #2 (nAlt)","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sparseMatrix produced by pileup_cells() — read_sparray","text":"","code":"read_sparray(mtx_fn, sites_fn, bc_fn, site_format = c(\"coordinate\", \"index\"))"},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sparseMatrix produced by pileup_cells() — read_sparray","text":"mtx_fn .mtx.gz file path sites_fn sites.txt.gz file path bc_fn bcs.txt.gz file path site_format one coordinate index, coordinate populate SingleCellExperiment rowRanges rownames corresponing genomic intervals, whereas `index`` add row indices rownames.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sparseMatrix produced by pileup_cells() — read_sparray","text":"SingleCellExperiment object populated nRef nAlt assays.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_sparray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read sparseMatrix produced by pileup_cells() — read_sparray","text":"","code":"library(Rsamtools) library(GenomicRanges) bam_fn <- raer_example(\"5k_neuron_mouse_possort.bam\")  gr <- GRanges(c(\"2:579:-\", \"2:625:-\", \"2:645:-\", \"2:589:-\", \"2:601:-\")) gr$REF <- c(rep(\"A\", 4), \"T\") gr$ALT <- c(rep(\"G\", 4), \"C\")  cbs <- unique(scanBam(bam_fn, param = ScanBamParam(tag = \"CB\"))[[1]]$tag$CB) cbs <- na.omit(cbs)  outdir <- tempdir() bai <- indexBam(bam_fn)  fp <- FilterParam(library_type = \"fr-second-strand\") mtx_fns <- pileup_cells(bam_fn, gr, cbs, outdir,  return_sce = FALSE) sce <- read_sparray(mtx_fns[1], mtx_fns[2], mtx_fns[3]) sce #> class: SingleCellExperiment  #> dim: 4 556  #> metadata(0): #> assays(2): nRef nAlt #> rownames(4): site_2_579_2_AG site_2_589_2_AG site_2_601_2_TC #>   site_2_625_2_AG #> rowData names(2): REF ALT #> colnames(556): TGGAACTCAAGCTGTT-1 TACTTCAGTAACCCTA-1 ... #>   TGTACAGTCTTCGTGC-1 TGTTGAGGTGACTGAG-1 #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  unlink(c(outdir, bai))"},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-09912","dir":"Changelog","previous_headings":"","what":"raer 0.99.12","title":"raer 0.99.12","text":"Changes made prepare bioc submission","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-09911","dir":"Changelog","previous_headings":"","what":"raer 0.99.11","title":"raer 0.99.11","text":"Replaced base R fisher test c-wrapper call htslib fisher test, speeds execution many fold.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-09910","dir":"Changelog","previous_headings":"","what":"raer 0.99.10","title":"raer 0.99.10","text":"options write tabix indexed output files removed pileup_sites() limited utility introduce unwanted code complexity.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0999","dir":"Changelog","previous_headings":"","what":"raer 0.99.9","title":"raer 0.99.9","text":"genomic-unstranded option library-type argument FilterParam() renamed unstranded, unstranded option removed.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0998","dir":"Changelog","previous_headings":"","what":"raer 0.99.8","title":"raer 0.99.8","text":"Function arguments involving fasta file renamed fasta","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0997","dir":"Changelog","previous_headings":"","what":"raer 0.99.7","title":"raer 0.99.7","text":"added single cell specific AEI calculation (calc_scAEI())","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0996","dir":"Changelog","previous_headings":"","what":"raer 0.99.6","title":"raer 0.99.6","text":"added method count base consensus base counting UMIs pileup_cells() using sum base qualities select consensus.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0995","dir":"Changelog","previous_headings":"","what":"raer 0.99.5","title":"raer 0.99.5","text":"pileup_cells() now allows multiple alleles queried site. Fixed indexing bug pileup_cells() misassigned sites counts.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0994","dir":"Changelog","previous_headings":"","what":"raer 0.99.4","title":"raer 0.99.4","text":"annot_snps now compare site allele SNP allele return column snp_matches_site indicating site matches snp. added new function, find_scde_sites() identify differentially editing sites single cell data using fishers exact tests. pileup_cells now respects min_depth min_variant_reads FilterParameters.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0993","dir":"Changelog","previous_headings":"","what":"raer 0.99.3","title":"raer 0.99.3","text":"support BamFile BamFileList inputs pileup_sites() pileup_cells(), provides option provide custom BAI index file names.","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0992","dir":"Changelog","previous_headings":"","what":"raer 0.99.2","title":"raer 0.99.2","text":"rename prep_for_de() perform_de() make_de_object() find_de_sites().","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0991","dir":"Changelog","previous_headings":"","what":"raer 0.99.1","title":"raer 0.99.1","text":"default values edit_from edit_to calc_edit_frequency() changed G respectively. renamed type argument perform_de test removed type argument prep_for_de","code":""},{"path":"https://rnabioco.github.io/raer/news/index.html","id":"raer-0990","dir":"Changelog","previous_headings":"","what":"raer 0.99.0","title":"raer 0.99.0","text":"added support processing multiple BAM files calc_AEI(). Dropped minimally used bad_reads reads parameters pileup_sites() Added utility screen scRNA-seq bam files regions oligo-dT mispriming (find_mispriming_sites()). add option query ref alt SNP alleles added tests SummarizedExperiment filtering approaches added strand bias stat sor using approach GATK (StrandOddsRatio), confidence score calc_confidence() SAILOR pipeline. ‘N’ bases read reference ignored Removed outdated unused functionality: bed indexing (indexBed related C code) bam tag indexing (build_tag_index, show_tag_index, get_tag_bam, ) bam tag index based single cell approach (sc_editing) bam tag indexing C code bri (src/bri/*) sparse matrix merging merge_pileups(). unneeded utilities (filter_by_coverage) Remaining (mostly unused) Rcpp code Removed fastmap, Rcpp, zlibbioc, RColorBrewer, BiocGenerics dependencies Removed system requirements C libraries used bri bed indexing used pileup_sites() replaced region indexing approach pileup_cells(). pileup_sites() now requires GRanges object rather bed file. bedfileparameter removed replaced sites parameter. Renamed Ref Var output columns REF ALT nVar renamed nAlt. provides consistency VCF format consistency across pileup_cells() pileup_sites() function calls pileup_cells() gained functionality process multiple smart-seq2 style bam files. Changed filterParam argument pileup_sites pileup_cells param simplicity. Added FilterParam exclude multi-allelic sites report_multiallelic, exclude reporting variant Var assay based allelic frequency (min_allelic_freq). bam_flags parameter used pileup_sites pileup_cells moved FilterParam class. bedindex parameter pileup_sites removed. option needed user level planned replaced regional indexing used pileup_cells(). Added FilterParam option trim reads based fractional distance 5’ (ftrim_5p) 3’ end (ftrim_3p). Incorporated RBPZ VDB statistics bcftools, now returned rowData columns calling pileup_sites. RangedSummarizedExperiment object now directly returned pileup_sites. Using merge_pileups longer necessary exported function. Renamed get_pileup pileup_sites create_se merge_pileups Rename remove_clustered_variants, remove_multiallelic, remove_splice_variants filter_* consistency. Rewrote renamed single cell editing function sc_editing pileup_cells(). pileup_cells() require sorting index cell barcode, uses new format specify sites query requires providing reference alternate alleles interest, writes disk sparse matrix compatible format reduce memory usage, performance need query fasta index. Implemented method collapse reads duplicate UMIs. Added option filter sites pileup based number reads containing variant (#54) Added NEWS.md file track changes package.","code":""}]
