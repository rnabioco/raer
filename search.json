[{"path":"https://rnabioco.github.io/raer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 raer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"de-tutorial","dir":"Articles","previous_headings":"","what":"DE tutorial","title":"Introducing the raer package","text":"Steps perform differential editing using Raer","code":""},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"set-up","dir":"Articles","previous_headings":"DE tutorial","what":"Set up","title":"Introducing the raer package","text":"First load required packages Set directories read data (eventually, make downloadable)","code":"library(raer) library(here) library(tidyverse) library(SummarizedExperiment) library(edgeR) library(DESeq2) library(ComplexHeatmap) res_dir <- here(\"../working_dir/results/GSE99249/\")  # Read in data se <- readRDS(file.path(res_dir, \"merged_se_with_meta.rds\"))"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"preprocess","dir":"Articles","previous_headings":"DE tutorial","what":"Preprocess","title":"Introducing the raer package","text":"start using add_editing_frequencies function identify percent edits position sample. Several pre-built options available: (“AI”), U C (“UC”), C U (“CU”), G (“GA”). can specify editing setting type = AI (also default). interested kind editing, can use custom event. , set type = \"none\" edit_from = nucleotide_1 edit_to = nucleotide_2. , edit_from nucleotide reference () edit_to nucleotide editing (G). edit_from edit_to must valid nucleotide (, T, C, G). can also make plots show number edited sites frequency editing per sample. can make plots using make_plots = TRUE. make_plots = TRUE save dir specified, plots filtered object returned list rather directly save plots, can provide save directory. plots saved “number_of_sites.pdf” “editing_index.pdf”. plots saved, filtered object returned. object filtered, can prepare DE. means making assay counts contains alt ref allele.","code":"se_filtered <- add_editing_frequencies(se, type = \"AI\",                                        edit_frequency = 0.01,                                        min_count = 10) se_filtered <- add_editing_frequencies(se, type = \"none\",                                        edit_frequency = 0.01,                                        min_count = 10,                                        edit_from = \"C\", edit_to = \"T\") se_results <- add_editing_frequencies(se, type = \"AI\",                                       edit_frequency = 0.01,                                       min_count = 10,                                       make_plots = TRUE)                                        se_filtered <- se_results[[1]] site_plot <- se_results[[2]] frequency_plot <- se_results[[3]] se_filtered <- add_editing_frequencies(se, type = \"AI\",                                        edit_frequency = 0.01,                                        min_count = 10,                                        make_plots = TRUE,                                        save_dir = \"results\") deobj <- prep_for_de(se_filtered,                      min_prop = 0.1,                      max_prop = 0.9,                      min_samples = 3)"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing-deseq2","dir":"Articles","previous_headings":"DE tutorial","what":"Run differential editing (DESeq2)","title":"Introducing the raer package","text":"stage, can use object perform DE can continue pre built functions differential editing, use design design <- ~0 + condition:sample + condition:count. samples, can leave combine sample name shows treatment control. results identical close. hands, genes come , p values log fold change values slightly different. probably best update levels object, don’t, still work. run using DESEq2, set type = DESEq2 de_results function. function requires specify control treatment condition column deobj. returns list dds object, full results, significant results, model matrix. ’d rather use sample information described DESEq2 vignette, can make sample names go across treatment control","code":"de_results <- perform_de(deobj, type = \"DESeq2\", sample_col = \"sample\",                          condition_col = \"genotype\",                          condition_control = \"Wildtype\",                          condition_treatment = \"ADAR1KO\") sample_mapping = c(\"SRR5564260\" = \"s1\",                    \"SRR5564270\" = \"s1\",                    \"SRR5564261\" = \"s2\",                    \"SRR5564271\" = \"s2\",                    \"SRR5564268\" = \"s3\",                    \"SRR5564274\" = \"s3\",                    \"SRR5564269\" = \"s4\",                    \"SRR5564275\" = \"s4\",                    \"SRR5564272\" = \"s5\",                    \"SRR5564276\" = \"s5\",                    \"SRR5564273\" = \"s6\",                    \"SRR5564277\" = \"s6\")  deobj$sample_new <- sample_mapping[deobj$sample]  deobj$sample_new <- factor(deobj$sample_new)  de_results <- perform_de(deobj, type = \"DESeq2\", sample_col = \"sample_new\",                          condition_col = \"genotype\",                          condition_control = \"Wildtype\",                          condition_treatment = \"ADAR1KO\")"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"run-differential-editing-edger","dir":"Articles","previous_headings":"DE tutorial","what":"Run differential editing (edgeR)","title":"Introducing the raer package","text":"stage, can use object perform DE can continue pre built functions differential editing, use design design <- ~0 + condition:sample + condition:count. samples, can leave combine sample name shows treatment control. results identical close. hands, genes come , p values log fold change values slightly different. probably best update levels object, don’t, still work. run using edgeR, set type = edgeR de_results function. function requires specify control treatment condition column deobj. returns list dds object, full results, significant results, model matrix. ’d rather use sample information described DESEq2 vignette, can make sample names go across treatment control","code":"de_edger_results <- perform_de(deobj, type = \"edgeR\",                                sample_col = \"sample\",                                condition_col = \"genotype\",                                condition_control = \"Wildtype\",                                condition_treatment = \"ADAR1KO\") sample_mapping = c(\"SRR5564260\" = \"s1\",                    \"SRR5564270\" = \"s1\",                    \"SRR5564261\" = \"s2\",                    \"SRR5564271\" = \"s2\",                    \"SRR5564268\" = \"s3\",                    \"SRR5564274\" = \"s3\",                    \"SRR5564269\" = \"s4\",                    \"SRR5564275\" = \"s4\",                    \"SRR5564272\" = \"s5\",                    \"SRR5564276\" = \"s5\",                    \"SRR5564273\" = \"s6\",                    \"SRR5564277\" = \"s6\")  deobj$sample_new <- sample_mapping[deobj$sample]  deobj$sample_new <- factor(deobj$sample_new)  de_edger_results <- perform_de(deobj, type = \"edgeR\",                                sample_col = \"sample_new\",                                condition_col = \"genotype\",                                condition_control = \"Wildtype\",                                condition_treatment = \"ADAR1KO\")"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"perform-your-own-comparisons-deseq2","dir":"Articles","previous_headings":"DE tutorial","what":"Perform your own comparisons (DESeq2)","title":"Introducing the raer package","text":"found straight forward pull comparisions interest following tutorial. ask comparisons dataset, first need identify specific matrix design comparison. model matrix used experiment returned perform_de function. get results, first pull return list also need get DESeq object list now can subset matrix conditions interested can now use pull specific comparisions using results function. can look differences treatment control just alt allele: just ref allele: just find alt vs ref allele treatment: find alt vs ref specific treatment (returned results perform_de):","code":"mod_mat <- de_results$model_matrix dds <- de_results$deseq_obj alt_treatment <- colMeans(mod_mat[dds$condition == condition_treatment &                                   dds$count == \"alt\",]) ref_treatment <- colMeans(mod_mat[dds$condition == condition_treatment &                                   dds$count == \"ref\",])  alt_control <- colMeans(mod_mat[dds$condition == condition_control &                                 dds$count == \"alt\",]) ref_control <- colMeans(mod_mat[dds$condition == condition_control &                                 dds$count == \"ref\",]) alt_treat_control <- results(dds, contrast = alt_treatment - alt_control) ref_treat_control <- results(dds, contrast = ref_treatment - ref_control) alt_ref_treat <- results(dds, contrast = alt_treatment - ref_treatment) treatment_vs_control <- results(dds,                                   contrast = (alt_treatment - ref_treatment) -                                      (alt_control - ref_control))"},{"path":"https://rnabioco.github.io/raer/articles/raer.html","id":"perform-your-own-comparisons-edger","dir":"Articles","previous_headings":"DE tutorial","what":"Perform your own comparisons (edgeR)","title":"Introducing the raer package","text":"found straight forward pull comparisions interest following tutorial. ask comparisons dataset, first need identify specific matrix design comparison. model matrix used experiment returned perform_de function. get results, first pull return list also need get DESeq object list now can subset matrix conditions interested can now use pull specific comparisions using results function. can look differences treatment control just alt allele: just ref allele: just find alt vs ref allele treatment: find alt vs ref specific treatment (returned results perform_de):","code":"mod_mat <- de_results$model_matrix deobj <- de_results$deseq_obj alt_treatment <- colMeans(mod_mat[deobj$condition == condition_treatment &                                  deobj$count == \"alt\",]) ref_treatment <- colMeans(mod_mat[deobj$condition == condition_treatment &                                  deobj$count == \"ref\",])  alt_control <- colMeans(mod_mat[deobj$condition == condition_control &                                deobj$count == \"alt\",]) ref_control <- colMeans(mod_mat[deobj$condition == condition_control &                                deobj$count == \"ref\",]) alt_treat_control <- glmLRT(deobj, contrast = alt_treatment - alt_control)  alt_treat_control <- topTags(alt_treat_control, n = nrow(alt_treat_control)) ref_treat_control <- glmLRT(deobj, contrast = ref_treatment - ref_control)  ref_treat_control <- topTags(ref_treat_control, n = nrow(ref_treat_control)) alt_ref_treat <- glmLRT(deobj, contrast = alt_treatment - ref_treatment)  alt_ref_treat <- topTags(alt_ref_treat, n = nrow(alt_ref_treat)) treatment_vs_control <- glmLRT(deobj, contrast = (alt_treatment - ref_treatment) -                    (alt_control - ref_control))  treatment_vs_control <- topTags(treatment_vs_control,                               n = nrow(treatment_vs_control))"},{"path":"https://rnabioco.github.io/raer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kent Riemondy. Author, maintainer. Kristen Wells. Author. Ryan Sheridan. Author. . Funder.","code":""},{"path":"https://rnabioco.github.io/raer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Riemondy K, Wells K, Sheridan R (2022). raer: RNA editing tools R. R package version 0.99.0, http://github.com/rnabioco/raer.","code":"@Manual{,   title = {raer: RNA editing tools in R},   author = {Kent Riemondy and Kristen Wells and Ryan Sheridan},   year = {2022},   note = {R package version 0.99.0},   url = {http://github.com/rnabioco/raer}, }"},{"path":"https://rnabioco.github.io/raer/index.html","id":"raer","dir":"","previous_headings":"","what":"RNA editing tools in R","title":"RNA editing tools in R","text":"raer R package facilitates rapid interactive analysis RNA editing R bioconductor ecosystem. Vignettes provided demonstrate quantify known events, identify novel editing sites, examine editing single cell datasets.","code":""},{"path":"https://rnabioco.github.io/raer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RNA editing tools in R","text":"can install development version raer GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rnabioco/raer\")"},{"path":"https://rnabioco.github.io/raer/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"RNA editing tools in R","text":"raer package provides methods compute per site read count summaries bam files, either known sites, detected sites. Multiple bam files can processed, enables rapid comparisons RNA-Seq vs. WGS WXS data, RNA-Seq vs RNA-seq (ADAR WT VS ADAR KO). facilitate comparisions across groups, pileups can stored RangedSummarizedExperiment.","code":"library(raer) bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") bam2fn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") bedfn <- system.file(\"extdata\", \"regions.bed\", package = \"raer\")  res <- get_pileup(bamfn, fafn, bedfile = bedfn, only_keep_variants = T) res #> GRanges object with 2 ranges and 9 metadata columns: #>       seqnames    ranges strand |         Ref         Var      nRef      nVar #>          <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>   [1]     SSR3       228      - |           A          AG        13         1 #>   [2]    SPCS3       227      + |           G          GA         0         2 #>              nA        nT        nC        nG        nN #>       <integer> <integer> <integer> <integer> <integer> #>   [1]        13         0         0         1         0 #>   [2]         2         0         0         0         0 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  res <- get_pileup(bamfn, fafn, only_keep_variants = T) res #> GRanges object with 31 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       228      - |           A          AG        13         1 #>    [3]     SSR3       244      - |           A          AG        18         1 #>    [4]     SSR3       254      - |           A          AG        18         1 #>    [5]     SSR3       258      - |           G          GA         8        10 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [27]     DHFR       300      - |           A          AG        56         1 #>   [28]     DHFR       332      - |           A          AG        55         1 #>   [29]     DHFR       336      - |           G          GT        51         1 #>   [30]     DHFR       430      - |           A          AT        37         1 #>   [31]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0 #>    [2]        13         0         0         1         0 #>    [3]        18         0         0         1         0 #>    [4]        18         0         0         1         0 #>    [5]        10         0         0         8         0 #>    ...       ...       ...       ...       ...       ... #>   [27]        56         0         0         1         0 #>   [28]        55         0         0         1         0 #>   [29]         0         1         0        51         0 #>   [30]        37         1         0         0         0 #>   [31]         0        35         1         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths plps <- get_pileup(c(bam2fn, bamfn),                    min_reads = 2,                   fafn,                    library_type = c(\"fr-first-strand\", \"fr-first-strand\"),                   only_keep_variants = T) plps #> [[1]] #> GRanges object with 74 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T           -        15         0 #>    [2]     SSR3       125      - |           C          CG        21         1 #>    [3]     SSR3       156      - |           C          CA        25         1 #>    [4]     SSR3       176      - |           A          AG         8        16 #>    [5]     SSR3       198      - |           A          AG        24         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A          AT        31         1 #>   [71]     DHFR       399      - |           G          GA        28         1 #>   [72]     DHFR       423      - |           T          TC        31         1 #>   [73]     DHFR       430      - |           A           -        33         0 #>   [74]     DHFR       513      - |           T           -        21         0 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        15         0         0         0 #>    [2]         0         0        21         1         0 #>    [3]         1         0        25         0         0 #>    [4]         8         0         0        16         0 #>    [5]        24         0         0         1         0 #>    ...       ...       ...       ...       ...       ... #>   [70]        31         1         0         0         0 #>   [71]         1         0         0        28         0 #>   [72]         0        31         1         0         0 #>   [73]        33         0         0         0         0 #>   [74]         0        21         0         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths #>  #> [[2]] #> GRanges object with 74 ranges and 9 metadata columns: #>        seqnames    ranges strand |         Ref         Var      nRef      nVar #>           <Rle> <IRanges>  <Rle> | <character> <character> <integer> <integer> #>    [1]     SSR3       102      - |           T          TG        12         1 #>    [2]     SSR3       125      - |           C           -        17         0 #>    [3]     SSR3       156      - |           C           -        16         0 #>    [4]     SSR3       176      - |           A           -        16         0 #>    [5]     SSR3       198      - |           A           -        15         0 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [70]     DHFR       397      - |           A           -        43         0 #>   [71]     DHFR       399      - |           G           -        43         0 #>   [72]     DHFR       423      - |           T           -        42         0 #>   [73]     DHFR       430      - |           A          AT        37         1 #>   [74]     DHFR       513      - |           T          TC        35         1 #>               nA        nT        nC        nG        nN #>        <integer> <integer> <integer> <integer> <integer> #>    [1]         0        12         0         1         0 #>    [2]         0         0        17         0         0 #>    [3]         0         0        16         0         0 #>    [4]        16         0         0         0         0 #>    [5]        15         0         0         0         0 #>    ...       ...       ...       ...       ...       ... #>   [70]        43         0         0         0         0 #>   [71]         0         0         0        43         0 #>   [72]         0        42         0         0         0 #>   [73]        37         1         0         0         0 #>   [74]         0        35         1         0         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths create_se(plps) #> Sample names not provided, using sample_1, sample_2!!! #> class: RangedSummarizedExperiment  #> dim: 74 2  #> metadata(0): #> assays(9): Ref Var ... nG nN #> rownames: NULL #> rowData names(0): #> colnames(2): sample_1 sample_2 #> colData names(1): sample"},{"path":"https://rnabioco.github.io/raer/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"RNA editing tools in R","text":"functionality raer builds previously published methods software: - Python package: REDItools XXX - Java package: JACUSA2 XXX - Python pipeline: deNovo-Detect Gabey et al - Snakemake pipeline: rnaedits xxx","code":""},{"path":"https://rnabioco.github.io/raer/reference/BedFile-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A reference class for generating and storing index of BedFile — BedFile-class","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":"Class store information bedfile used indicating regions pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/BedFile-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A reference class for generating and storing index of BedFile — BedFile-class","text":".extptr externalptr c-level samtools bedindex path filepath bed file open logical indicating index open","code":""},{"path":"https://rnabioco.github.io/raer/reference/add_editing_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds editing frequencies — add_editing_frequencies","title":"Adds editing frequencies — add_editing_frequencies","text":"Adds editing frequencies existing SummarizedExperimentobject (created create_se). Currently editing supported well custom editing events. SummarizedExperiment new assay editing requences site (edit_freq) new colData columns number edited sites (n_sites) fraction edits (edit_idx) returned. make_plots set true save directory specified, list including SummarizedExperiment object plots number sites editied fraction editing events returned.","code":""},{"path":"https://rnabioco.github.io/raer/reference/add_editing_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds editing frequencies — add_editing_frequencies","text":"","code":"add_editing_frequencies(   se_object,   type = \"AI\",   edit_from = NULL,   edit_to = NULL,   make_plots = FALSE,   save_dir = NULL,   edit_frequency = 0.01,   min_count = 10,   ... )"},{"path":"https://rnabioco.github.io/raer/reference/add_editing_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds editing frequencies — add_editing_frequencies","text":"se_object SummarizedExperiment object created create_se type OPTIONAL type editing event add. Currently, options (\"AI\"), U C (\"UC\"), C U (\"CU\"), G (\"GA\"). \"AI\" default. want editing option outside , custom can added setting \"none\". edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set. make_plots OPTIONAL plots showing number frequency editing events made. Default False. True, colData columns containing treatment replicate information provided. See make_editing_plots save_dir OPTIONAL plots created saved, include path directory. plots saved \"number_of_sites.pdf\" \"editing_index.pdf\". directory provided, plots returned list SummarizedExperiment object. edit_frequency OPTIONAL edit frequency used determine number sites. Default 0.01. min_count OPTIONAL number reads used determine number edited sites. Default 10. ... Options passed make_editing_plots","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"Utility function map annotations GRanges rowData SummarizedExperiment GRanges object . multiple features overlap concatenated comma separated values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"annot_from_gr(obj, gr, cols_to_map)"},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"obj RangedSummarizedExperiment GRanges object gr GRanges annotations map obj cols_to_map character vector columns gr map obj. vector names, names column names output obj","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_from_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a RangedSummarizedExperiment using Granges objects — annot_from_gr","text":"","code":"example(create_se, echo = FALSE) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, #>     colOrderStats, colProds, colQuantiles, colRanges, colRanks, #>     colSdDiffs, colSds, colSums2, colTabulates, colVarDiffs, #>     colVars, colWeightedMads, colWeightedMeans, #>     colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, #>     rowAnyNAs, rowAnys, rowAvgsPerColSet, rowCollapse, rowCounts, #>     rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, #>     rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, #>     rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, #>     rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, #>     rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, #>     is.unsorted, lapply, mapply, match, mget, order, paste, pmax, #>     pmax.int, pmin, pmin.int, rank, rbind, rownames, sapply, #>     setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages #>     'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians library(SummarizedExperiment) gr <- GRanges(rep(c(\"SSR3\", \"SPCS3\"), c(5, 15)),              IRanges(seq(1, 500, by = 25), width=50),              strand=\"+\") gr$feature <- sample(1:100, size = 20) gr$id <- sample(LETTERS, size = 20)  se <- annot_from_gr(se, gr, c(feature_set = \"feature\", \"id\")) rowData(se) #> DataFrame with 1695 rows and 2 columns #>      feature_set          id #>      <character> <character> #> 1             28           A #> 2             28           A #> 3             28           A #> 4             28           A #> 5             28           A #> ...          ...         ... #> 1691          NA          NA #> 1692          NA          NA #> 1693          NA          NA #> 1694          NA          NA #> 1695          NA          NA"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate snps — annot_snps","title":"Annotate snps — annot_snps","text":"Annotate snps","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate snps — annot_snps","text":"","code":"annot_snps(obj, ...)"},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate snps — annot_snps","text":"obj GRanges SummarizedExperiment  object dbsnp SNPlocs package, see available packages BSgenome::available.SNPs() chrom operate specified chromosome col_to_aggr column SNPlocs package add input. multiple SNPs overlap values concatenated comma separated values. drop TRUE, remove sites overlap SNPs","code":""},{"path":"https://rnabioco.github.io/raer/reference/annot_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate snps — annot_snps","text":"Either GRanges SummarizedExperiment object new column \"snp\" added information \"col_to_aggr\"","code":""},{"path":"https://rnabioco.github.io/raer/reference/build_tag_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Build index for tag sorted bam file — build_tag_index","title":"Build index for tag sorted bam file — build_tag_index","text":"Build index tag sorted bam file","code":""},{"path":"https://rnabioco.github.io/raer/reference/build_tag_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build index for tag sorted bam file — build_tag_index","text":"","code":"build_tag_index(bamfn)"},{"path":"https://rnabioco.github.io/raer/reference/build_tag_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build index for tag sorted bam file — build_tag_index","text":"bamfn CB tag sorted bamfile","code":""},{"path":"https://rnabioco.github.io/raer/reference/build_tag_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build index for tag sorted bam file — build_tag_index","text":"name index generated, bam file + \".bri\"","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Adenosine Editing Index describes magnitude --editing sample. index weighted average editing events (G bases) observed positions. vast majority --editing occurs ALU elements human genome, regions high --editing signal compared regions coding exons. function perform pileup specified repeat regions return summary AEI metric.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"calc_AEI(   bam_fn,   fasta_fn,   alu_ranges = NULL,   txdb = NULL,   snp_db = NULL,   BPPARAM = SerialParam(),   verbose = FALSE )"},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"bam_fn bam file fasta_fn fasta alu_ranges GRanges regions query calculating AEI, typically ALU repeats. txdb txdb object, supplied,  used subset alu_ranges found overlapping genes. snp_db SNP package, supplied, used exclude polymorphic positions prior calculating AEI. BPPARAM BiocParallelParam object specifying parallel options operating chromosomes.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"named list AEI index computed allelic combinations. correctly computed signal A_G index higher alleles (T_C), likely derived noise polymorphisms.","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"Roth, S.H., Levanon, E.Y. & Eisenberg, E. Genome-wide quantification ADAR adenosine--inosine RNA editing activity. Nat Methods 16, 1131–1138 (2019). https://doi.org/10.1038/s41592-019-0610-9","code":""},{"path":"https://rnabioco.github.io/raer/reference/calc_AEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Adenosine Editing Index (AEI) — calc_AEI","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\") calc_AEI(bamfn, fafn) #> $A_C #> [1] 0 #>  #> $A_G #> [1] 1.857708 #>  #> $A_T #> [1] 0.1206758 #>  #> $C_A #> [1] 0.2475758 #>  #> $C_G #> [1] 0 #>  #> $C_T #> [1] 0.2269913 #>  #> $G_A #> [1] 0.3169277 #>  #> $G_C #> [1] 0 #>  #> $G_T #> [1] 0 #>  #> $T_A #> [1] 0 #>  #> $T_C #> [1] 0 #>  #> $T_G #> [1] 0.01332268 #>"},{"path":"https://rnabioco.github.io/raer/reference/close.BedFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Close a BedFile index connection — close.BedFile","title":"Close a BedFile index connection — close.BedFile","text":"Close BedFile index connection","code":""},{"path":"https://rnabioco.github.io/raer/reference/close.BedFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close a BedFile index connection — close.BedFile","text":"","code":"# S3 method for BedFile close(con, ...)"},{"path":"https://rnabioco.github.io/raer/reference/close.BedFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close a BedFile index connection — close.BedFile","text":"con BedFile class ... present consistency","code":""},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts edits — count_edits","title":"Counts edits — count_edits","text":"Counts edits per sample add new colData columns number edited sites (n_sites)  fraction edits (edit_idx). function called add_editing_frequencies meant used directly.","code":""},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts edits — count_edits","text":"","code":"count_edits(   se_filtered,   edit_frequency = 0.01,   min_count = 10,   edit_from = NULL,   edit_to = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/count_edits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts edits — count_edits","text":"se_filtered SummarizedExperiment object created create_se processed add_editing_frequencies edit_frequency OPTIONAL edit frequency used determine number sites. Default 0.01. min_count OPTIONAL number reads used determine number edited sites. Default 10. edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RangedSummarizedExperiment — create_se","title":"Create RangedSummarizedExperiment — create_se","text":"function take either single result running pileup_res list results (ie different samples) running pileup_res return summarized experiment object contains assays column pileup_res output. Currently add sample info can take list results. Potential added functionality allow user give existing SE object input give sample meta data.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"create_se(pileup_res, sample_names = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RangedSummarizedExperiment — create_se","text":"pileup_res results running get_pileup.R, can one result, list results, named list results. named list give, colData named using names list. sample_names OPTIONAL list names added SE object. sample names given pileup_res named list, default names (ie sample_1, sample_2, ..., sample_n) given warning printed.","code":""},{"path":"https://rnabioco.github.io/raer/reference/create_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create RangedSummarizedExperiment — create_se","text":"","code":"library(SummarizedExperiment) bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") bam2fn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\")  plps <- get_pileup(c(bamfn, bam2fn), fafn) names(plps) <- c(\"sample1\", \"sample2\") se <- create_se(plps)  assays(se) #> List of length 9 #> names(9): Ref Var nRef nVar nA nT nC nG nN  colData(se) #> DataFrame with 2 rows and 1 column #>              sample #>         <character> #> sample1     sample1 #> sample2     sample2  rowRanges(se) #> GRanges object with 1695 ranges and 0 metadata columns: #>          seqnames    ranges strand #>             <Rle> <IRanges>  <Rle> #>      [1]     SSR3         1      - #>      [2]     SSR3         2      - #>      [3]     SSR3         3      - #>      [4]     SSR3         4      - #>      [5]     SSR3         5      - #>      ...      ...       ...    ... #>   [1691]     DHFR       514      - #>   [1692]     DHFR       515      - #>   [1693]     DHFR       516      - #>   [1694]     DHFR       517      - #>   [1695]     DHFR       518      - #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/get_cell_bam.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a bam file to contain only certain cell barcodes — get_cell_bam","title":"Subset a bam file to contain only certain cell barcodes — get_cell_bam","text":"Subset bam file contain certain cell barcodes","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_cell_bam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a bam file to contain only certain cell barcodes — get_cell_bam","text":"","code":"get_cell_bam(inbam, barcodes, outbam = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/get_cell_bam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a bam file to contain only certain cell barcodes — get_cell_bam","text":"inbam input tag indexed bam file barcodes character vector tag values extract outbam optional output bam file name","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_cell_bam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a bam file to contain only certain cell barcodes — get_cell_bam","text":"Returns name output bam file","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate base counts using pileup — get_pileup","title":"Generate base counts using pileup — get_pileup","text":"Generate base counts using pileup","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate base counts using pileup — get_pileup","text":"","code":"get_pileup(   bamfile,   fafile,   bedfile = NULL,   region = NULL,   chrom = NULL,   start = NULL,   end = NULL,   min_reads = 1L,   min_base_qual = 20L,   min_mapq = c(0L),   max_depth = 10000,   library_type = \"fr-first-strand\",   outfile_prefix = NULL,   bedidx = NULL,   bam_flags = NULL,   event_filters = c(0, 0, 0, 0, 0, 0, 0),   only_keep_variants = FALSE,   reads = NULL,   return_data = TRUE )"},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate base counts using pileup — get_pileup","text":"fafile path fasta file bedfile path bed file sites regions query region samtools region query string (.e. chr1:100-1000) chrom chrom process, used region start start position, used region end end position, used region min_reads min read depth needed report site min_base_qual min base quality score consider read pileup min_mapq minimum required MAPQ score max_depth maximum read depth considered site library_type read orientation, one fr-first-strand, fr-second-strand, unstranded. Can supply vector specify input bam. outfile_prefix output prefix tabix indexed files bedidx BedFile object, supplied, pileup use index generated indexBed() bam_flags bam flags filter keep, use Rsamtools::scanBamFlag() set event_filters integer vector length 4 values indicating distance pileup position features filter. Distance trim 5' ends reads, 3' end reads, distance splicing events, distance indels, length homopolymer stretch used determine site homopolymer. number read mismatch types (e.g. ->G G->T) allowed single read, required # mismatches activate mismatch type filter. default filters applied (e.g. c(0,0,0,0,0,0,0)). only_keep_variants TRUE, variant sites reported (FALSE default) reads supplied fasta file written reads pass filters contain variants return_data return data Granges table? bamfiles paths 1 bam files","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate base counts using pileup — get_pileup","text":"list containing GRanges object input bam file, vector output tabixed file names return_data FALSE.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate base counts using pileup — get_pileup","text":"Multiple bam files can processed together, files written bam file. mode output regions consistent across files. min_mapq library_type parameters can specified input files.","code":""},{"path":"https://rnabioco.github.io/raer/reference/get_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate base counts using pileup — get_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") bam2fn <- system.file(\"extdata\", \"SRR5564277_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\")  plp <- get_pileup(bamfn, fafn) plps <- get_pileup(c(bamfn, bam2fn), fafn)"},{"path":"https://rnabioco.github.io/raer/reference/indexBed-character-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a samtools style index for a BedFile — indexBed,character-method","title":"Generate a samtools style index for a BedFile — indexBed,character-method","text":"Generate samtools style index BedFile","code":""},{"path":"https://rnabioco.github.io/raer/reference/indexBed-character-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a samtools style index for a BedFile — indexBed,character-method","text":"","code":"# S4 method for character indexBed(file)"},{"path":"https://rnabioco.github.io/raer/reference/indexBed-character-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a samtools style index for a BedFile — indexBed,character-method","text":"file path bed file","code":""},{"path":"https://rnabioco.github.io/raer/reference/indexBed-character-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a samtools style index for a BedFile — indexBed,character-method","text":"Return object class BedFile contains pointer bed file index.","code":""},{"path":"https://rnabioco.github.io/raer/reference/indexBed.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Bed — indexBed","title":"Index Bed — indexBed","text":"Index Bed","code":""},{"path":"https://rnabioco.github.io/raer/reference/indexBed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Bed — indexBed","text":"","code":"indexBed(file, ...)"},{"path":"https://rnabioco.github.io/raer/reference/make_editing_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes summary plots of editing — make_editing_plots","title":"Makes summary plots of editing — make_editing_plots","text":"Generates plots number sites edited per sample percent editing events per sample. function written called directly add_editing_frequencies","code":""},{"path":"https://rnabioco.github.io/raer/reference/make_editing_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes summary plots of editing — make_editing_plots","text":"","code":"make_editing_plots(   se_object,   colors = NULL,   meta_col = \"genotype_treatment\",   replicate = \"rep\" )"},{"path":"https://rnabioco.github.io/raer/reference/make_editing_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes summary plots of editing — make_editing_plots","text":"se_object SummarizedExperiment object created create_se colors OPTIONAL colors replicates. colors provided, Set1 `RColorBrewer used meta_col column colData used separate samples based condition. example, \"genotype\", \"treatment\", \"genotype_treatment.\" Default \"genotype_treatment.\" replicate column colData contining information replicates. Default \"rep\".","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing\nUses either edgeR or DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own. — perform_de","title":"Perform differential editing\nUses either edgeR or DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own. — perform_de","text":"moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing\nUses either edgeR or DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own. — perform_de","text":"","code":"perform_de(   deobj,   type = \"edgeR\",   sample_col = \"sample\",   condition_col = \"condition\",   condition_control = NULL,   condition_treatment = NULL )"},{"path":"https://rnabioco.github.io/raer/reference/perform_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing\nUses either edgeR or DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own. — perform_de","text":"deobj SummarizedExperiment object prepared de prep_for_de type OPTIONAL edgeR DESeq run. Default edgeR sample_col OPTIONAL name column colData(deobj) contains sample information. Default sample. column named \"sample\", must provide appropriate sample column condition_col OPTIONAL name column colData(deobj) contains treatment information. Default condition, column named \"condition\", must provide appropriate condition column condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Make summarized experiment object for DE\nGenerates a SummarizedExperiment object for use with edgeR or DESeq2\nwill generate a counts assay with a matrix formated with 2 columns per sample — prep_for_de","title":"Make summarized experiment object for DE\nGenerates a SummarizedExperiment object for use with edgeR or DESeq2\nwill generate a counts assay with a matrix formated with 2 columns per sample — prep_for_de","text":"Make summarized experiment object DE Generates SummarizedExperiment object use edgeR DESeq2 generate counts assay matrix formated 2 columns per sample","code":""},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make summarized experiment object for DE\nGenerates a SummarizedExperiment object for use with edgeR or DESeq2\nwill generate a counts assay with a matrix formated with 2 columns per sample — prep_for_de","text":"","code":"prep_for_de(   se,   type = \"AI\",   edit_from = NULL,   edit_to = NULL,   min_prop = 0.1,   max_prop = 0.9,   min_samples = 3 )"},{"path":"https://rnabioco.github.io/raer/reference/prep_for_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make summarized experiment object for DE\nGenerates a SummarizedExperiment object for use with edgeR or DESeq2\nwill generate a counts assay with a matrix formated with 2 columns per sample — prep_for_de","text":"se SummarizedExperiment object type OPTIONAL type editing event add. Currently, supported (\"AI\") default, custom can added setting \"none\". edit_from OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect reference. Ex. editing events, \"\". type \"AI\", edit edit_to must set. edit_to OPTIONAL using pre-built type, can specify editing. nucleotide (, C, G, T) correspond nucleotide expect editing event. Ex. editing events, \"G\". type \"AI\", edit edit_to must set. min_prop OPTIONAL min proporation reads edited site. least min_samples need pass keep site. Default 0.1. max_prop OPTIONAL max proporation reads edited site. least min_samples need pass keep site. Default 0.9. min_samples OPTIONAL minimum number samples passing cutoffs keep site. Default 3.","code":""},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":null,"dir":"Reference","previous_headings":"","what":"raer: RNA editing tools in R — raer","title":"raer: RNA editing tools in R — raer","text":"Toolkit identification, visualization, statistical testing RNA editing signals within R.","code":""},{"path":[]},{"path":"https://rnabioco.github.io/raer/reference/raer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raer: RNA editing tools in R — raer","text":"Maintainer: Kent Riemondy kent.riemondy@gmail.com (ORCID) Authors: Kristen Wells kristen.wells-wrasman@cuanschutz.edu (ORCID) Ryan Sheridan ryan.sheridan@cuanschutz.edu contributors: RNA Bioscience Initiative [funder]","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":null,"dir":"Reference","previous_headings":"","what":"Read pileup, indexed by tabix — read_pileup","title":"Read pileup, indexed by tabix — read_pileup","text":"Read pileup, indexed tabix","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"read_pileup(tbx_fn, region = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read pileup, indexed by tabix — read_pileup","text":"tbx_fn filename region region read file, samtools style region specifiers supported.","code":""},{"path":"https://rnabioco.github.io/raer/reference/read_pileup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read pileup, indexed by tabix — read_pileup","text":"","code":"bamfn <- system.file(\"extdata\", \"SRR5564269_Aligned.sortedByCoord.out.md.bam\", package = \"raer\") fafn <- system.file(\"extdata\", \"human.fasta\", package = \"raer\")  plp <- get_pileup(bamfn, fafn, return_data = FALSE) read_pileup(plp) #> GRanges object with 1666 ranges and 9 metadata columns: #>          seqnames    ranges strand |         Ref         Var      nRef #>             <Rle> <IRanges>  <Rle> | <character> <character> <integer> #>      [1]     SSR3         1      - |           C           -        13 #>      [2]     SSR3         2      - |           A           -        14 #>      [3]     SSR3         3      - |           A           -        14 #>      [4]     SSR3         4      - |           A           -        15 #>      [5]     SSR3         5      - |           G           -        15 #>      ...      ...       ...    ... .         ...         ...       ... #>   [1662]     DHFR       514      - |           T           -        33 #>   [1663]     DHFR       515      - |           A           -        36 #>   [1664]     DHFR       516      - |           A           -        33 #>   [1665]     DHFR       517      - |           A           -        35 #>   [1666]     DHFR       518      - |           G           -        34 #>               nVar        nA        nT        nC        nG        nN #>          <integer> <integer> <integer> <integer> <integer> <integer> #>      [1]         0         0         0        13         0         0 #>      [2]         0        14         0         0         0         0 #>      [3]         0        14         0         0         0         0 #>      [4]         0        15         0         0         0         0 #>      [5]         0         0         0         0        15         0 #>      ...       ...       ...       ...       ...       ...       ... #>   [1662]         0         0        33         0         0         0 #>   [1663]         0        36         0         0         0         0 #>   [1664]         0        33         0         0         0         0 #>   [1665]         0        35         0         0         0         0 #>   [1666]         0         0         0         0        34         0 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths"},{"path":"https://rnabioco.github.io/raer/reference/run_deseq2.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing with DESeq2\nUses DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_deseq2","title":"Perform differential editing with DESeq2\nUses DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_deseq2","text":"moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/run_deseq2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing with DESeq2\nUses DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_deseq2","text":"","code":"run_deseq2(deobj, condition_control = NULL, condition_treatment = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/run_deseq2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing with DESeq2\nUses DESeq2 to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_deseq2","text":"deobj SummarizedExperiment object prepared de prep_for_de condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""},{"path":"https://rnabioco.github.io/raer/reference/run_edger.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential editing with edgeR\nUses edgeR to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_edger","title":"Perform differential editing with edgeR\nUses edgeR to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_edger","text":"moment, function find editing events specific treatment, pretty straight forward add possible return values.","code":""},{"path":"https://rnabioco.github.io/raer/reference/run_edger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential editing with edgeR\nUses edgeR to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_edger","text":"","code":"run_edger(deobj, condition_control = NULL, condition_treatment = NULL)"},{"path":"https://rnabioco.github.io/raer/reference/run_edger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential editing with edgeR\nUses edgeR to perform differential editing analysis.\nThis will work for simple designs that have 1 treatment and 1 control.\nFor more complex designs, we suggest you perform your own.\nIt will test if your sample column makes the model matrix not full\nrank. If that happens, the model matrix will be modified to be full rank.\nThis is not intended to be called directly by the user, instead, this should\nbe called by perform_de — run_edger","text":"deobj SummarizedExperiment object prepared de prep_for_de condition_control name control condition. must variable condition_col colData(deobj). default provided. condition_treatment name treatment condition. must variable condition_col colData(deobj).","code":""}]
